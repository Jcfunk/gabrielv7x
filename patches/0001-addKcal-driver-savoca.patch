From 0fdeaf3953335c46d47801d46fdae3296c58ff63 Mon Sep 17 00:00:00 2001
From: mostafa-z <mostafazarghami@gmail.com>
Date: Sat, 6 Jun 2015 23:44:21 +0430
Subject: [PATCH] add:Kcal driver-[savoca]

---
 drivers/video/msm/mdss/Kconfig              |    7 +++++++
 drivers/video/msm/mdss/Makefile             |    2 ++
 drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.c |  409 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.h |   42 ++++++++++++++++++++++++++++++++++++++++++
 drivers/video/msm/mdss/mdss_mdp_pp.c        |
 patches/000-addKcal-driversavoca.patch      |
 6 files changed, 1765 insertions(+), 552 deletions(-)
 create mode 100644 drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.c
 create mode 100644 drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.h
 create mode 100644 patches/000-addKcal-driversavoca.patch

diff --git a/drivers/video/msm/mdss/Kconfig b/drivers/video/msm/mdss/Kconfig
index 2af9984..3cfe6cf 100644
--- a/drivers/video/msm/mdss/Kconfig
+++ b/drivers/video/msm/mdss/Kconfig
@@ -39,3 +39,10 @@ config LGE_VSYNC_SKIP
 	bool "MDSS VSYNC Skip scheme"
 	---help---
 	This feature provides VSYNC skip scheme.
+
+config FB_MSM_MDSS_KCAL_CTRL
+	depends on FB_MSM_MDSS
+	bool "MDSS color control"
+	---help---
+	  Enable sysfs for rgb/lut control for mdss-mdp display controllers
+	  in the MDSS sub-system.
diff --git a/drivers/video/msm/mdss/Makefile b/drivers/video/msm/mdss/Makefile
index 5a63af7..8273ca2 100644
--- a/drivers/video/msm/mdss/Makefile
+++ b/drivers/video/msm/mdss/Makefile
@@ -47,3 +47,5 @@ obj-$(CONFIG_FB_MSM_QPIC_ILI_QVGA_PANEL) += qpic_panel_ili_qvga.o
 obj-$(CONFIG_FB_MSM_MDSS) += mdss_fb.o
 
 obj-$(CONFIG_FB_MSM_MDSS_DSI_CTRL_STATUS) += mdss_dsi_status.o
+
+obj-$(CONFIG_FB_MSM_MDSS_KCAL_CTRL) += mdss_mdp_kcal_ctrl.o
diff --git a/drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.c b/drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.c
new file mode 100644
index 0000000..c49a9d2
--- /dev/null
+++ b/drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.c
@@ -0,0 +1,409 @@
+/*
+ * Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2013, LGE Inc. All rights reserved
+ * Copyright (c) 2014 savoca <adeddo27@gmail.com>
+ * Copyright (c) 2014 Paul Reioux <reioux@gmail.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/platform_device.h>
+#include <linux/init.h>
+#include <linux/module.h>
+
+#include "mdss_mdp.h"
+#include "mdss_mdp_kcal_ctrl.h"
+
+#ifdef CONFIG_FURNACE_BOOTMODE
+#include <mach/board_lge.h>
+#endif
+
+static void kcal_apply_values(struct kcal_lut_data *lut_data)
+{
+	/* gc_lut_* will save lut values even when disabled and
+	 * properly restore them on enable.
+	 */
+	lut_data->red = (lut_data->red < lut_data->minimum) ?
+		lut_data->minimum : lut_data->red;
+	lut_data->green = (lut_data->green < lut_data->minimum) ?
+		lut_data->minimum : lut_data->green;
+	lut_data->blue = (lut_data->blue < lut_data->minimum) ?
+		lut_data->minimum : lut_data->blue;
+
+	mdss_mdp_pp_kcal_update(lut_data->red, lut_data->green, lut_data->blue);
+}
+
+static ssize_t kcal_store(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	int kcal_r, kcal_g, kcal_b;
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	if (count > 12)
+		return -EINVAL;
+
+	sscanf(buf, "%d %d %d", &kcal_r, &kcal_g, &kcal_b);
+
+	if (kcal_r < 0 || kcal_r > 256)
+		return -EINVAL;
+
+	if (kcal_g < 0 || kcal_g > 256)
+		return -EINVAL;
+
+	if (kcal_b < 0 || kcal_b > 256)
+		return -EINVAL;
+
+	lut_data->red = kcal_r;
+	lut_data->green = kcal_g;
+	lut_data->blue = kcal_b;
+
+	kcal_apply_values(lut_data);
+
+	return count;
+}
+
+static ssize_t kcal_show(struct device *dev, struct device_attribute *attr,
+								char *buf)
+{
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d %d %d\n", lut_data->red, lut_data->green,
+		lut_data->blue);
+}
+
+static ssize_t kcal_min_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	int kcal_min;
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	if (count > 4)
+		return -EINVAL;
+
+	sscanf(buf, "%d", &kcal_min);
+
+	if (kcal_min < 0 || kcal_min > 256)
+		return -EINVAL;
+
+	lut_data->minimum = kcal_min;
+
+	kcal_apply_values(lut_data);
+
+	return count;
+}
+
+static ssize_t kcal_min_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", lut_data->minimum);
+}
+
+static ssize_t kcal_enable_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	int kcal_enable;
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	if (count != 2)
+		return -EINVAL;
+
+	sscanf(buf, "%d", &kcal_enable);
+
+	if (kcal_enable != 0 && kcal_enable != 1)
+		return -EINVAL;
+
+	if (lut_data->enable == kcal_enable)
+		return -EINVAL;
+
+	lut_data->enable = kcal_enable;
+
+	mdss_mdp_pp_kcal_enable(lut_data->enable ? true : false);
+
+	return count;
+}
+
+static ssize_t kcal_enable_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", lut_data->enable);
+}
+
+static ssize_t kcal_invert_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	int kcal_invert;
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	if (count != 2)
+		return -EINVAL;
+
+	sscanf(buf, "%d", &kcal_invert);
+
+	if (kcal_invert != 0 && kcal_invert != 1)
+		return -EINVAL;
+
+	if (lut_data->invert == kcal_invert)
+		return -EINVAL;
+
+	lut_data->invert = kcal_invert;
+
+	mdss_dsi_panel_invert(lut_data->invert);
+
+	return count;
+}
+
+static ssize_t kcal_invert_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", lut_data->invert);
+}
+
+static ssize_t kcal_sat_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	int kcal_sat;
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	if (count != 4)
+		return -EINVAL;
+
+	sscanf(buf, "%d", &kcal_sat);
+
+	if ((kcal_sat < 224 || kcal_sat > 383) && kcal_sat != 128)
+		return -EINVAL;
+
+	lut_data->sat = kcal_sat;
+
+	mdss_mdp_pp_kcal_pa(lut_data);
+
+	return count;
+}
+
+static ssize_t kcal_sat_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", lut_data->sat);
+}
+
+static ssize_t kcal_hue_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	int kcal_hue;
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	if (count > 5)
+		return -EINVAL;
+
+	sscanf(buf, "%d", &kcal_hue);
+
+	if (kcal_hue < 0 || kcal_hue > 1536)
+		return -EINVAL;
+
+	lut_data->hue = kcal_hue;
+
+	mdss_mdp_pp_kcal_pa(lut_data);
+
+	return count;
+}
+
+static ssize_t kcal_hue_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", lut_data->hue);
+}
+
+static ssize_t kcal_val_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	int kcal_val;
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	if (count != 4)
+		return -EINVAL;
+
+	sscanf(buf, "%d", &kcal_val);
+
+	if (kcal_val < 128 || kcal_val > 383)
+		return -EINVAL;
+
+	lut_data->val = kcal_val;
+
+	mdss_mdp_pp_kcal_pa(lut_data);
+
+	return count;
+}
+
+static ssize_t kcal_val_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", lut_data->val);
+}
+
+static ssize_t kcal_cont_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	int kcal_cont;
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	if (count != 4)
+		return -EINVAL;
+
+	sscanf(buf, "%d", &kcal_cont);
+
+	if (kcal_cont < 128 || kcal_cont > 383)
+		return -EINVAL;
+
+	lut_data->cont = kcal_cont;
+
+	mdss_mdp_pp_kcal_pa(lut_data);
+
+	return count;
+}
+
+static ssize_t kcal_cont_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", lut_data->cont);
+}
+
+static DEVICE_ATTR(kcal, 0644, kcal_show, kcal_store);
+static DEVICE_ATTR(kcal_min, 0644, kcal_min_show, kcal_min_store);
+static DEVICE_ATTR(kcal_enable, 0644, kcal_enable_show, kcal_enable_store);
+static DEVICE_ATTR(kcal_invert, 0644, kcal_invert_show, kcal_invert_store);
+static DEVICE_ATTR(kcal_sat, 0644, kcal_sat_show, kcal_sat_store);
+static DEVICE_ATTR(kcal_hue, 0644, kcal_hue_show, kcal_hue_store);
+static DEVICE_ATTR(kcal_val, 0644, kcal_val_show, kcal_val_store);
+static DEVICE_ATTR(kcal_cont, 0644, kcal_cont_show, kcal_cont_store);
+
+static int __devinit kcal_ctrl_probe(struct platform_device *pdev)
+{
+	int ret;
+	struct kcal_lut_data *lut_data;
+
+	lut_data = kzalloc(sizeof(*lut_data), GFP_KERNEL);
+	if (!lut_data) {
+		pr_err("%s: failed to allocate memory for lut_data\n",
+			__func__);
+		return -ENOMEM;
+	}
+
+	mdss_mdp_pp_kcal_enable(true);
+
+#ifdef CONFIG_FURNACE_BOOTMODE
+	if (lge_get_android_dlcomplete() == 0) {
+		mdss_mdp_pp_kcal_update(NUM_QLUT, NUM_QLUT, NUM_QLUT);
+		lut_data->red = lut_data->green = lut_data->blue = NUM_QLUT;
+	} else {
+		mdss_mdp_pp_kcal_update(232, 226, 242);
+		lut_data->red = 232;
+		lut_data->green = 226;
+		lut_data->blue = 242;
+	}
+#else
+	mdss_mdp_pp_kcal_update(NUM_QLUT, NUM_QLUT, NUM_QLUT);
+	lut_data->red = lut_data->green = lut_data->blue = NUM_QLUT;
+#endif
+
+	// These values are NOT final, they will be revised in a later commit.
+	lut_data->minimum = 35;
+	lut_data->enable = 1;
+	lut_data->invert = 0;
+	lut_data->sat = 256;
+	lut_data->hue = 0;
+	lut_data->val = 256;
+	lut_data->cont = 256;
+
+	platform_set_drvdata(pdev, lut_data);
+
+	ret = device_create_file(&pdev->dev, &dev_attr_kcal);
+	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_min);
+	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_enable);
+	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_invert);
+	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_sat);
+	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_hue);
+	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_val);
+	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_cont);
+	if (ret)
+		pr_err("%s: unable to create sysfs entries\n", __func__);
+
+	return ret;
+}
+
+static int __devexit kcal_ctrl_remove(struct platform_device *pdev)
+{
+	struct kcal_lut_data *lut_data = platform_get_drvdata(pdev);
+
+	device_remove_file(&pdev->dev, &dev_attr_kcal);
+	device_remove_file(&pdev->dev, &dev_attr_kcal_min);
+	device_remove_file(&pdev->dev, &dev_attr_kcal_enable);
+	device_remove_file(&pdev->dev, &dev_attr_kcal_invert);
+	device_remove_file(&pdev->dev, &dev_attr_kcal_sat);
+	device_remove_file(&pdev->dev, &dev_attr_kcal_hue);
+	device_remove_file(&pdev->dev, &dev_attr_kcal_val);
+	device_remove_file(&pdev->dev, &dev_attr_kcal_cont);
+
+	kfree(lut_data);
+
+	return 0;
+}
+
+static struct platform_driver kcal_ctrl_driver = {
+	.probe = kcal_ctrl_probe,
+	.remove = kcal_ctrl_remove,
+	.driver = {
+		.name = "kcal_ctrl",
+	},
+};
+
+static struct platform_device kcal_ctrl_device = {
+	.name = "kcal_ctrl",
+};
+
+static int __init kcal_ctrl_init(void)
+{
+	if (platform_driver_register(&kcal_ctrl_driver))
+		return -ENODEV;
+
+	if (platform_device_register(&kcal_ctrl_device))
+		return -ENODEV;
+
+	pr_info("%s: registered\n", __func__);
+
+	return 0;
+}
+
+static void __exit kcal_ctrl_exit(void)
+{
+	platform_device_unregister(&kcal_ctrl_device);
+	platform_driver_unregister(&kcal_ctrl_driver);
+}
+
+late_initcall(kcal_ctrl_init);
+module_exit(kcal_ctrl_exit);
+
+MODULE_DESCRIPTION("LCD KCAL Driver");
+
diff --git a/drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.h b/drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.h
new file mode 100644
index 0000000..d621077
--- /dev/null
+++ b/drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.h
@@ -0,0 +1,42 @@
+/*
+ * Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2013, LGE Inc. All rights reserved
+ * Copyright (c) 2014, savoca <adeddo27@gmail.com>
+ * Copyright (c) 2014, Paul Reioux <reioux@gmail.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MDSS_MDP_KCAL_CTRL_H
+#define __MDSS_MDP_KCAL_CTRL_H
+
+#define KCAL_DATA_R 0x01
+#define KCAL_DATA_G 0x02
+#define KCAL_DATA_B 0x03
+
+#define NUM_QLUT 0x100
+
+struct kcal_lut_data {
+	int red;
+	int green;
+	int blue;
+	int minimum;
+	int enable;
+	int invert;
+	int sat;
+	int hue;
+	int val;
+	int cont;
+};
+
+void mdss_mdp_pp_kcal_enable(bool enable);
+void mdss_mdp_pp_kcal_update(int kr, int kg, int kb);
+void mdss_mdp_pp_kcal_pa(struct kcal_lut_data *lut_data);
+#endif
diff --git a/drivers/video/msm/mdss/mdss_mdp_pp.c b/drivers/video/msm/mdss/mdss_mdp_pp.c
index 036a946..69b4833 100644
--- a/drivers/video/msm/mdss/mdss_mdp_pp.c
+++ b/drivers/video/msm/mdss/mdss_mdp_pp.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012-2014, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -22,6 +22,8 @@
 #include <mach/msm_bus.h>
 #include <mach/msm_bus_board.h>
 
+#include "mdss_mdp_kcal_ctrl.h"
+
 struct mdp_csc_cfg mdp_csc_convert[MDSS_MDP_MAX_CSC] = {
 	[MDSS_MDP_CSC_RGB2RGB] = {
 		0,
@@ -72,30 +74,20 @@ struct mdp_csc_cfg mdp_csc_convert[MDSS_MDP_MAX_CSC] = {
 		{ 0x0, 0xff, 0x0, 0xff, 0x0, 0xff,},
 	},
 };
-#if defined(CONFIG_LGE_BROADCAST_TDMB) || defined(CONFIG_LGE_BROADCAST_JFULLSEG)
+
+#if defined(CONFIG_LGE_BROADCAST_TDMB)
 struct mdp_csc_cfg dmb_csc_convert = {
 #if defined(CONFIG_MACH_MSM8974_G3_KR)
 	0,
 	{
-		0x023e, 0x0000, 0x0331,  /* 287 */
-		0x0244, 0xff37, 0xfe60,  /* 290 */
-		0x026c, 0x0409, 0x0000,  /* 310 */
+		0x023e, 0x0000, 0x0331,  //287
+		0x0244, 0xff37, 0xfe60,  //290
+		0x026c, 0x0409, 0x0000,  //310
 	},
 	{ 0xfff0, 0xff80, 0xff80,},
 	{ 0x0, 0x0, 0x0,},
 	{ 0x0, 0xff, 0x0, 0xff, 0x0, 0xff,},
 	{ 0x0, 0xff, 0x0, 0xff, 0x0, 0xff,},
-#elif defined(CONFIG_MACH_MSM8974_G3_KDDI)
-    0,
-    {
-		0x023e, 0x0000, 0x0331,  /* 287 */
-		0x0244, 0xff38, 0xfe61,  /* 290 */
-		0x026c, 0x0409, 0x0000,  /* 310 */
-    },
-    { 0xfff0, 0xff80, 0xff80,},
-    { 0x0, 0x0, 0x0,},
-    { 0x0, 0xff, 0x0, 0xff, 0x0, 0xff,},
-    { 0x0, 0xff, 0x0, 0xff, 0x0, 0xff,},
 #else
 	0,
 	{
@@ -119,8 +111,6 @@ struct mdp_csc_cfg dmb_csc_convert = {
 #define MDSS_BLOCK_DISP_NUM	(MDP_BLOCK_MAX - MDP_LOGICAL_BLOCK_DISP_0)
 
 #define HIST_WAIT_TIMEOUT(frame) ((75 * HZ * (frame)) / 1000)
-#define HIST_KICKOFF_WAIT_FRACTION 4
-
 /* hist collect state */
 enum {
 	HIST_UNKNOWN,
@@ -221,7 +211,6 @@ static u32 igc_limited[IGC_LUT_ENTRIES] = {
 #define MDSS_MDP_GAMUT_SIZE		0x5C
 #define MDSS_MDP_IGC_DSPP_SIZE		0x28
 #define MDSS_MDP_IGC_SSPP_SIZE		0x88
-#define MDSS_MDP_VIG_QSEED2_SHARP_SIZE	0x0C
 #define TOTAL_BLEND_STAGES		0x4
 
 #define PP_FLAGS_DIRTY_PA	0x1
@@ -382,10 +371,12 @@ int igc_c0_c1[256] = {0,};
 int igc_c2[256] = {0,};
 
 #endif
+
 static DEFINE_MUTEX(mdss_pp_mutex);
 static struct mdss_pp_res_type *mdss_pp_res;
-#if defined(CONFIG_LGE_BROADCAST_TDMB) || defined(CONFIG_LGE_BROADCAST_JFULLSEG)
-static int dmb_status; /* on - 1, off - 0 */
+
+#if defined(CONFIG_LGE_BROADCAST_TDMB)
+static int dmb_status = 0; /* on - 1, off - 0 */
 int pp_set_dmb_status(int flag)
 {
 	dmb_status = flag;
@@ -474,27 +465,12 @@ static void pp_ad_bypass_config(struct mdss_ad_info *ad,
 				struct mdss_mdp_ctl *ctl, u32 num, u32 *opmode);
 static int mdss_mdp_ad_setup(struct msm_fb_data_type *mfd);
 static void pp_ad_cfg_lut(char __iomem *addr, u32 *data);
-static int pp_ad_attenuate_bl(u32 bl, u32 *bl_out,
-		struct msm_fb_data_type *mfd);
 static int pp_num_to_side(struct mdss_mdp_ctl *ctl, u32 num);
 static inline bool pp_sts_is_enabled(u32 sts, int side);
 static inline void pp_sts_set_split_bits(u32 *sts, u32 bits);
 
 static u32 last_sts, last_state;
 
-inline int linear_map(int in, int *out, int in_max, int out_max)
-{
-	if (in < 0 || !out || in_max <= 0 || out_max <= 0)
-		return -EINVAL;
-	*out = ((in * out_max) / in_max);
-	pr_debug("in = %d, out = %d, in_max = %d, out_max = %d\n",
-		in, *out, in_max, out_max);
-	if ((in > 0) && (*out == 0))
-		*out = 1;
-	return 0;
-
-}
-
 int mdss_mdp_csc_setup_data(u32 block, u32 blk_idx, u32 tbl_idx,
 				   struct mdp_csc_cfg *data)
 {
@@ -881,15 +857,9 @@ static int pp_vig_pipe_setup(struct mdss_mdp_pipe *pipe, u32 *op)
 	unsigned long flags = 0;
 	char __iomem *offset;
 	struct mdss_data_type *mdata;
-	u32 current_opmode;
-	u32 csc_reset;
-	u32 dcm_state = DCM_UNINIT;
 
 	pr_debug("pnum=%x\n", pipe->num);
 
-	if (pipe->mixer && pipe->mixer->ctl && pipe->mixer->ctl->mfd)
-		dcm_state = pipe->mixer->ctl->mfd->dcm_state;
-
 	mdata = mdss_mdp_get_mdata();
 	if ((pipe->flags & MDP_OVERLAY_PP_CFG_EN) &&
 		(pipe->pp_cfg.config_ops & MDP_OVERLAY_PP_CSC_CFG)) {
@@ -903,19 +873,20 @@ static int pp_vig_pipe_setup(struct mdss_mdp_pipe *pipe, u32 *op)
 			 * TODO: Allow pipe to be programmed whenever new CSC is
 			 * applied (i.e. dirty bit)
 			 */
-			mdss_mdp_csc_setup_data(MDSS_MDP_BLOCK_SSPP, pipe->num,
-					1, &pipe->pp_cfg.csc_cfg);
+			if (pipe->play_cnt == 0)
+				mdss_mdp_csc_setup_data(MDSS_MDP_BLOCK_SSPP,
+				  pipe->num, 1, &pipe->pp_cfg.csc_cfg);
 	} else {
-		if (pipe->src_fmt->is_yuv) {
+		if (pipe->src_fmt->is_yuv)
 			opmode |= (0 << 19) |	/* DST_DATA=RGB */
 				  (1 << 18) |	/* SRC_DATA=YCBCR */
 				  (1 << 17);	/* CSC_1_EN */
-			/*
-			 * TODO: Needs to be part of dirty bit logic: if there
-			 * is a previously configured pipe need to re-configure
-			 * CSC matrix
-			 */
-#if !defined(CONFIG_LGE_BROADCAST_TDMB) && !defined(CONFIG_LGE_BROADCAST_JFULLSEG)
+		/*
+		 * TODO: Needs to be part of dirty bit logic: if there is a
+		 * previously configured pipe need to re-configure CSC matrix
+		 */
+		if (pipe->play_cnt == 0) {
+#if !defined(CONFIG_LGE_BROADCAST_TDMB)
 			mdss_mdp_csc_setup(MDSS_MDP_BLOCK_SSPP, pipe->num, 1,
 					   MDSS_MDP_CSC_YUV2RGB);
 #else
@@ -930,16 +901,6 @@ static int pp_vig_pipe_setup(struct mdss_mdp_pipe *pipe, u32 *op)
 
 	pp_histogram_setup(&opmode, MDSS_PP_SSPP_CFG | pipe->num, pipe->mixer);
 
-	/* Update CSC state only if tuning mode is enable */
-	if (dcm_state == DTM_ENTER) {
-		/* Reset bit 16 to 19 for CSC_STATE in VIG_OP_MODE */
-		csc_reset = 0xFFF0FFFF;
-		current_opmode = readl_relaxed(pipe->base +
-						MDSS_MDP_REG_VIG_OP_MODE);
-		*op |= ((current_opmode & csc_reset) | opmode);
-		return 0;
-	}
-
 	if (pipe->flags & MDP_OVERLAY_PP_CFG_EN) {
 		if ((pipe->pp_cfg.config_ops & MDP_OVERLAY_PP_PA_CFG) &&
 				(mdata->mdp_rev < MDSS_MDP_HW_REV_103)) {
@@ -1025,16 +986,10 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
 	u32 filter_mode;
 	struct mdss_data_type *mdata;
 	u32 src_w, src_h;
-	u32 dcm_state = DCM_UNINIT;
-	u32 chroma_shift_x = 0, chroma_shift_y = 0;
 
 	pr_debug("pipe=%d, change pxl ext=%d\n", pipe->num,
 			pipe->scale.enable_pxl_ext);
 	mdata = mdss_mdp_get_mdata();
-
-	if (pipe->mixer && pipe->mixer->ctl && pipe->mixer->ctl->mfd)
-		dcm_state = pipe->mixer->ctl->mfd->dcm_state;
-
 	if (mdata->mdp_rev >= MDSS_MDP_HW_REV_102 && pipe->src_fmt->is_yuv)
 		filter_mode = MDSS_MDP_SCALE_FILTER_CA;
 	else
@@ -1069,20 +1024,19 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
 		pipe->pp_cfg.sharp_cfg.noise_thr = SHARP_NOISE_THR_DEFAULT;
 	}
 
-	if (dcm_state != DTM_ENTER &&
-		((pipe->src_fmt->is_yuv) &&
-		!((pipe->dst.w < src_w) || (pipe->dst.h < src_h)))) {
-			pp_sharp_config(pipe->base +
-			   MDSS_MDP_REG_VIG_QSEED2_SHARP,
-			   &pipe->pp_res.pp_sts,
-			   &pipe->pp_cfg.sharp_cfg);
+	if ((pipe->src_fmt->is_yuv) &&
+		!((pipe->dst.w < src_w) || (pipe->dst.h < src_h))) {
+		pp_sharp_config(pipe->base +
+		   MDSS_MDP_REG_VIG_QSEED2_SHARP,
+		   &pipe->pp_res.pp_sts,
+		   &pipe->pp_cfg.sharp_cfg);
 	}
 
 	if ((src_h != pipe->dst.h) ||
 	    (pipe->pp_res.pp_sts.sharp_sts & PP_STS_ENABLE) ||
 	    (chroma_sample == MDSS_MDP_CHROMA_420) ||
 	    (chroma_sample == MDSS_MDP_CHROMA_H1V2) ||
-	    (pipe->scale.enable_pxl_ext && (src_h != pipe->dst.h))) {
+	    pipe->scale.enable_pxl_ext) {
 		pr_debug("scale y - src_h=%d dst_h=%d\n", src_h, pipe->dst.h);
 
 		if ((src_h / MAX_DOWNSCALE_RATIO) > pipe->dst.h) {
@@ -1096,10 +1050,11 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
 		init_phasey = pipe->scale.init_phase_y[0];
 
 		if (pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
+			u32 chroma_shift = 0;
 			if (!pipe->vert_deci &&
 			    ((chroma_sample == MDSS_MDP_CHROMA_420) ||
 			    (chroma_sample == MDSS_MDP_CHROMA_H1V2)))
-				chroma_shift_y = 1; /* 2x upsample chroma */
+				chroma_shift = 1; /* 2x upsample chroma */
 
 			if (src_h <= pipe->dst.h)
 				scale_config |= /* G/Y, A */
@@ -1110,17 +1065,16 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
 					(MDSS_MDP_SCALE_FILTER_PCMN << 10) |
 					(MDSS_MDP_SCALE_FILTER_PCMN << 18);
 
-			if ((src_h >> chroma_shift_y) <= pipe->dst.h)
+			if ((src_h >> chroma_shift) <= pipe->dst.h)
 				scale_config |= /* CrCb */
 					(MDSS_MDP_SCALE_FILTER_BIL << 14);
 			else
 				scale_config |= /* CrCb */
 					(MDSS_MDP_SCALE_FILTER_PCMN << 14);
 
 			writel_relaxed(init_phasey, pipe->base +
 				MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEY);
-			writel_relaxed(phasey_step >> chroma_shift_y,
-				pipe->base +
+			writel_relaxed(phasey_step >> chroma_shift, pipe->base +
 				MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPY);
 		} else {
 			if (src_h <= pipe->dst.h)
@@ -1138,7 +1092,7 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
 	    (pipe->pp_res.pp_sts.sharp_sts & PP_STS_ENABLE) ||
 	    (chroma_sample == MDSS_MDP_CHROMA_420) ||
 	    (chroma_sample == MDSS_MDP_CHROMA_H2V1) ||
-	    (pipe->scale.enable_pxl_ext && (src_w != pipe->dst.w))) {
+	    pipe->scale.enable_pxl_ext) {
 		pr_debug("scale x - src_w=%d dst_w=%d\n", src_w, pipe->dst.w);
 
 		if ((src_w / MAX_DOWNSCALE_RATIO) > pipe->dst.w) {
@@ -1152,10 +1106,12 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
 		phasex_step = pipe->scale.phase_step_x[0];
 
 		if (pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
+			u32 chroma_shift = 0;
+
 			if (!pipe->horz_deci &&
 			    ((chroma_sample == MDSS_MDP_CHROMA_420) ||
 			    (chroma_sample == MDSS_MDP_CHROMA_H2V1)))
-				chroma_shift_x = 1; /* 2x upsample chroma */
+				chroma_shift = 1; /* 2x upsample chroma */
 
 			if (src_w <= pipe->dst.w)
 				scale_config |= /* G/Y, A */
@@ -1166,17 +1122,16 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
 					(MDSS_MDP_SCALE_FILTER_PCMN << 8) |
 					(MDSS_MDP_SCALE_FILTER_PCMN << 16);
 
-			if ((src_w >> chroma_shift_x) <= pipe->dst.w)
+			if ((src_w >> chroma_shift) <= pipe->dst.w)
 				scale_config |= /* CrCb */
 					(MDSS_MDP_SCALE_FILTER_BIL << 12);
 			else
 				scale_config |= /* CrCb */
 					(MDSS_MDP_SCALE_FILTER_PCMN << 12);
 
 			writel_relaxed(init_phasex, pipe->base +
 				MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEX);
-			writel_relaxed(phasex_step >> chroma_shift_x,
-				pipe->base +
+			writel_relaxed(phasex_step >> chroma_shift, pipe->base +
 				MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPX);
 		} else {
 			if (src_w <= pipe->dst.w)
@@ -1190,94 +1145,44 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
 		}
 	}
 
-	if (pipe->scale.enable_pxl_ext) {
-		if (pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
-			/*program x,y initial phase and phase step*/
-			writel_relaxed(pipe->scale.init_phase_x[0],
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C03_INIT_PHASEX);
-			writel_relaxed(pipe->scale.phase_step_x[0],
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C03_PHASESTEPX);
-			writel_relaxed(pipe->scale.init_phase_x[1],
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEX);
-			writel_relaxed(pipe->scale.phase_step_x[1],
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPX);
-
-			writel_relaxed(pipe->scale.init_phase_y[0],
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C03_INIT_PHASEY);
-			writel_relaxed(pipe->scale.phase_step_y[0],
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C03_PHASESTEPY);
-			writel_relaxed(pipe->scale.init_phase_y[1],
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEY);
-			writel_relaxed(pipe->scale.phase_step_y[1],
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPY);
-		} else {
+	if (pipe->scale.enable_pxl_ext &&
+		pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
+
+		/*program x,y initial phase and phase step*/
+		writel_relaxed(pipe->scale.init_phase_x[0],
+			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C03_INIT_PHASEX);
+		writel_relaxed(pipe->scale.phase_step_x[0],
+			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C03_PHASESTEPX);
+		writel_relaxed(pipe->scale.init_phase_x[1],
+			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEX);
+		writel_relaxed(pipe->scale.phase_step_x[1],
+			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPX);
+
+		writel_relaxed(pipe->scale.init_phase_y[0],
+			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C03_INIT_PHASEY);
+		writel_relaxed(pipe->scale.phase_step_y[0],
+			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C03_PHASESTEPY);
+		writel_relaxed(pipe->scale.init_phase_y[1],
+			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEY);
+		writel_relaxed(pipe->scale.phase_step_y[1],
+			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPY);
 
-			writel_relaxed(pipe->scale.phase_step_x[0],
-				pipe->base +
-				MDSS_MDP_REG_SCALE_PHASE_STEP_X);
-			writel_relaxed(pipe->scale.phase_step_y[0],
-				pipe->base +
-				MDSS_MDP_REG_SCALE_PHASE_STEP_Y);
-			writel_relaxed(pipe->scale.init_phase_x[0],
-				pipe->base +
-				MDSS_MDP_REG_SCALE_INIT_PHASE_X);
-			writel_relaxed(pipe->scale.init_phase_y[0],
-				pipe->base +
-				MDSS_MDP_REG_SCALE_INIT_PHASE_Y);
-		}
 		/*program pixel extn values for the SSPP*/
 		mdss_mdp_pipe_program_pixel_extn(pipe);
+	} else if (pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
+		writel_relaxed(phasex_step, pipe->base +
+		   MDSS_MDP_REG_SCALE_PHASE_STEP_X);
+		writel_relaxed(phasey_step, pipe->base +
+		   MDSS_MDP_REG_SCALE_PHASE_STEP_Y);
+		writel_relaxed(init_phasex, pipe->base +
+			MDSS_MDP_REG_SCALE_INIT_PHASE_X);
+		writel_relaxed(init_phasey, pipe->base +
+			MDSS_MDP_REG_SCALE_INIT_PHASE_Y);
 	} else {
-		if (pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
-			/*program x,y initial phase and phase step*/
-			writel_relaxed(0,
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C03_INIT_PHASEX);
-			writel_relaxed(init_phasex,
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEX);
-			writel_relaxed(phasex_step,
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C03_PHASESTEPX);
-			writel_relaxed(phasex_step >> chroma_shift_x,
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPX);
-
-			writel_relaxed(0,
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C03_INIT_PHASEY);
-			writel_relaxed(init_phasey,
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEY);
-			writel_relaxed(phasey_step,
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C03_PHASESTEPY);
-			writel_relaxed(phasey_step >> chroma_shift_y,
-				pipe->base +
-				MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPY);
-		} else {
-
-			writel_relaxed(phasex_step,
-				pipe->base +
-				MDSS_MDP_REG_SCALE_PHASE_STEP_X);
-			writel_relaxed(phasey_step,
-				pipe->base +
-				MDSS_MDP_REG_SCALE_PHASE_STEP_Y);
-			writel_relaxed(0,
-				pipe->base +
-				MDSS_MDP_REG_SCALE_INIT_PHASE_X);
-			writel_relaxed(0,
-				pipe->base +
-				MDSS_MDP_REG_SCALE_INIT_PHASE_Y);
-		}
+		writel_relaxed(phasex_step, pipe->base +
+		   MDSS_MDP_REG_SCALE_PHASE_STEP_X);
+		writel_relaxed(phasey_step, pipe->base +
+		   MDSS_MDP_REG_SCALE_PHASE_STEP_Y);
 	}
 
 	writel_relaxed(scale_config, pipe->base +
@@ -1308,43 +1213,28 @@ void mdss_mdp_pipe_sspp_term(struct mdss_mdp_pipe *pipe)
 	struct pp_hist_col_info *hist_info;
 	char __iomem *ctl_base;
 
-	if (pipe) {
-		if (pipe->pp_res.hist.col_en) {
-			done_bit = 3 << (pipe->num * 4);
-			hist_info = &pipe->pp_res.hist;
-			ctl_base = pipe->base +
-				MDSS_MDP_REG_VIG_HIST_CTL_BASE;
-			pp_histogram_disable(hist_info, done_bit, ctl_base);
-		}
-		memset(&pipe->pp_cfg, 0, sizeof(struct mdp_overlay_pp_params));
-		memset(&pipe->pp_res, 0, sizeof(struct mdss_pipe_pp_res));
+	if (!pipe && pipe->pp_res.hist.col_en) {
+		done_bit = 3 << (pipe->num * 4);
+		hist_info = &pipe->pp_res.hist;
+		ctl_base = pipe->base +
+			MDSS_MDP_REG_VIG_HIST_CTL_BASE;
+		pp_histogram_disable(hist_info, done_bit, ctl_base);
 	}
+	memset(&pipe->pp_cfg, 0, sizeof(struct mdp_overlay_pp_params));
+	memset(&pipe->pp_res, 0, sizeof(struct mdss_pipe_pp_res));
 }
 
 int mdss_mdp_pipe_sspp_setup(struct mdss_mdp_pipe *pipe, u32 *op)
 {
 	int ret = 0;
 	unsigned long flags = 0;
 	char __iomem *pipe_base;
 	u32 pipe_num;
 	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
-	u32 current_opmode;
-	u32 dcm_state = DCM_UNINIT;
 
 	if (pipe == NULL)
 		return -EINVAL;
 
-	if (pipe->mixer && pipe->mixer->ctl && pipe->mixer->ctl->mfd)
-		dcm_state = pipe->mixer->ctl->mfd->dcm_state;
-
-	/* Read IGC state and update the same if tuning mode is enable */
-	if (dcm_state == DTM_ENTER) {
-		current_opmode = readl_relaxed(pipe->base +
-						MDSS_MDP_REG_SSPP_SRC_OP_MODE);
-		*op |= (current_opmode & BIT(16));
-		return ret;
-	}
-
 	/*
 	 * TODO: should this function be responsible for masking multiple
 	 * pipes to be written in dual pipe case?
@@ -1387,10 +1277,10 @@ static int pp_mixer_setup(u32 disp_num,
 	struct pp_sts_type *pp_sts;
 	struct mdss_mdp_ctl *ctl;
 	char __iomem *addr;
+	dspp_num = mixer->num;
 
 	if (!mixer || !mixer->ctl)
 		return -EINVAL;
-	dspp_num = mixer->num;
 	ctl = mixer->ctl;
 
 	/* no corresponding dspp */
@@ -1492,20 +1382,19 @@ static int pp_histogram_setup(u32 *op, u32 block, struct mdss_mdp_mixer *mix)
 		goto error;
 	}
 
-	mutex_lock(&hist_info->hist_mutex);
-	spin_lock_irqsave(&hist_info->hist_lock, flag);
 	if (hist_info->col_en) {
 		*op |= op_flags;
+		mutex_lock(&hist_info->hist_mutex);
+		spin_lock_irqsave(&hist_info->hist_lock, flag);
 		col_state = hist_info->col_state;
 		if (col_state == HIST_IDLE) {
 			/* Kick off collection */
 			writel_relaxed(1, base + kick_base);
 			hist_info->col_state = HIST_START;
-			complete(&hist_info->first_kick);
 		}
+		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+		mutex_unlock(&hist_info->hist_mutex);
 	}
-	spin_unlock_irqrestore(&hist_info->hist_lock, flag);
-	mutex_unlock(&hist_info->hist_mutex);
 	ret = 0;
 error:
 	return ret;
@@ -1729,38 +1618,37 @@ dspp_exit:
 	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
 	return ret;
 }
-
+/*
 int mdss_mdp_pp_setup(struct mdss_mdp_ctl *ctl)
 {
 	int ret = 0;
 
 	if ((!ctl->mfd) || (!mdss_pp_res))
 		return -EINVAL;
 
-	/* TODO: have some sort of reader/writer lock to prevent unclocked
-	 * access while display power is toggled */
-	mutex_lock(&ctl->lock);
-	if (!ctl->power_on) {
+	 TODO: have some sort of reader/writer lock to prevent unclocked
+	 * access while display power is toggled 
+	if (!ctl->mfd->panel_power_on) {
 		ret = -EPERM;
-		goto error;
-	}
+	//	goto error;
+//	}
+	mutex_lock(&ctl->mfd->lock);
 	ret = mdss_mdp_pp_setup_locked(ctl);
+	mutex_unlock(&ctl->mfd->lock);
 error:
-	mutex_unlock(&ctl->lock);
-
-	return ret;
+	return ret; 
 }
 
+ call only when holding and mfd->lock */
 int mdss_mdp_pp_setup_locked(struct mdss_mdp_ctl *ctl)
 {
 	struct mdss_data_type *mdata = ctl->mdata;
 	int ret = 0;
 	u32 mixer_cnt;
 	u32 mixer_id[MDSS_MDP_INTF_MAX_LAYERMIXER];
 	u32 disp_num;
 	int i;
 	bool valid_mixers = true;
-	bool valid_ad_panel = true;
 	if ((!ctl->mfd) || (!mdss_pp_res))
 		return -EINVAL;
 
@@ -1781,13 +1669,7 @@ int mdss_mdp_pp_setup_locked(struct mdss_mdp_ctl *ctl)
 		if (mixer_id[i] >= mdata->nad_cfgs)
 			valid_mixers = false;
 	}
-	valid_ad_panel = (ctl->mfd->panel_info->type != DTV_PANEL) &&
-		(((mdata->mdp_rev < MDSS_MDP_HW_REV_103) &&
-			(ctl->mfd->panel_info->type == WRITEBACK_PANEL)) ||
-		(ctl->mfd->panel_info->type != WRITEBACK_PANEL));
-
-	if (valid_mixers && (mixer_cnt <= mdata->nmax_concurrent_ad_hw) &&
-		valid_ad_panel) {
+	if (valid_mixers && (mixer_cnt <= mdata->nmax_concurrent_ad_hw)) {
 		ret = mdss_mdp_ad_setup(ctl->mfd);
 		if (ret < 0)
 			pr_warn("ad_setup(disp%d) returns %d", disp_num, ret);
@@ -1819,7 +1701,7 @@ exit:
  */
 int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
 {
-	u32 flags = 0, disp_num, bl, ret = 0;
+	u32 flags = 0, disp_num, bl;
 	struct pp_sts_type pp_sts;
 	struct mdss_ad_info *ad;
 	struct mdss_data_type *mdata = ctl->mdata;
@@ -1830,9 +1712,7 @@ int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
 	disp_num = ctl->mfd->index;
 
 	if (dspp_num < mdata->nad_cfgs) {
-		ret = mdss_mdp_get_ad(ctl->mfd, &ad);
-		if (ret)
-			return ret;
+		ad = &mdata->ad_cfgs[dspp_num];
 
 		if (PP_AD_STATE_CFG & ad->state)
 			pp_ad_cfg_write(&mdata->ad_off[dspp_num], ad);
@@ -1845,13 +1725,8 @@ int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
 			if (ad->state & PP_AD_STATE_BL_LIN) {
 				bl = ad->bl_lin[bl >> ad->bl_bright_shift];
 				bl = bl << ad->bl_bright_shift;
-				ret = pp_ad_attenuate_bl(bl, &bl, ad->mfd);
-				if (ret)
-					pr_err("Failed to attenuate BL\n");
 			}
-			linear_map(bl, &ad->bl_data,
-				ad->bl_mfd->panel_info->bl_max,
-				MDSS_MDP_AD_BL_SCALE);
+			ad->bl_data = bl;
 			pp_ad_input_write(&mdata->ad_off[dspp_num], ad);
 		}
 		if ((PP_AD_STATE_VSYNC & ad->state) && ad->calc_itr)
@@ -1917,6 +1792,9 @@ int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
 				MDP_PP_OPS_WRITE;
 	}
 
+	if (!disp_num)
+		pp_sts.pgc_sts |= PP_STS_ENABLE;
+
 	if (pp_sts.pgc_sts & PP_STS_ENABLE) {
 		flags |= PP_FLAGS_DIRTY_PGC;
 		if (!(mdss_pp_res->pgc_disp_cfg[disp_num].flags
@@ -1928,6 +1806,60 @@ int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
 	mdss_pp_res->pp_disp_flags[disp_num] |= flags;
 	return 0;
 }
+
+void mdss_mdp_pp_kcal_enable(bool enable)
+{
+	u32 disp_num = 0, copyback = 0;
+	struct mdp_pgc_lut_data *pgc_config;
+
+	pgc_config = &mdss_pp_res->pgc_disp_cfg[disp_num];
+	pgc_config->block = MDP_LOGICAL_BLOCK_DISP_0;
+
+	if (enable) {
+		pgc_config->flags = MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE;
+		pgc_config->r_data = &mdss_pp_res->gc_lut_r[disp_num][0];
+		pgc_config->g_data = &mdss_pp_res->gc_lut_g[disp_num][0];
+		pgc_config->b_data = &mdss_pp_res->gc_lut_b[disp_num][0];
+	} else
+		pgc_config->flags = MDP_PP_OPS_WRITE | MDP_PP_OPS_DISABLE;
+
+	mdss_mdp_argc_config(pgc_config, &copyback);
+}
+
+void mdss_mdp_pp_kcal_update(int kr, int kg, int kb)
+{
+	int i;
+	u32 disp_num = 0, copyback = 0;
+	struct mdp_pgc_lut_data *pgc_config;
+
+	pgc_config = &mdss_pp_res->pgc_disp_cfg[disp_num];
+
+	for (i = 0; i < GC_LUT_SEGMENTS; i++) {
+		pgc_config->r_data[i].slope = kr;
+		pgc_config->g_data[i].slope = kg;
+		pgc_config->b_data[i].slope = kb;
+	}
+
+	mdss_mdp_argc_config(pgc_config, &copyback);
+}
+
+void mdss_mdp_pp_kcal_pa(struct kcal_lut_data *lut_data)
+{
+	u32 copyback = 0;
+	struct mdp_pa_cfg_data pa_config;
+
+	memset(&pa_config, 0, sizeof(struct mdp_pa_cfg_data));
+
+	pa_config.block = MDP_LOGICAL_BLOCK_DISP_0;
+	pa_config.pa_data.flags = MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE;
+	pa_config.pa_data.sat_adj = lut_data->sat;
+	pa_config.pa_data.hue_adj = lut_data->hue;
+	pa_config.pa_data.val_adj = lut_data->val;
+	pa_config.pa_data.cont_adj = lut_data->cont;
+
+	mdss_mdp_pa_config(&pa_config, &copyback);
+}
+
 int mdss_mdp_pp_init(struct device *dev)
 {
 	int i, ret = 0;
@@ -1948,20 +1880,14 @@ int mdss_mdp_pp_init(struct device *dev)
 					&mdss_pp_res->dspp_hist[i].hist_mutex);
 				spin_lock_init(
 					&mdss_pp_res->dspp_hist[i].hist_lock);
-				init_completion(
-					&mdss_pp_res->dspp_hist[i].comp);
-				init_completion(
-					&mdss_pp_res->dspp_hist[i].first_kick);
 			}
 		}
 	}
-	if (mdata && mdata->vig_pipes) {
+	if (mdata) {
 		vig = mdata->vig_pipes;
 		for (i = 0; i < mdata->nvig_pipes; i++) {
 			mutex_init(&vig[i].pp_res.hist.hist_mutex);
 			spin_lock_init(&vig[i].pp_res.hist.hist_lock);
-			init_completion(&vig[i].pp_res.hist.comp);
-			init_completion(&vig[i].pp_res.hist.first_kick);
 		}
 		if (!mdata->pp_bus_hdl) {
 			pp_bus_pdata = &mdp_pp_bus_scale_table;
@@ -1981,11 +1907,9 @@ int mdss_mdp_pp_init(struct device *dev)
 		}
 
 	}
-
 	mutex_unlock(&mdss_pp_mutex);
 	return ret;
 }
-
 void mdss_mdp_pp_term(struct device *dev)
 {
 	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
@@ -2411,19 +2335,6 @@ pcc_config_exit:
 	return ret;
 }
 
-static void pp_read_igc_lut_cached(struct mdp_igc_lut_data *cfg)
-{
-	int i;
-	u32 disp_num;
-
-	disp_num = cfg->block - MDP_LOGICAL_BLOCK_DISP_0;
-	for (i = 0; i < IGC_LUT_ENTRIES; i++) {
-		cfg->c0_c1_data[i] =
-			mdss_pp_res->igc_disp_cfg[disp_num].c0_c1_data[i];
-		cfg->c2_data[i] =
-			mdss_pp_res->igc_disp_cfg[disp_num].c2_data[i];
-	}
-}
 #ifdef CONFIG_MACH_LGE
 int mdss_dsi_panel_invert(u32 enable)
 {
@@ -2589,17 +2500,14 @@ int mdss_mdp_igc_lut_config(struct mdp_igc_lut_data *config,
 			&mdss_pp_res->igc_lut_c0c1[disp_num][0];
 		local_cfg.c2_data =
 			&mdss_pp_res->igc_lut_c2[disp_num][0];
-		if (mdata->has_no_lut_read)
-			pp_read_igc_lut_cached(&local_cfg);
-		else
-			pp_read_igc_lut(&local_cfg, igc_addr, dspp_num);
-		if (copy_to_user(config->c0_c1_data, local_cfg.c0_c1_data,
+		pp_read_igc_lut(&local_cfg, igc_addr, dspp_num);
+		if (copy_to_user(config->c0_c1_data, local_cfg.c2_data,
 			config->len * sizeof(u32))) {
 			ret = -EFAULT;
 			mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
 			goto igc_config_exit;
 		}
-		if (copy_to_user(config->c2_data, local_cfg.c2_data,
+		if (copy_to_user(config->c2_data, local_cfg.c0_c1_data,
 			config->len * sizeof(u32))) {
 			ret = -EFAULT;
 			mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
@@ -2739,41 +2647,6 @@ static int pp_read_argc_lut(struct mdp_pgc_lut_data *config, char __iomem *addr)
 	return ret;
 }
 
-static int pp_read_argc_lut_cached(struct mdp_pgc_lut_data *config)
-{
-	int i;
-	u32 disp_num;
-	struct mdp_pgc_lut_data *pgc_ptr;
-
-	disp_num = PP_BLOCK(config->block) - MDP_LOGICAL_BLOCK_DISP_0;
-	switch (PP_LOCAT(config->block)) {
-	case MDSS_PP_LM_CFG:
-		pgc_ptr = &mdss_pp_res->argc_disp_cfg[disp_num];
-		break;
-	case MDSS_PP_DSPP_CFG:
-		pgc_ptr = &mdss_pp_res->pgc_disp_cfg[disp_num];
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	for (i = 0; i < GC_LUT_SEGMENTS; i++) {
-		config->r_data[i].x_start = pgc_ptr->r_data[i].x_start;
-		config->r_data[i].slope   = pgc_ptr->r_data[i].slope;
-		config->r_data[i].offset  = pgc_ptr->r_data[i].offset;
-
-		config->g_data[i].x_start = pgc_ptr->g_data[i].x_start;
-		config->g_data[i].slope   = pgc_ptr->g_data[i].slope;
-		config->g_data[i].offset  = pgc_ptr->g_data[i].offset;
-
-		config->b_data[i].x_start = pgc_ptr->b_data[i].x_start;
-		config->b_data[i].slope   = pgc_ptr->b_data[i].slope;
-		config->b_data[i].offset  = pgc_ptr->b_data[i].offset;
-	}
-
-	return 0;
-}
-
 /* Note: Assumes that its inputs have been checked by calling function */
 static void pp_update_hist_lut(char __iomem *addr,
 				struct mdp_hist_lut_data *cfg)
@@ -2793,14 +2666,7 @@ int mdss_mdp_argc_config(struct mdp_pgc_lut_data *config,
 {
 	int ret = 0;
 	u32 disp_num, dspp_num = 0;
-	struct mdp_pgc_lut_data local_cfg;
-	struct mdp_pgc_lut_data *pgc_ptr;
-	u32 tbl_size, r_size, g_size, b_size;
 	char __iomem *argc_addr = 0;
-	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
-
-	if (mdata == NULL)
-		return -EPERM;
 
 	if ((PP_BLOCK(config->block) < MDP_LOGICAL_BLOCK_DISP_0) ||
 		(PP_BLOCK(config->block) >= MDP_BLOCK_MAX))
@@ -2812,124 +2678,56 @@ int mdss_mdp_argc_config(struct mdp_pgc_lut_data *config,
 	}
 
 	mutex_lock(&mdss_pp_mutex);
-
 	disp_num = PP_BLOCK(config->block) - MDP_LOGICAL_BLOCK_DISP_0;
-	ret = pp_get_dspp_num(disp_num, &dspp_num);
-	if (ret) {
-		pr_err("%s, no dspp connects to disp %d", __func__, disp_num);
-		goto argc_config_exit;
-	}
-
-	switch (PP_LOCAT(config->block)) {
-	case MDSS_PP_LM_CFG:
-		argc_addr = mdss_mdp_get_mixer_addr_off(dspp_num) +
-			MDSS_MDP_REG_LM_GC_LUT_BASE;
-		pgc_ptr = &mdss_pp_res->argc_disp_cfg[disp_num];
-		if (config->flags & MDP_PP_OPS_WRITE)
-			mdss_pp_res->pp_disp_flags[disp_num] |=
-				PP_FLAGS_DIRTY_ARGC;
-		break;
-	case MDSS_PP_DSPP_CFG:
-		argc_addr = mdss_mdp_get_dspp_addr_off(dspp_num) +
-					MDSS_MDP_REG_DSPP_GC_BASE;
-		pgc_ptr = &mdss_pp_res->pgc_disp_cfg[disp_num];
-		if (config->flags & MDP_PP_OPS_WRITE)
-			mdss_pp_res->pp_disp_flags[disp_num] |=
-				PP_FLAGS_DIRTY_PGC;
-		break;
-	default:
-		goto argc_config_exit;
-		break;
-	}
-
-	tbl_size = GC_LUT_SEGMENTS * sizeof(struct mdp_ar_gc_lut_data);
 
 	if (config->flags & MDP_PP_OPS_READ) {
-		mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON, false);
-		local_cfg = *config;
-		local_cfg.r_data =
-			&mdss_pp_res->gc_lut_r[disp_num][0];
-		local_cfg.g_data =
-			&mdss_pp_res->gc_lut_g[disp_num][0];
-		local_cfg.b_data =
-			&mdss_pp_res->gc_lut_b[disp_num][0];
-		if (mdata->has_no_lut_read)
-			pp_read_argc_lut_cached(&local_cfg);
-		else
-			pp_read_argc_lut(&local_cfg, argc_addr);
-
-		if ((tbl_size != local_cfg.num_r_stages *
-			sizeof(struct mdp_ar_gc_lut_data)) ||
-			(copy_to_user(config->r_data, local_cfg.r_data,
-				tbl_size))) {
-			mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
-			ret = -EFAULT;
-			goto argc_config_exit;
-		}
-		if ((tbl_size != local_cfg.num_g_stages *
-			sizeof(struct mdp_ar_gc_lut_data)) ||
-			(copy_to_user(config->g_data, local_cfg.g_data,
-				tbl_size))) {
-			mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
-			ret = -EFAULT;
+		ret = pp_get_dspp_num(disp_num, &dspp_num);
+		if (ret) {
+			pr_err("%s, no dspp connects to disp %d",
+				__func__, disp_num);
 			goto argc_config_exit;
 		}
-		if ((tbl_size != local_cfg.num_b_stages *
-			sizeof(struct mdp_ar_gc_lut_data)) ||
-			(copy_to_user(config->b_data, local_cfg.b_data,
-				tbl_size))) {
+
+		mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON, false);
+
+		switch (PP_LOCAT(config->block)) {
+		case MDSS_PP_LM_CFG:
+			argc_addr = mdss_mdp_get_mixer_addr_off(dspp_num) +
+				MDSS_MDP_REG_LM_GC_LUT_BASE;
+			break;
+		case MDSS_PP_DSPP_CFG:
+			argc_addr = mdss_mdp_get_dspp_addr_off(dspp_num) +
+				MDSS_MDP_REG_DSPP_GC_BASE;
+			break;
+		default:
 			mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
-			ret = -EFAULT;
 			goto argc_config_exit;
+			break;
 		}
+
+		pp_read_argc_lut(config, argc_addr);
 		*copyback = 1;
 		mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
 	} else {
-		r_size = config->num_r_stages *
-			sizeof(struct mdp_ar_gc_lut_data);
-		g_size = config->num_g_stages *
-			sizeof(struct mdp_ar_gc_lut_data);
-		b_size = config->num_b_stages *
-			sizeof(struct mdp_ar_gc_lut_data);
-		if (r_size > tbl_size ||
-			g_size > tbl_size ||
-			b_size > tbl_size ||
-			r_size == 0 ||
-			g_size == 0 ||
-			b_size == 0) {
-			ret = -EINVAL;
-			pr_warn("%s, number of rgb stages invalid",
-				__func__);
-			goto argc_config_exit;
-		}
-		if (copy_from_user(&mdss_pp_res->gc_lut_r[disp_num][0],
-			config->r_data, r_size)) {
-			ret = -EFAULT;
-			goto argc_config_exit;
-		}
-		if (copy_from_user(&mdss_pp_res->gc_lut_g[disp_num][0],
-			config->g_data, g_size)) {
-			ret = -EFAULT;
-			goto argc_config_exit;
-		}
-		if (copy_from_user(&mdss_pp_res->gc_lut_b[disp_num][0],
-			config->b_data, b_size)) {
-			ret = -EFAULT;
-			goto argc_config_exit;
+		switch (PP_LOCAT(config->block)) {
+		case MDSS_PP_LM_CFG:
+			mdss_pp_res->argc_disp_cfg[disp_num] = *config;
+			mdss_pp_res->pp_disp_flags[disp_num] |= PP_FLAGS_DIRTY_ARGC;
+			break;
+		case MDSS_PP_DSPP_CFG:
+			mdss_pp_res->pgc_disp_cfg[disp_num] = *config;
+			mdss_pp_res->pp_disp_flags[disp_num] |= PP_FLAGS_DIRTY_PGC;
+			break;
+		default:
+			break;
 		}
-
-		*pgc_ptr = *config;
-		pgc_ptr->r_data =
-			&mdss_pp_res->gc_lut_r[disp_num][0];
-		pgc_ptr->g_data =
-			&mdss_pp_res->gc_lut_g[disp_num][0];
-		pgc_ptr->b_data =
-			&mdss_pp_res->gc_lut_b[disp_num][0];
 	}
+
 argc_config_exit:
 	mutex_unlock(&mdss_pp_mutex);
 	return ret;
 }
+
 int mdss_mdp_hist_lut_config(struct mdp_hist_lut_data *config,
 					u32 *copyback)
 {
@@ -3203,24 +3001,22 @@ static int pp_histogram_enable(struct pp_hist_col_info *hist_info,
 
 	mutex_lock(&hist_info->hist_mutex);
 	/* check if it is idle */
-	spin_lock_irqsave(&hist_info->hist_lock, flag);
 	if (hist_info->col_en) {
-		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
 		pr_info("%s Hist collection has already been enabled %d",
 			__func__, (u32) ctl_base);
 		ret = -EINVAL;
 		goto exit;
 	}
-	hist_info->read_request = 0;
-	hist_info->col_state = HIST_RESET;
-	hist_info->col_en = true;
-	spin_unlock_irqrestore(&hist_info->hist_lock, flag);
 	hist_info->frame_cnt = req->frame_cnt;
-	INIT_COMPLETION(hist_info->comp);
-	INIT_COMPLETION(hist_info->first_kick);
+	init_completion(&hist_info->comp);
 	hist_info->hist_cnt_read = 0;
 	hist_info->hist_cnt_sent = 0;
 	hist_info->hist_cnt_time = 0;
+	spin_lock_irqsave(&hist_info->hist_lock, flag);
+	hist_info->read_request = 0;
+	hist_info->col_state = HIST_RESET;
+	hist_info->col_en = true;
+	spin_unlock_irqrestore(&hist_info->hist_lock, flag);
 	mdss_mdp_hist_intr_req(&mdata->hist_intr, 3 << shift_bit, true);
 	writel_relaxed(req->frame_cnt, ctl_base + 8);
 	/* Kick out reset start */
@@ -3331,19 +3127,17 @@ static int pp_histogram_disable(struct pp_hist_col_info *hist_info,
 	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
 
 	mutex_lock(&hist_info->hist_mutex);
-	spin_lock_irqsave(&hist_info->hist_lock, flag);
 	if (hist_info->col_en == false) {
-		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
 		pr_debug("Histogram already disabled (%d)", (u32) ctl_base);
 		ret = -EINVAL;
 		goto exit;
 	}
+	complete_all(&hist_info->comp);
+	spin_lock_irqsave(&hist_info->hist_lock, flag);
 	hist_info->col_en = false;
 	hist_info->col_state = HIST_UNKNOWN;
 	spin_unlock_irqrestore(&hist_info->hist_lock, flag);
 	mdss_mdp_hist_intr_req(&mdata->hist_intr, done_bit, false);
-	complete_all(&hist_info->comp);
-	complete_all(&hist_info->first_kick);
 	writel_relaxed(BIT(1), ctl_base);/* cancel */
 	ret = 0;
 exit:
@@ -3576,21 +3370,20 @@ static int pp_hist_collect(struct mdp_histogram_data *hist,
 				struct pp_hist_col_info *hist_info,
 				char __iomem *ctl_base, u32 expect_sum)
 {
-	int kick_ret, wait_ret, ret = 0;
+	int wait_ret, ret = 0;
 	u32 timeout, sum;
 	char __iomem *v_base;
 	unsigned long flag;
 	struct mdss_pipe_pp_res *res;
 	struct mdss_mdp_pipe *pipe;
 
 	mutex_lock(&hist_info->hist_mutex);
-	spin_lock_irqsave(&hist_info->hist_lock, flag);
 	if ((hist_info->col_en == 0) ||
 			(hist_info->col_state == HIST_UNKNOWN)) {
-		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
 		ret = -EINVAL;
 		goto hist_collect_exit;
 	}
+	spin_lock_irqsave(&hist_info->hist_lock, flag);
 	/* wait for hist done if cache has no data */
 	if (hist_info->col_state != HIST_READY) {
 		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
@@ -3602,27 +3395,13 @@ static int pp_hist_collect(struct mdp_histogram_data *hist,
 			pipe = container_of(res, struct mdss_mdp_pipe, pp_res);
 			pipe->params_changed++;
 		}
-		kick_ret = wait_for_completion_killable_timeout(
-				&(hist_info->first_kick), timeout /
-					HIST_KICKOFF_WAIT_FRACTION);
-		if (kick_ret != 0)
-			wait_ret = wait_for_completion_killable_timeout(
+		wait_ret = wait_for_completion_killable_timeout(
 				&(hist_info->comp), timeout);
 
 		mutex_lock(&hist_info->hist_mutex);
-		spin_lock_irqsave(&hist_info->hist_lock, flag);
-		if (kick_ret == 0) {
-			ret = -ENODATA;
-			pr_debug("histogram kickoff not done yet");
-			spin_unlock_irqrestore(&hist_info->hist_lock, flag);
-			goto hist_collect_exit;
-		} else if (kick_ret < 0) {
-			ret = -EINTR;
-			pr_debug("histogram first kickoff interrupted");
-			spin_unlock_irqrestore(&hist_info->hist_lock, flag);
-			goto hist_collect_exit;
-		} else if (wait_ret == 0) {
+		if (wait_ret == 0) {
 			ret = -ETIMEDOUT;
+			spin_lock_irqsave(&hist_info->hist_lock, flag);
 			pr_debug("bin collection timedout, state %d",
 					hist_info->col_state);
 			/*
@@ -3637,36 +3416,37 @@ static int pp_hist_collect(struct mdp_histogram_data *hist,
 			 */
 			hist_info->hist_cnt_time++;
 			hist_info->col_state = HIST_READY;
-		} else if (wait_ret < 0) {
 			spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+		} else if (wait_ret < 0) {
 			ret = -EINTR;
 			pr_debug("%s: bin collection interrupted",
 					__func__);
 			goto hist_collect_exit;
 		}
-		if (hist_info->col_state != HIST_READY &&
-				hist_info->col_state != HIST_UNKNOWN) {
+		if (hist_info->col_state != HIST_READY) {
 			ret = -ENODATA;
+			spin_lock_irqsave(&hist_info->hist_lock, flag);
 			hist_info->col_state = HIST_READY;
+			spin_unlock_irqrestore(&hist_info->hist_lock, flag);
 			pr_debug("%s: state is not ready: %d",
 					__func__, hist_info->col_state);
 		}
+	} else {
+		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
 	}
+	spin_lock_irqsave(&hist_info->hist_lock, flag);
 	if (hist_info->col_state == HIST_READY) {
-		hist_info->col_state = HIST_IDLE;
 		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
 		v_base = ctl_base + 0x1C;
 		mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON, false);
 		sum = pp_hist_read(v_base, hist_info);
 		mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
-		if (expect_sum && sum != expect_sum) {
-			pr_debug("hist error: bin sum incorrect! (%d/%d)\n",
-				sum, expect_sum);
+		spin_lock_irqsave(&hist_info->hist_lock, flag);
+		if (expect_sum && sum != expect_sum)
 			ret = -ENODATA;
-		}
-	} else {
-		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+		hist_info->col_state = HIST_IDLE;
 	}
+	spin_unlock_irqrestore(&hist_info->hist_lock, flag);
 hist_collect_exit:
 	mutex_unlock(&hist_info->hist_mutex);
 	return ret;
@@ -3730,9 +3510,6 @@ int mdss_mdp_hist_collect(struct mdp_histogram_data *hist)
 				temp_ret = ret;
 			ret = pp_hist_collect(hist, hists[i], ctl_base,
 								exp_sum);
-			if (ret)
-				pr_debug("hist error: dspp[%d] collect %d\n",
-					dspp_num, ret);
 		}
 		for (i = 0; i < hist_cnt; i++) {
 			/* reset read requests and re-intialize completions */
@@ -3830,10 +3607,6 @@ int mdss_mdp_hist_collect(struct mdp_histogram_data *hist)
 				temp_ret = ret;
 			ret = pp_hist_collect(hist, hist_info, ctl_base,
 								exp_sum);
-			if (ret)
-				pr_debug("hist error: pipe[%d] collect: %d\n",
-					pipe->num, ret);
-
 			mdss_mdp_pipe_unmap(pipe);
 		}
 		for (i = pipe_num; i < MDSS_PP_ARG_NUM; i++) {
@@ -3949,17 +3722,19 @@ void mdss_mdp_hist_intr_done(u32 isr)
 			hist_info = &pipe->pp_res.hist;
 		}
 		/* Histogram Done Interrupt */
-		if (hist_info && (isr_blk & 0x1) && (hist_info->col_en)) {
+		if (hist_info && (isr_blk & 0x1) &&
+			(hist_info->col_en)) {
 			spin_lock(&hist_info->hist_lock);
 			hist_info->col_state = HIST_READY;
 			spin_unlock(&hist_info->hist_lock);
 			if (hist_info->read_request == 1) {
 				complete(&hist_info->comp);
 				hist_info->read_request++;
 			}
 		}
 		/* Histogram Reset Done Interrupt */
-		if (hist_info && (isr_blk & 0x2) && (hist_info->col_en)) {
+		if ((isr_blk & 0x2) &&
+			(hist_info->col_en)) {
 				spin_lock(&hist_info->hist_lock);
 				hist_info->col_state = HIST_IDLE;
 				spin_unlock(&hist_info->hist_lock);
@@ -4050,11 +3825,6 @@ static int mdss_ad_init_checks(struct msm_fb_data_type *mfd)
 		return -ENODEV;
 	}
 
-	if (ad_mfd->panel_info->type == DTV_PANEL) {
-		pr_debug("AD not supported on external display\n");
-		return ret;
-	}
-
 	mixer_num = mdss_mdp_get_ctl_mixers(ad_mfd->index, mixer_id);
 	if (!mixer_num) {
 		pr_debug("no mixers connected, %d", mixer_num);
@@ -4129,7 +3899,7 @@ int mdss_mdp_ad_config(struct msm_fb_data_type *mfd,
 {
 	struct mdss_ad_info *ad;
 	struct msm_fb_data_type *bl_mfd;
-	int lin_ret = -1, inv_ret = -1, att_ret = -1, ret = 0;
+	int lin_ret = -1, inv_ret = -1, ret = 0;
 	u32 ratio_temp, shift = 0, last_ops;
 
 	ret = mdss_mdp_get_ad(mfd, &ad);
@@ -4178,28 +3948,15 @@ int mdss_mdp_ad_config(struct msm_fb_data_type *mfd,
 		} else
 			ad->state |= PP_AD_STATE_BL_LIN;
 
-		if ((init_cfg->params.init.bl_att_len == AD_BL_ATT_LUT_LEN) &&
-			(init_cfg->params.init.bl_att_lut)) {
-			att_ret = copy_from_user(&ad->bl_att_lut,
-				init_cfg->params.init.bl_att_lut,
-				init_cfg->params.init.bl_att_len *
-				sizeof(uint32_t));
-			if (att_ret)
-				ret = -ENOMEM;
-		} else {
-			ret = -EINVAL;
-		}
-		if (ret) {
-			ad->state &= ~PP_AD_STATE_BL_LIN;
-			goto ad_config_exit;
-		} else
-			ad->state |= PP_AD_STATE_BL_LIN;
-
 		ad->sts |= PP_AD_STS_DIRTY_INIT;
 	} else if (init_cfg->ops & MDP_PP_AD_CFG) {
 		memcpy(&ad->cfg, &init_cfg->params.cfg,
 				sizeof(struct mdss_ad_cfg));
-		ad->cfg.backlight_scale = MDSS_MDP_AD_BL_SCALE;
+		/*
+		 * TODO: specify panel independent range of input from cfg,
+		 * scale input backlight_scale to panel bl_max's range
+		 */
+		ad->cfg.backlight_scale = bl_mfd->panel_info->bl_max;
 		ad->sts |= PP_AD_STS_DIRTY_CFG;
 	}
 
@@ -4322,7 +4079,7 @@ error:
 	if (!ret) {
 		if (wait) {
 			mutex_lock(&ad->lock);
-			INIT_COMPLETION(ad->comp);
+			init_completion(&ad->comp);
 			mutex_unlock(&ad->lock);
 		}
 		if (wait) {
@@ -4461,7 +4218,10 @@ static void pp_ad_init_write(struct mdss_mdp_ad *ad_hw, struct mdss_ad_info *ad,
 			frame_end = 0xFFFF;
 			procs_start = 0x0;
 			procs_end = 0xFFFF;
-			tile_ctrl = 0x0;
+			if (split_mode)
+				tile_ctrl = 0x0;
+			else
+				tile_ctrl = 0x1;
 		}
 
 
@@ -4614,13 +4374,8 @@ static int mdss_mdp_ad_setup(struct msm_fb_data_type *mfd)
 			if (ad->state & PP_AD_STATE_BL_LIN) {
 				bl = ad->bl_lin[bl >> ad->bl_bright_shift];
 				bl = bl << ad->bl_bright_shift;
-				ret = pp_ad_attenuate_bl(bl, &bl, ad->mfd);
-				if (ret)
-					pr_err("Failed to attenuate BL\n");
 			}
-			linear_map(bl, &ad->bl_data,
-				ad->bl_mfd->panel_info->bl_max,
-				MDSS_MDP_AD_BL_SCALE);
+			ad->bl_data = bl;
 		}
 		mutex_unlock(&bl_mfd->bl_lock);
 		ad->reg_sts |= PP_AD_STS_DIRTY_DATA;
@@ -4670,7 +4425,6 @@ static int mdss_mdp_ad_setup(struct msm_fb_data_type *mfd)
 		if (bl_mfd != mfd)
 			bl_mfd->ext_ad_ctrl = mfd->index;
 		bl_mfd->mdp.update_ad_input = pp_update_ad_input;
-		bl_mfd->mdp.ad_attenuate_bl = pp_ad_attenuate_bl;
 		bl_mfd->ext_bl_ctrl = ad->cfg.bl_ctrl_mode;
 		mutex_unlock(&bl_mfd->bl_lock);
 
@@ -4694,13 +4448,10 @@ static int mdss_mdp_ad_setup(struct msm_fb_data_type *mfd)
 								AD_BL_LIN_LEN);
 			memset(&ad->bl_lin_inv, 0, sizeof(uint32_t) *
 								AD_BL_LIN_LEN);
-			memset(&ad->bl_att_lut, 0, sizeof(uint32_t) *
-				AD_BL_ATT_LUT_LEN);
 			memset(&ad->init, 0, sizeof(struct mdss_ad_init));
 			memset(&ad->cfg, 0, sizeof(struct mdss_ad_cfg));
 			mutex_lock(&bl_mfd->bl_lock);
 			bl_mfd->mdp.update_ad_input = NULL;
-			bl_mfd->mdp.ad_attenuate_bl = NULL;
 			bl_mfd->ext_bl_ctrl = 0;
 			bl_mfd->ext_ad_ctrl = -1;
 			mutex_unlock(&bl_mfd->bl_lock);
@@ -4817,10 +4568,10 @@ static void pp_ad_calc_worker(struct work_struct *work)
 		ad->state &= ~PP_AD_STATE_VSYNC;
 		ctl->remove_vsync_handler(ctl, &ad->handle);
 	}
-	mutex_unlock(&ad->lock);
-	mutex_lock(&ctl->lock);
+/*	mutex_unlock(&ad->lock);
+	mutex_lock(&mfd->lock);
 	ctl->flush_bits |= BIT(13 + ad->num);
-	mutex_unlock(&ctl->lock);
+	mutex_unlock(&mfd->lock); */
 
 	/* Trigger update notify to wake up those waiting for display updates */
 	mdss_fb_update_notify_update(bl_mfd);
@@ -4841,62 +4592,6 @@ static void pp_ad_cfg_lut(char __iomem *addr, u32 *data)
 			addr + ((PP_AD_LUT_LEN - 1) * 2));
 }
 
-static int  pp_ad_attenuate_bl(u32 bl, u32 *bl_out,
-	struct msm_fb_data_type *mfd)
-{
-	u32 shift = 0, ratio_temp = 0;
-	u32 n, lut_interval, bl_att;
-	int ret = -1;
-	struct mdss_ad_info *ad;
-
-	if (bl < 0) {
-		pr_err("Invalid backlight input\n");
-		return ret;
-	}
-
-	ret = mdss_mdp_get_ad(mfd, &ad);
-	if (ret || !ad || !ad->bl_mfd || !ad->bl_mfd->panel_info ||
-		!ad->bl_mfd->panel_info->bl_max || !ad->bl_att_lut) {
-		pr_err("Failed to get the ad.\n");
-		return ret;
-	}
-	pr_debug("bl_in = %d\n", bl);
-	/* map panel backlight range to AD backlight range */
-	linear_map(bl, &bl, ad->bl_mfd->panel_info->bl_max,
-		MDSS_MDP_AD_BL_SCALE);
-
-	pr_debug("Before attenuation = %d\n", bl);
-	ratio_temp = MDSS_MDP_AD_BL_SCALE / (AD_BL_ATT_LUT_LEN - 1);
-	while (ratio_temp > 0) {
-		ratio_temp = ratio_temp >> 1;
-		shift++;
-	}
-	n = bl >> shift;
-	if (n >= (AD_BL_ATT_LUT_LEN - 1)) {
-		pr_err("Invalid index for BL attenuation: %d.\n", n);
-		return ret;
-	}
-	lut_interval = (MDSS_MDP_AD_BL_SCALE + 1) / (AD_BL_ATT_LUT_LEN - 1);
-	bl_att = ad->bl_att_lut[n] + (bl - lut_interval * n) *
-			(ad->bl_att_lut[n + 1] - ad->bl_att_lut[n]) /
-			lut_interval;
-	pr_debug("n = %d, bl_att = %d\n", n, bl_att);
-	if (ad->init.alpha_base)
-		*bl_out = (ad->init.alpha * bl_att +
-			(ad->init.alpha_base - ad->init.alpha) * bl) /
-			ad->init.alpha_base;
-	else
-		*bl_out = bl;
-
-	pr_debug("After attenuation = %d\n", *bl_out);
-	/* map AD backlight range back to panel backlight range */
-	linear_map(*bl_out, bl_out, MDSS_MDP_AD_BL_SCALE,
-		ad->bl_mfd->panel_info->bl_max);
-
-	pr_debug("bl_out = %d\n", *bl_out);
-	return 0;
-}
-
 int mdss_mdp_ad_addr_setup(struct mdss_data_type *mdata, u32 *ad_offsets)
 {
 	u32 i;
@@ -4932,7 +4627,6 @@ int mdss_mdp_ad_addr_setup(struct mdss_data_type *mdata, u32 *ad_offsets)
 		mdata->ad_cfgs[i].last_str = 0xFFFFFFFF;
 		mdata->ad_cfgs[i].last_bl = 0;
 		mutex_init(&mdata->ad_cfgs[i].lock);
-		init_completion(&mdata->ad_cfgs[i].comp);
 		mdata->ad_cfgs[i].handle.vsync_handler = pp_ad_vsync_handler;
 		mdata->ad_cfgs[i].handle.cmd_post_flush = true;
 		INIT_WORK(&mdata->ad_cfgs[i].calc_work, pp_ad_calc_worker);
@@ -4960,8 +4654,7 @@ static int is_valid_calib_ctrl_addr(char __iomem *ptr)
 			break;
 		}
 
-		for (stage = 0; stage < (mdss_res->nmixers_intf +
-					 mdss_res->nmixers_wb); stage++)
+		for (stage = 0; stage < mdss_res->nmixers_intf; stage++)
 			if (ptr == base + MDSS_MDP_REG_CTL_LAYER(stage)) {
 				ret = MDP_PP_OPS_READ | MDP_PP_OPS_WRITE;
 				goto End;
@@ -5052,10 +4745,7 @@ static int is_valid_calib_vig_addr(char __iomem *ptr)
 		} else if (ptr == base + MDSS_MDP_REG_SSPP_SRC_OP_MODE) {
 			ret = MDP_PP_OPS_READ | MDP_PP_OPS_WRITE;
 			break;
-		/* QSEED2 range */
-		} else if ((ptr >= base + MDSS_MDP_REG_VIG_QSEED2_SHARP) &&
-				(ptr <= base + MDSS_MDP_REG_VIG_QSEED2_SHARP +
-					MDSS_MDP_VIG_QSEED2_SHARP_SIZE)) {
+		} else if ((ptr == base + MDSS_MDP_REG_VIG_QSEED2_SHARP)) {
 			ret = MDP_PP_OPS_READ | MDP_PP_OPS_WRITE;
 			break;
 		/* PA range */
@@ -5140,8 +4830,7 @@ static int is_valid_calib_mixer_addr(char __iomem *ptr)
 	int stage = 0;
 	struct mdss_mdp_mixer *mixer;
 
-	for (counter = 0; counter < (mdss_res->nmixers_intf +
-					mdss_res->nmixers_wb); counter++) {
+	for (counter = 0; counter < mdss_res->nmixers_intf; counter++) {
 		mixer = mdss_res->mixer_intf + counter;
 		base = mixer->base;
 
@@ -5192,7 +4881,6 @@ static int is_valid_calib_addr(void *addr, u32 operation)
 	if ((unsigned int)addr % 4) {
 		ret = 0;
 	} else if (ptr == (mdss_res->mdp_base + MDSS_MDP_REG_HW_VERSION) ||
-	    ptr == (mdss_res->mdp_base + MDSS_REG_HW_VERSION) ||
 	    ptr == (mdss_res->mdp_base + MDSS_MDP_REG_DISP_INTF_SEL)) {
 		ret = MDP_PP_OPS_READ;
 	/* IGC DSPP range */
@@ -5324,3 +5012,4 @@ int mdss_mdp_calib_config_buffer(struct mdp_calib_config_buffer *cfg,
 	kfree(buff_org);
 	return ret;
 }
+
diff --git a/patches/000-addKcal-driversavoca.patch b/patches/000-addKcal-driversavoca.patch
new file mode 100644
index 0000000..a8294e3
--- /dev/null
+++ b/patches/000-addKcal-driversavoca.patch
@@ -0,0 +1,1064 @@
+From e375c30e7d46b16689ab90d96823a7168c1596c1 Mon Sep 17 00:00:00 2001
+From: mostafa-z <mostafazarghami@gmail.com>
+Date: Sun, 31 May 2015 18:17:06 +0430
+Subject: [PATCH] add:Kcal driver[savoca]
+
+---
+ drivers/video/msm/mdss/Kconfig              |   7 +++++++
+ drivers/video/msm/mdss/Makefile             |   2 ++
+ drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.c | 409 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.h |  42 ++++++++++++++++++++++++++++++++++++++++++
+ drivers/video/msm/mdss/mdss_mdp_pp.c        | 388 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+ 5 files changed, 576 insertions(+), 272 deletions(-)
+ create mode 100644 drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.c
+ create mode 100644 drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.h
+
+diff --git a/drivers/video/msm/mdss/Kconfig b/drivers/video/msm/mdss/Kconfig
+index 2af9984..3cfe6cf 100644
+--- a/drivers/video/msm/mdss/Kconfig
++++ b/drivers/video/msm/mdss/Kconfig
+@@ -39,3 +39,10 @@ config LGE_VSYNC_SKIP
+ 	bool "MDSS VSYNC Skip scheme"
+ 	---help---
+ 	This feature provides VSYNC skip scheme.
++
++config FB_MSM_MDSS_KCAL_CTRL
++	depends on FB_MSM_MDSS
++	bool "MDSS color control"
++	---help---
++	  Enable sysfs for rgb/lut control for mdss-mdp display controllers
++	  in the MDSS sub-system.
+diff --git a/drivers/video/msm/mdss/Makefile b/drivers/video/msm/mdss/Makefile
+index 5a63af7..8273ca2 100644
+--- a/drivers/video/msm/mdss/Makefile
++++ b/drivers/video/msm/mdss/Makefile
+@@ -47,3 +47,5 @@ obj-$(CONFIG_FB_MSM_QPIC_ILI_QVGA_PANEL) += qpic_panel_ili_qvga.o
+ obj-$(CONFIG_FB_MSM_MDSS) += mdss_fb.o
+ 
+ obj-$(CONFIG_FB_MSM_MDSS_DSI_CTRL_STATUS) += mdss_dsi_status.o
++
++obj-$(CONFIG_FB_MSM_MDSS_KCAL_CTRL) += mdss_mdp_kcal_ctrl.o
+diff --git a/drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.c b/drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.c
+new file mode 100644
+index 0000000..c49a9d2
+--- /dev/null
++++ b/drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.c
+@@ -0,0 +1,409 @@
++/*
++ * Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
++ * Copyright (c) 2013, LGE Inc. All rights reserved
++ * Copyright (c) 2014 savoca <adeddo27@gmail.com>
++ * Copyright (c) 2014 Paul Reioux <reioux@gmail.com>
++ *
++ * This software is licensed under the terms of the GNU General Public
++ * License version 2, as published by the Free Software Foundation, and
++ * may be copied, distributed, and modified under those terms.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ */
++
++#include <linux/kernel.h>
++#include <linux/slab.h>
++#include <linux/device.h>
++#include <linux/platform_device.h>
++#include <linux/init.h>
++#include <linux/module.h>
++
++#include "mdss_mdp.h"
++#include "mdss_mdp_kcal_ctrl.h"
++
++#ifdef CONFIG_FURNACE_BOOTMODE
++#include <mach/board_lge.h>
++#endif
++
++static void kcal_apply_values(struct kcal_lut_data *lut_data)
++{
++	/* gc_lut_* will save lut values even when disabled and
++	 * properly restore them on enable.
++	 */
++	lut_data->red = (lut_data->red < lut_data->minimum) ?
++		lut_data->minimum : lut_data->red;
++	lut_data->green = (lut_data->green < lut_data->minimum) ?
++		lut_data->minimum : lut_data->green;
++	lut_data->blue = (lut_data->blue < lut_data->minimum) ?
++		lut_data->minimum : lut_data->blue;
++
++	mdss_mdp_pp_kcal_update(lut_data->red, lut_data->green, lut_data->blue);
++}
++
++static ssize_t kcal_store(struct device *dev, struct device_attribute *attr,
++						const char *buf, size_t count)
++{
++	int kcal_r, kcal_g, kcal_b;
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	if (count > 12)
++		return -EINVAL;
++
++	sscanf(buf, "%d %d %d", &kcal_r, &kcal_g, &kcal_b);
++
++	if (kcal_r < 0 || kcal_r > 256)
++		return -EINVAL;
++
++	if (kcal_g < 0 || kcal_g > 256)
++		return -EINVAL;
++
++	if (kcal_b < 0 || kcal_b > 256)
++		return -EINVAL;
++
++	lut_data->red = kcal_r;
++	lut_data->green = kcal_g;
++	lut_data->blue = kcal_b;
++
++	kcal_apply_values(lut_data);
++
++	return count;
++}
++
++static ssize_t kcal_show(struct device *dev, struct device_attribute *attr,
++								char *buf)
++{
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	return sprintf(buf, "%d %d %d\n", lut_data->red, lut_data->green,
++		lut_data->blue);
++}
++
++static ssize_t kcal_min_store(struct device *dev,
++		struct device_attribute *attr, const char *buf, size_t count)
++{
++	int kcal_min;
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	if (count > 4)
++		return -EINVAL;
++
++	sscanf(buf, "%d", &kcal_min);
++
++	if (kcal_min < 0 || kcal_min > 256)
++		return -EINVAL;
++
++	lut_data->minimum = kcal_min;
++
++	kcal_apply_values(lut_data);
++
++	return count;
++}
++
++static ssize_t kcal_min_show(struct device *dev,
++		struct device_attribute *attr, char *buf)
++{
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	return sprintf(buf, "%d\n", lut_data->minimum);
++}
++
++static ssize_t kcal_enable_store(struct device *dev,
++		struct device_attribute *attr, const char *buf, size_t count)
++{
++	int kcal_enable;
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	if (count != 2)
++		return -EINVAL;
++
++	sscanf(buf, "%d", &kcal_enable);
++
++	if (kcal_enable != 0 && kcal_enable != 1)
++		return -EINVAL;
++
++	if (lut_data->enable == kcal_enable)
++		return -EINVAL;
++
++	lut_data->enable = kcal_enable;
++
++	mdss_mdp_pp_kcal_enable(lut_data->enable ? true : false);
++
++	return count;
++}
++
++static ssize_t kcal_enable_show(struct device *dev,
++		struct device_attribute *attr, char *buf)
++{
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	return sprintf(buf, "%d\n", lut_data->enable);
++}
++
++static ssize_t kcal_invert_store(struct device *dev,
++		struct device_attribute *attr, const char *buf, size_t count)
++{
++	int kcal_invert;
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	if (count != 2)
++		return -EINVAL;
++
++	sscanf(buf, "%d", &kcal_invert);
++
++	if (kcal_invert != 0 && kcal_invert != 1)
++		return -EINVAL;
++
++	if (lut_data->invert == kcal_invert)
++		return -EINVAL;
++
++	lut_data->invert = kcal_invert;
++
++	mdss_dsi_panel_invert(lut_data->invert);
++
++	return count;
++}
++
++static ssize_t kcal_invert_show(struct device *dev,
++		struct device_attribute *attr, char *buf)
++{
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	return sprintf(buf, "%d\n", lut_data->invert);
++}
++
++static ssize_t kcal_sat_store(struct device *dev,
++		struct device_attribute *attr, const char *buf, size_t count)
++{
++	int kcal_sat;
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	if (count != 4)
++		return -EINVAL;
++
++	sscanf(buf, "%d", &kcal_sat);
++
++	if ((kcal_sat < 224 || kcal_sat > 383) && kcal_sat != 128)
++		return -EINVAL;
++
++	lut_data->sat = kcal_sat;
++
++	mdss_mdp_pp_kcal_pa(lut_data);
++
++	return count;
++}
++
++static ssize_t kcal_sat_show(struct device *dev,
++		struct device_attribute *attr, char *buf)
++{
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	return sprintf(buf, "%d\n", lut_data->sat);
++}
++
++static ssize_t kcal_hue_store(struct device *dev,
++		struct device_attribute *attr, const char *buf, size_t count)
++{
++	int kcal_hue;
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	if (count > 5)
++		return -EINVAL;
++
++	sscanf(buf, "%d", &kcal_hue);
++
++	if (kcal_hue < 0 || kcal_hue > 1536)
++		return -EINVAL;
++
++	lut_data->hue = kcal_hue;
++
++	mdss_mdp_pp_kcal_pa(lut_data);
++
++	return count;
++}
++
++static ssize_t kcal_hue_show(struct device *dev,
++		struct device_attribute *attr, char *buf)
++{
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	return sprintf(buf, "%d\n", lut_data->hue);
++}
++
++static ssize_t kcal_val_store(struct device *dev,
++		struct device_attribute *attr, const char *buf, size_t count)
++{
++	int kcal_val;
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	if (count != 4)
++		return -EINVAL;
++
++	sscanf(buf, "%d", &kcal_val);
++
++	if (kcal_val < 128 || kcal_val > 383)
++		return -EINVAL;
++
++	lut_data->val = kcal_val;
++
++	mdss_mdp_pp_kcal_pa(lut_data);
++
++	return count;
++}
++
++static ssize_t kcal_val_show(struct device *dev,
++		struct device_attribute *attr, char *buf)
++{
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	return sprintf(buf, "%d\n", lut_data->val);
++}
++
++static ssize_t kcal_cont_store(struct device *dev,
++		struct device_attribute *attr, const char *buf, size_t count)
++{
++	int kcal_cont;
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	if (count != 4)
++		return -EINVAL;
++
++	sscanf(buf, "%d", &kcal_cont);
++
++	if (kcal_cont < 128 || kcal_cont > 383)
++		return -EINVAL;
++
++	lut_data->cont = kcal_cont;
++
++	mdss_mdp_pp_kcal_pa(lut_data);
++
++	return count;
++}
++
++static ssize_t kcal_cont_show(struct device *dev,
++		struct device_attribute *attr, char *buf)
++{
++	struct kcal_lut_data *lut_data = dev_get_drvdata(dev);
++
++	return sprintf(buf, "%d\n", lut_data->cont);
++}
++
++static DEVICE_ATTR(kcal, 0644, kcal_show, kcal_store);
++static DEVICE_ATTR(kcal_min, 0644, kcal_min_show, kcal_min_store);
++static DEVICE_ATTR(kcal_enable, 0644, kcal_enable_show, kcal_enable_store);
++static DEVICE_ATTR(kcal_invert, 0644, kcal_invert_show, kcal_invert_store);
++static DEVICE_ATTR(kcal_sat, 0644, kcal_sat_show, kcal_sat_store);
++static DEVICE_ATTR(kcal_hue, 0644, kcal_hue_show, kcal_hue_store);
++static DEVICE_ATTR(kcal_val, 0644, kcal_val_show, kcal_val_store);
++static DEVICE_ATTR(kcal_cont, 0644, kcal_cont_show, kcal_cont_store);
++
++static int __devinit kcal_ctrl_probe(struct platform_device *pdev)
++{
++	int ret;
++	struct kcal_lut_data *lut_data;
++
++	lut_data = kzalloc(sizeof(*lut_data), GFP_KERNEL);
++	if (!lut_data) {
++		pr_err("%s: failed to allocate memory for lut_data\n",
++			__func__);
++		return -ENOMEM;
++	}
++
++	mdss_mdp_pp_kcal_enable(true);
++
++#ifdef CONFIG_FURNACE_BOOTMODE
++	if (lge_get_android_dlcomplete() == 0) {
++		mdss_mdp_pp_kcal_update(NUM_QLUT, NUM_QLUT, NUM_QLUT);
++		lut_data->red = lut_data->green = lut_data->blue = NUM_QLUT;
++	} else {
++		mdss_mdp_pp_kcal_update(232, 226, 242);
++		lut_data->red = 232;
++		lut_data->green = 226;
++		lut_data->blue = 242;
++	}
++#else
++	mdss_mdp_pp_kcal_update(NUM_QLUT, NUM_QLUT, NUM_QLUT);
++	lut_data->red = lut_data->green = lut_data->blue = NUM_QLUT;
++#endif
++
++	// These values are NOT final, they will be revised in a later commit.
++	lut_data->minimum = 35;
++	lut_data->enable = 1;
++	lut_data->invert = 0;
++	lut_data->sat = 256;
++	lut_data->hue = 0;
++	lut_data->val = 256;
++	lut_data->cont = 256;
++
++	platform_set_drvdata(pdev, lut_data);
++
++	ret = device_create_file(&pdev->dev, &dev_attr_kcal);
++	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_min);
++	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_enable);
++	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_invert);
++	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_sat);
++	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_hue);
++	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_val);
++	ret |= device_create_file(&pdev->dev, &dev_attr_kcal_cont);
++	if (ret)
++		pr_err("%s: unable to create sysfs entries\n", __func__);
++
++	return ret;
++}
++
++static int __devexit kcal_ctrl_remove(struct platform_device *pdev)
++{
++	struct kcal_lut_data *lut_data = platform_get_drvdata(pdev);
++
++	device_remove_file(&pdev->dev, &dev_attr_kcal);
++	device_remove_file(&pdev->dev, &dev_attr_kcal_min);
++	device_remove_file(&pdev->dev, &dev_attr_kcal_enable);
++	device_remove_file(&pdev->dev, &dev_attr_kcal_invert);
++	device_remove_file(&pdev->dev, &dev_attr_kcal_sat);
++	device_remove_file(&pdev->dev, &dev_attr_kcal_hue);
++	device_remove_file(&pdev->dev, &dev_attr_kcal_val);
++	device_remove_file(&pdev->dev, &dev_attr_kcal_cont);
++
++	kfree(lut_data);
++
++	return 0;
++}
++
++static struct platform_driver kcal_ctrl_driver = {
++	.probe = kcal_ctrl_probe,
++	.remove = kcal_ctrl_remove,
++	.driver = {
++		.name = "kcal_ctrl",
++	},
++};
++
++static struct platform_device kcal_ctrl_device = {
++	.name = "kcal_ctrl",
++};
++
++static int __init kcal_ctrl_init(void)
++{
++	if (platform_driver_register(&kcal_ctrl_driver))
++		return -ENODEV;
++
++	if (platform_device_register(&kcal_ctrl_device))
++		return -ENODEV;
++
++	pr_info("%s: registered\n", __func__);
++
++	return 0;
++}
++
++static void __exit kcal_ctrl_exit(void)
++{
++	platform_device_unregister(&kcal_ctrl_device);
++	platform_driver_unregister(&kcal_ctrl_driver);
++}
++
++late_initcall(kcal_ctrl_init);
++module_exit(kcal_ctrl_exit);
++
++MODULE_DESCRIPTION("LCD KCAL Driver");
++
+diff --git a/drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.h b/drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.h
+new file mode 100644
+index 0000000..d621077
+--- /dev/null
++++ b/drivers/video/msm/mdss/mdss_mdp_kcal_ctrl.h
+@@ -0,0 +1,42 @@
++/*
++ * Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
++ * Copyright (c) 2013, LGE Inc. All rights reserved
++ * Copyright (c) 2014, savoca <adeddo27@gmail.com>
++ * Copyright (c) 2014, Paul Reioux <reioux@gmail.com>
++ *
++ * This software is licensed under the terms of the GNU General Public
++ * License version 2, as published by the Free Software Foundation, and
++ * may be copied, distributed, and modified under those terms.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ */
++
++#ifndef __MDSS_MDP_KCAL_CTRL_H
++#define __MDSS_MDP_KCAL_CTRL_H
++
++#define KCAL_DATA_R 0x01
++#define KCAL_DATA_G 0x02
++#define KCAL_DATA_B 0x03
++
++#define NUM_QLUT 0x100
++
++struct kcal_lut_data {
++	int red;
++	int green;
++	int blue;
++	int minimum;
++	int enable;
++	int invert;
++	int sat;
++	int hue;
++	int val;
++	int cont;
++};
++
++void mdss_mdp_pp_kcal_enable(bool enable);
++void mdss_mdp_pp_kcal_update(int kr, int kg, int kb);
++void mdss_mdp_pp_kcal_pa(struct kcal_lut_data *lut_data);
++#endif
+diff --git a/drivers/video/msm/mdss/mdss_mdp_pp.c b/drivers/video/msm/mdss/mdss_mdp_pp.c
+index 8ef60e1..69b4833 100644
+--- a/drivers/video/msm/mdss/mdss_mdp_pp.c
++++ b/drivers/video/msm/mdss/mdss_mdp_pp.c
+@@ -1,5 +1,5 @@
+ /*
+- * Copyright (c) 2012-2014, The Linux Foundation. All rights reserved.
++ * Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.
+  *
+  * This program is free software; you can redistribute it and/or modify
+  * it under the terms of the GNU General Public License version 2 and
+@@ -101,7 +101,7 @@ struct mdp_csc_cfg dmb_csc_convert = {
+ 	{ 0x0, 0xff, 0x0, 0xff, 0x0, 0xff,},
+ #endif
+ };
+-#endif /* LGE_BROADCAST */
++#endif /*               */
+ 
+ #define CSC_MV_OFF	0x0
+ #define CSC_BV_OFF	0x2C
+@@ -342,33 +342,36 @@ struct mdss_pp_res_type {
+ 	struct pp_hist_col_info dspp_hist[MDSS_MDP_MAX_DSPP];
+ };
+ 
++#ifdef CONFIG_MACH_LGE
+ uint32_t igc_Table_RGB[256] = {
+-	4080, 4064, 4048, 4032, 4016, 4000, 3984, 3968, 3952, 3936, 3920, 3904,
+-	3888, 3872, 3856, 3840, 3824, 3808, 3792, 3776, 3760, 3744, 3728, 3712,
+-	3696, 3680, 3664, 3648, 3632, 3616, 3600, 3584, 3568, 3552, 3536, 3520,
+-	3504, 3488, 3472, 3456, 3440, 3424, 3408, 3392, 3376, 3360, 3344, 3328,
+-	3312, 3296, 3280, 3264, 3248, 3232, 3216, 3200, 3184, 3168, 3152, 3136,
+-	3120, 3104, 3088, 3072, 3056, 3040, 3024, 3008, 2992, 2976, 2960, 2944,
+-	2928, 2912, 2896, 2880, 2864, 2848, 2832, 2816, 2800, 2784, 2768, 2752,
+-	2736, 2720, 2704, 2688, 2672, 2656, 2640, 2624, 2608, 2592, 2576, 2560,
+-	2544, 2528, 2512, 2496, 2480, 2464, 2448, 2432, 2416, 2400, 2384, 2368,
+-	2352, 2336, 2320, 2304, 2288, 2272, 2256, 2240, 2224, 2208, 2192, 2176,
+-	2160, 2144, 2128, 2112, 2096, 2080, 2064, 2048, 2032, 2016, 2000, 1984,
+-	1968, 1952, 1936, 1920, 1904, 1888, 1872, 1856, 1840, 1824, 1808, 1792,
+-	1776, 1760, 1744, 1728, 1712, 1696, 1680, 1664, 1648, 1632, 1616, 1600,
+-	1584, 1568, 1552, 1536, 1520, 1504, 1488, 1472, 1456, 1440, 1424, 1408,
+-	1392, 1376, 1360, 1344, 1328, 1312, 1296, 1280, 1264, 1248, 1232, 1216,
+-	1200, 1184, 1168, 1152, 1136, 1120, 1104, 1088, 1072, 1056, 1040, 1024,
+-	1008, 992, 976, 960, 944, 928, 912, 896, 880, 864, 848, 832,
+-	816, 800, 784, 768, 752, 736, 720, 704, 688, 672, 656, 640,
+-	624, 608, 592, 576, 560, 544, 528, 512, 496, 480, 464, 448,
+-	432, 416, 400, 384, 368, 352, 336, 320, 304, 288, 272, 256,
+-	240, 224, 208, 192, 176, 160, 144, 128, 112, 96, 80, 64,
+-	48, 32, 16, 0
++		4080	,		4064	,		4048	,		4032	,		4016	,		4000	,		3984	,		3968	,		3952	,		3936	,		3920	,		3904	,
++		3888	,		3872	,		3856	,		3840	,		3824	,		3808	,		3792	,		3776	,		3760	,		3744	,		3728	,		3712	,
++		3696	,		3680	,		3664	,		3648	,		3632	,		3616	,		3600	,		3584	,		3568	,		3552	,		3536	,		3520	,
++		3504	,		3488	,		3472	,		3456	,		3440	,		3424	,		3408	,		3392	,		3376	,		3360	,		3344	,		3328	,
++		3312	,		3296	,		3280	,		3264	,		3248	,		3232	,		3216	,		3200	,		3184	,		3168	,		3152	,		3136	,
++		3120	,		3104	,		3088	,		3072	,		3056	,		3040	,		3024	,		3008	,		2992	,		2976	,		2960	,		2944	,
++		2928	,		2912	,		2896	,		2880	,		2864	,		2848	,		2832	,		2816	,		2800	,		2784	,		2768	,		2752	,
++		2736	,		2720	,		2704	,		2688	,		2672	,		2656	,		2640	,		2624	,		2608	,		2592	,		2576	,		2560	,
++		2544	,		2528	,		2512	,		2496	,		2480	,		2464	,		2448	,		2432	,		2416	,		2400	,		2384	,		2368	,
++		2352	,		2336	,		2320	,		2304	,		2288	,		2272	,		2256	,		2240	,		2224	,		2208	,		2192	,		2176	,
++		2160	,		2144	,		2128	,		2112	,		2096	,		2080	,		2064	,		2048	,		2032	,		2016	,		2000	,		1984	,
++		1968	,		1952	,		1936	,		1920	,		1904	,		1888	,		1872	,		1856	,		1840	,		1824	,		1808	,		1792	,
++		1776	,		1760	,		1744	,		1728	,		1712	,		1696	,		1680	,		1664	,		1648	,		1632	,		1616	,		1600	,
++		1584	,		1568	,		1552	,		1536	,		1520	,		1504	,		1488	,		1472	,		1456	,		1440	,		1424	,		1408	,
++		1392	,		1376	,		1360	,		1344	,		1328	,		1312	,		1296	,		1280	,		1264	,		1248	,		1232	,		1216	,
++		1200	,		1184	,		1168	,		1152	,		1136	,		1120	,		1104	,		1088	,		1072	,		1056	,		1040	,		1024	,
++		1008	,		992	,		976	,		960	,		944	,		928	,		912	,		896	,		880	,		864	,		848	,		832	,
++		816	,		800	,		784	,		768	,		752	,		736	,		720	,		704	,		688	,		672	,		656	,		640	,
++		624	,		608	,		592	,		576	,		560	,		544	,		528	,		512	,		496	,		480	,		464	,		448	,
++		432	,		416	,		400	,		384	,		368	,		352	,		336	,		320	,		304	,		288	,		272	,		256	,
++		240	,		224	,		208	,		192	,		176	,		160	,		144	,		128	,		112	,		96	,		80	,		64	,
++		48	,		32	,		16	,		0
+ };
+ int igc_c0_c1[256] = {0,};
+ int igc_c2[256] = {0,};
+ 
++#endif
++
+ static DEFINE_MUTEX(mdss_pp_mutex);
+ static struct mdss_pp_res_type *mdss_pp_res;
+ 
+@@ -379,7 +382,7 @@ int pp_set_dmb_status(int flag)
+ 	dmb_status = flag;
+ 	return 0;
+ }
+-#endif /* LGE_BROADCAST */
++#endif /*               */
+ 
+ static u32 pp_hist_read(char __iomem *v_addr,
+ 				struct pp_hist_col_info *hist_info);
+@@ -462,7 +465,6 @@ static void pp_ad_bypass_config(struct mdss_ad_info *ad,
+ 				struct mdss_mdp_ctl *ctl, u32 num, u32 *opmode);
+ static int mdss_mdp_ad_setup(struct msm_fb_data_type *mfd);
+ static void pp_ad_cfg_lut(char __iomem *addr, u32 *data);
+-static struct msm_fb_data_type *mdss_get_mfd_from_index(int index);
+ static int pp_num_to_side(struct mdss_mdp_ctl *ctl, u32 num);
+ static inline bool pp_sts_is_enabled(u32 sts, int side);
+ static inline void pp_sts_set_split_bits(u32 *sts, u32 bits);
+@@ -893,7 +895,7 @@ static int pp_vig_pipe_setup(struct mdss_mdp_pipe *pipe, u32 *op)
+ 			} else {
+ 				mdss_mdp_csc_setup(MDSS_MDP_BLOCK_SSPP, pipe->num, 1, MDSS_MDP_CSC_YUV2RGB);
+ 			}
+-#endif /* LGE_BROADCAST */
++#endif /*               */
+ 		}
+ 	}
+ 
+@@ -1616,28 +1618,28 @@ dspp_exit:
+ 	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
+ 	return ret;
+ }
+-
++/*
+ int mdss_mdp_pp_setup(struct mdss_mdp_ctl *ctl)
+ {
+ 	int ret = 0;
+ 
+ 	if ((!ctl->mfd) || (!mdss_pp_res))
+ 		return -EINVAL;
+ 
+-	/* TODO: have some sort of reader/writer lock to prevent unclocked
+-	 * access while display power is toggled */
++	 TODO: have some sort of reader/writer lock to prevent unclocked
++	 * access while display power is toggled 
+ 	if (!ctl->mfd->panel_power_on) {
+ 		ret = -EPERM;
+-		goto error;
+-	}
++	//	goto error;
++//	}
+ 	mutex_lock(&ctl->mfd->lock);
+ 	ret = mdss_mdp_pp_setup_locked(ctl);
+ 	mutex_unlock(&ctl->mfd->lock);
+ error:
+-	return ret;
++	return ret; 
+ }
+ 
+-/* call only when holding and mfd->lock */
++ call only when holding and mfd->lock */
+ int mdss_mdp_pp_setup_locked(struct mdss_mdp_ctl *ctl)
+ {
+ 	struct mdss_data_type *mdata = ctl->mdata;
+@@ -1789,6 +1791,10 @@ int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
+ 			mdss_pp_res->gamut_disp_cfg[disp_num].flags |=
+ 				MDP_PP_OPS_WRITE;
+ 	}
++
++	if (!disp_num)
++		pp_sts.pgc_sts |= PP_STS_ENABLE;
++
+ 	if (pp_sts.pgc_sts & PP_STS_ENABLE) {
+ 		flags |= PP_FLAGS_DIRTY_PGC;
+ 		if (!(mdss_pp_res->pgc_disp_cfg[disp_num].flags
+@@ -1801,93 +1807,57 @@ int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
+ 	return 0;
+ }
+ 
+-void mdss_mdp_pp_kcal_update(struct kcal_lut_data *lut_data)
++void mdss_mdp_pp_kcal_enable(bool enable)
+ {
+-	u32 copyback = 0;
+-	struct mdp_pcc_cfg_data pcc_config;
++	u32 disp_num = 0, copyback = 0;
++	struct mdp_pgc_lut_data *pgc_config;
+ 
+-	memset(&pcc_config, 0, sizeof(struct mdp_pcc_cfg_data));
++	pgc_config = &mdss_pp_res->pgc_disp_cfg[disp_num];
++	pgc_config->block = MDP_LOGICAL_BLOCK_DISP_0;
+ 
+-	pcc_config.block = MDP_LOGICAL_BLOCK_DISP_0;
+-	pcc_config.ops = lut_data->enable ? MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE :
+-		MDP_PP_OPS_WRITE | MDP_PP_OPS_DISABLE;
+-	pcc_config.r.r = lut_data->red * PCC_ADJ;
+-	pcc_config.g.g = lut_data->green * PCC_ADJ;
+-	pcc_config.b.b = lut_data->blue * PCC_ADJ;
++	if (enable) {
++		pgc_config->flags = MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE;
++		pgc_config->r_data = &mdss_pp_res->gc_lut_r[disp_num][0];
++		pgc_config->g_data = &mdss_pp_res->gc_lut_g[disp_num][0];
++		pgc_config->b_data = &mdss_pp_res->gc_lut_b[disp_num][0];
++	} else
++		pgc_config->flags = MDP_PP_OPS_WRITE | MDP_PP_OPS_DISABLE;
+ 
+-	mdss_mdp_pcc_config(&pcc_config, &copyback);
++	mdss_mdp_argc_config(pgc_config, &copyback);
+ }
+ 
+-void mdss_mdp_pp_kcal_pa(struct kcal_lut_data *lut_data)
++void mdss_mdp_pp_kcal_update(int kr, int kg, int kb)
+ {
+-	u32 copyback = 0;
+-	struct mdp_pa_cfg_data pa_config;
+-	struct mdp_pa_v2_cfg_data pa_v2_config;
+-	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
+-
+-	if (mdata->mdp_rev < MDSS_MDP_HW_REV_103) {
+-		memset(&pa_config, 0, sizeof(struct mdp_pa_cfg_data));
++	int i;
++	u32 disp_num = 0, copyback = 0;
++	struct mdp_pgc_lut_data *pgc_config;
+ 
+-		pa_config.block = MDP_LOGICAL_BLOCK_DISP_0;
+-		pa_config.pa_data.flags = MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE;
+-		pa_config.pa_data.hue_adj = lut_data->hue;
+-		pa_config.pa_data.sat_adj = lut_data->sat;
+-		pa_config.pa_data.val_adj = lut_data->val;
+-		pa_config.pa_data.cont_adj = lut_data->cont;
++	pgc_config = &mdss_pp_res->pgc_disp_cfg[disp_num];
+ 
+-		mdss_mdp_pa_config(&pa_config, &copyback);
+-	} else {
+-		memset(&pa_v2_config, 0, sizeof(struct mdp_pa_v2_cfg_data));
+-
+-		pa_v2_config.block = MDP_LOGICAL_BLOCK_DISP_0;
+-		pa_v2_config.pa_v2_data.flags = MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE;
+-		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_HUE_ENABLE;
+-		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_HUE_MASK;
+-		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_SAT_ENABLE;
+-		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_SAT_MASK;
+-		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_VAL_ENABLE;
+-		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_VAL_MASK;
+-		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_CONT_ENABLE;
+-		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_CONT_MASK;
+-		pa_v2_config.pa_v2_data.global_hue_adj = lut_data->hue;
+-		pa_v2_config.pa_v2_data.global_sat_adj = lut_data->sat;
+-		pa_v2_config.pa_v2_data.global_val_adj = lut_data->val;
+-		pa_v2_config.pa_v2_data.global_cont_adj = lut_data->cont;
+-
+-		mdss_mdp_pa_v2_config(&pa_v2_config, &copyback);
++	for (i = 0; i < GC_LUT_SEGMENTS; i++) {
++		pgc_config->r_data[i].slope = kr;
++		pgc_config->g_data[i].slope = kg;
++		pgc_config->b_data[i].slope = kb;
+ 	}
++
++	mdss_mdp_argc_config(pgc_config, &copyback);
+ }
+ 
+-void mdss_mdp_pp_kcal_invert(struct kcal_lut_data *lut_data)
++void mdss_mdp_pp_kcal_pa(struct kcal_lut_data *lut_data)
+ {
+-	int i;
+-	u32 disp_num = 0, copyback = 0, copy_from_kernel = 1;
+-	struct msm_fb_data_type *igc_mfd;
+-	struct mdp_igc_lut_data *igc_config;
+-
+-	igc_mfd = mdss_get_mfd_from_index(0);
+-
+-	igc_config = &mdss_pp_res->igc_disp_cfg[disp_num];
+-	igc_config->c0_c1_data = &mdss_pp_res->igc_lut_c0c1[disp_num][0];
+-	igc_config->c2_data = &mdss_pp_res->igc_lut_c2[disp_num][0];
+-	igc_config->block = MDP_LOGICAL_BLOCK_DISP_0;
+-	igc_config->len = IGC_LUT_ENTRIES;
+-
+-	if (igc_mfd && lut_data->invert) {
+-		igc_config->ops = MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE;
+-		for (i = 0; i < IGC_LUT_ENTRIES; i++) {
+-			igc_c0_c1[i] = (igc_Table_RGB[i] & 0xfff) |
+-				((igc_Table_RGB[i] & 0xfff)) << 16;
+-			igc_c2[i] = igc_Table_RGB[i];
+-		}
+-		igc_config->c0_c1_data = &igc_c0_c1[0];
+-		igc_config->c2_data = &igc_c2[0];
+-	} else if (igc_mfd && !lut_data->invert)
+-		igc_config->ops = MDP_PP_OPS_WRITE | MDP_PP_OPS_DISABLE;
+-	else
+-		return;
++	u32 copyback = 0;
++	struct mdp_pa_cfg_data pa_config;
++
++	memset(&pa_config, 0, sizeof(struct mdp_pa_cfg_data));
++
++	pa_config.block = MDP_LOGICAL_BLOCK_DISP_0;
++	pa_config.pa_data.flags = MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE;
++	pa_config.pa_data.sat_adj = lut_data->sat;
++	pa_config.pa_data.hue_adj = lut_data->hue;
++	pa_config.pa_data.val_adj = lut_data->val;
++	pa_config.pa_data.cont_adj = lut_data->cont;
+ 
+-	mdss_mdp_igc_lut_config(igc_config, &copyback, copy_from_kernel);
++	mdss_mdp_pa_config(&pa_config, &copyback);
+ }
+ 
+ int mdss_mdp_pp_init(struct device *dev)
+@@ -2365,20 +2335,6 @@ pcc_config_exit:
+ 	return ret;
+ }
+ 
+-static void pp_read_igc_lut_cached(struct mdp_igc_lut_data *cfg)
+-{
+-	int i;
+-	int disp_num;
+-
+-	disp_num = cfg->block - MDP_LOGICAL_BLOCK_DISP_0;
+-	for (i = 0; i < IGC_LUT_ENTRIES; i++) {
+-		cfg->c0_c1_data[i] =
+-			mdss_pp_res->igc_disp_cfg[disp_num].c0_c1_data[i];
+-		cfg->c2_data[i] =
+-			mdss_pp_res->igc_disp_cfg[disp_num].c2_data[i];
+-	}
+-}
+-
+ #ifdef CONFIG_MACH_LGE
+ int mdss_dsi_panel_invert(u32 enable)
+ {
+@@ -2544,17 +2500,14 @@ int mdss_mdp_igc_lut_config(struct mdp_igc_lut_data *config,
+ 			&mdss_pp_res->igc_lut_c0c1[disp_num][0];
+ 		local_cfg.c2_data =
+ 			&mdss_pp_res->igc_lut_c2[disp_num][0];
+-		if (mdata->has_no_lut_read)
+-			pp_read_igc_lut_cached(&local_cfg);
+-		else
+-			pp_read_igc_lut(&local_cfg, igc_addr, dspp_num);
+-		if (copy_to_user(config->c0_c1_data, local_cfg.c0_c1_data,
++		pp_read_igc_lut(&local_cfg, igc_addr, dspp_num);
++		if (copy_to_user(config->c0_c1_data, local_cfg.c2_data,
+ 			config->len * sizeof(u32))) {
+ 			ret = -EFAULT;
+ 			mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
+ 			goto igc_config_exit;
+ 		}
+-		if (copy_to_user(config->c2_data, local_cfg.c2_data,
++		if (copy_to_user(config->c2_data, local_cfg.c0_c1_data,
+ 			config->len * sizeof(u32))) {
+ 			ret = -EFAULT;
+ 			mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
+@@ -2694,41 +2647,6 @@ static int pp_read_argc_lut(struct mdp_pgc_lut_data *config, char __iomem *addr)
+ 	return ret;
+ }
+ 
+-static int pp_read_argc_lut_cached(struct mdp_pgc_lut_data *config)
+-{
+-	int i;
+-	u32 disp_num;
+-	struct mdp_pgc_lut_data *pgc_ptr;
+-
+-	disp_num = PP_BLOCK(config->block) - MDP_LOGICAL_BLOCK_DISP_0;
+-	switch (PP_LOCAT(config->block)) {
+-	case MDSS_PP_LM_CFG:
+-		pgc_ptr = &mdss_pp_res->argc_disp_cfg[disp_num];
+-		break;
+-	case MDSS_PP_DSPP_CFG:
+-		pgc_ptr = &mdss_pp_res->pgc_disp_cfg[disp_num];
+-		break;
+-	default:
+-		return -EINVAL;
+-	}
+-
+-	for (i = 0; i < GC_LUT_SEGMENTS; i++) {
+-		config->r_data[i].x_start = pgc_ptr->r_data[i].x_start;
+-		config->r_data[i].slope   = pgc_ptr->r_data[i].slope;
+-		config->r_data[i].offset  = pgc_ptr->r_data[i].offset;
+-
+-		config->g_data[i].x_start = pgc_ptr->g_data[i].x_start;
+-		config->g_data[i].slope   = pgc_ptr->g_data[i].slope;
+-		config->g_data[i].offset  = pgc_ptr->g_data[i].offset;
+-
+-		config->b_data[i].x_start = pgc_ptr->b_data[i].x_start;
+-		config->b_data[i].slope   = pgc_ptr->b_data[i].slope;
+-		config->b_data[i].offset  = pgc_ptr->b_data[i].offset;
+-	}
+-
+-	return 0;
+-}
+-
+ /* Note: Assumes that its inputs have been checked by calling function */
+ static void pp_update_hist_lut(char __iomem *addr,
+ 				struct mdp_hist_lut_data *cfg)
+@@ -2748,14 +2666,7 @@ int mdss_mdp_argc_config(struct mdp_pgc_lut_data *config,
+ {
+ 	int ret = 0;
+ 	u32 disp_num, dspp_num = 0;
+-	struct mdp_pgc_lut_data local_cfg;
+-	struct mdp_pgc_lut_data *pgc_ptr;
+-	u32 tbl_size, r_size, g_size, b_size;
+ 	char __iomem *argc_addr = 0;
+-	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
+-
+-	if (mdata == NULL)
+-		return -EPERM;
+ 
+ 	if ((PP_BLOCK(config->block) < MDP_LOGICAL_BLOCK_DISP_0) ||
+ 		(PP_BLOCK(config->block) >= MDP_BLOCK_MAX))
+@@ -2767,124 +2678,56 @@ int mdss_mdp_argc_config(struct mdp_pgc_lut_data *config,
+ 	}
+ 
+ 	mutex_lock(&mdss_pp_mutex);
+-
+ 	disp_num = PP_BLOCK(config->block) - MDP_LOGICAL_BLOCK_DISP_0;
+-	ret = pp_get_dspp_num(disp_num, &dspp_num);
+-	if (ret) {
+-		pr_err("%s, no dspp connects to disp %d", __func__, disp_num);
+-		goto argc_config_exit;
+-	}
+-
+-	switch (PP_LOCAT(config->block)) {
+-	case MDSS_PP_LM_CFG:
+-		argc_addr = mdss_mdp_get_mixer_addr_off(dspp_num) +
+-			MDSS_MDP_REG_LM_GC_LUT_BASE;
+-		pgc_ptr = &mdss_pp_res->argc_disp_cfg[disp_num];
+-		if (config->flags & MDP_PP_OPS_WRITE)
+-			mdss_pp_res->pp_disp_flags[disp_num] |=
+-				PP_FLAGS_DIRTY_ARGC;
+-		break;
+-	case MDSS_PP_DSPP_CFG:
+-		argc_addr = mdss_mdp_get_dspp_addr_off(dspp_num) +
+-					MDSS_MDP_REG_DSPP_GC_BASE;
+-		pgc_ptr = &mdss_pp_res->pgc_disp_cfg[disp_num];
+-		if (config->flags & MDP_PP_OPS_WRITE)
+-			mdss_pp_res->pp_disp_flags[disp_num] |=
+-				PP_FLAGS_DIRTY_PGC;
+-		break;
+-	default:
+-		goto argc_config_exit;
+-		break;
+-	}
+-
+-	tbl_size = GC_LUT_SEGMENTS * sizeof(struct mdp_ar_gc_lut_data);
+ 
+ 	if (config->flags & MDP_PP_OPS_READ) {
+-		mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON, false);
+-		local_cfg = *config;
+-		local_cfg.r_data =
+-			&mdss_pp_res->gc_lut_r[disp_num][0];
+-		local_cfg.g_data =
+-			&mdss_pp_res->gc_lut_g[disp_num][0];
+-		local_cfg.b_data =
+-			&mdss_pp_res->gc_lut_b[disp_num][0];
+-		if (mdata->has_no_lut_read)
+-			pp_read_argc_lut_cached(&local_cfg);
+-		else
+-			pp_read_argc_lut(&local_cfg, argc_addr);
+-
+-		if ((tbl_size != local_cfg.num_r_stages *
+-			sizeof(struct mdp_ar_gc_lut_data)) ||
+-			(copy_to_user(config->r_data, local_cfg.r_data,
+-				tbl_size))) {
+-			mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
+-			ret = -EFAULT;
+-			goto argc_config_exit;
+-		}
+-		if ((tbl_size != local_cfg.num_g_stages *
+-			sizeof(struct mdp_ar_gc_lut_data)) ||
+-			(copy_to_user(config->g_data, local_cfg.g_data,
+-				tbl_size))) {
+-			mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
+-			ret = -EFAULT;
++		ret = pp_get_dspp_num(disp_num, &dspp_num);
++		if (ret) {
++			pr_err("%s, no dspp connects to disp %d",
++				__func__, disp_num);
+ 			goto argc_config_exit;
+ 		}
+-		if ((tbl_size != local_cfg.num_b_stages *
+-			sizeof(struct mdp_ar_gc_lut_data)) ||
+-			(copy_to_user(config->b_data, local_cfg.b_data,
+-				tbl_size))) {
++
++		mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON, false);
++
++		switch (PP_LOCAT(config->block)) {
++		case MDSS_PP_LM_CFG:
++			argc_addr = mdss_mdp_get_mixer_addr_off(dspp_num) +
++				MDSS_MDP_REG_LM_GC_LUT_BASE;
++			break;
++		case MDSS_PP_DSPP_CFG:
++			argc_addr = mdss_mdp_get_dspp_addr_off(dspp_num) +
++				MDSS_MDP_REG_DSPP_GC_BASE;
++			break;
++		default:
+ 			mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
+-			ret = -EFAULT;
+ 			goto argc_config_exit;
++			break;
+ 		}
++
++		pp_read_argc_lut(config, argc_addr);
+ 		*copyback = 1;
+ 		mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
+ 	} else {
+-		r_size = config->num_r_stages *
+-			sizeof(struct mdp_ar_gc_lut_data);
+-		g_size = config->num_g_stages *
+-			sizeof(struct mdp_ar_gc_lut_data);
+-		b_size = config->num_b_stages *
+-			sizeof(struct mdp_ar_gc_lut_data);
+-		if (r_size > tbl_size ||
+-			g_size > tbl_size ||
+-			b_size > tbl_size ||
+-			r_size == 0 ||
+-			g_size == 0 ||
+-			b_size == 0) {
+-			ret = -EINVAL;
+-			pr_warn("%s, number of rgb stages invalid",
+-				__func__);
+-			goto argc_config_exit;
+-		}
+-		if (copy_from_user(&mdss_pp_res->gc_lut_r[disp_num][0],
+-			config->r_data, r_size)) {
+-			ret = -EFAULT;
+-			goto argc_config_exit;
+-		}
+-		if (copy_from_user(&mdss_pp_res->gc_lut_g[disp_num][0],
+-			config->g_data, g_size)) {
+-			ret = -EFAULT;
+-			goto argc_config_exit;
+-		}
+-		if (copy_from_user(&mdss_pp_res->gc_lut_b[disp_num][0],
+-			config->b_data, b_size)) {
+-			ret = -EFAULT;
+-			goto argc_config_exit;
++		switch (PP_LOCAT(config->block)) {
++		case MDSS_PP_LM_CFG:
++			mdss_pp_res->argc_disp_cfg[disp_num] = *config;
++			mdss_pp_res->pp_disp_flags[disp_num] |= PP_FLAGS_DIRTY_ARGC;
++			break;
++		case MDSS_PP_DSPP_CFG:
++			mdss_pp_res->pgc_disp_cfg[disp_num] = *config;
++			mdss_pp_res->pp_disp_flags[disp_num] |= PP_FLAGS_DIRTY_PGC;
++			break;
++		default:
++			break;
+ 		}
+-
+-		*pgc_ptr = *config;
+-		pgc_ptr->r_data =
+-			&mdss_pp_res->gc_lut_r[disp_num][0];
+-		pgc_ptr->g_data =
+-			&mdss_pp_res->gc_lut_g[disp_num][0];
+-		pgc_ptr->b_data =
+-			&mdss_pp_res->gc_lut_b[disp_num][0];
+ 	}
++
+ argc_config_exit:
+ 	mutex_unlock(&mdss_pp_mutex);
+ 	return ret;
+ }
++
+ int mdss_mdp_hist_lut_config(struct mdp_hist_lut_data *config,
+ 					u32 *copyback)
+ {
+@@ -4725,10 +4568,10 @@ static void pp_ad_calc_worker(struct work_struct *work)
+ 		ad->state &= ~PP_AD_STATE_VSYNC;
+ 		ctl->remove_vsync_handler(ctl, &ad->handle);
+ 	}
+-	mutex_unlock(&ad->lock);
++/*	mutex_unlock(&ad->lock);
+ 	mutex_lock(&mfd->lock);
+ 	ctl->flush_bits |= BIT(13 + ad->num);
+-	mutex_unlock(&mfd->lock);
++	mutex_unlock(&mfd->lock); */
+ 
+ 	/* Trigger update notify to wake up those waiting for display updates */
+ 	mdss_fb_update_notify_update(bl_mfd);
+@@ -5169,3 +5012,4 @@ int mdss_mdp_calib_config_buffer(struct mdp_calib_config_buffer *cfg,
+ 	kfree(buff_org);
+ 	return ret;
+ }
++
+--
+libgit2 0.22.0
+
--
libgit2 0.22.0

