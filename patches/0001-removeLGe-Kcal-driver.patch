From 283c82d5dfc015d74049d5be13fb01c43f9feafa Mon Sep 17 00:00:00 2001
From: mostafa-z <mostafazarghami@gmail.com>
Date: Sat, 6 Jun 2015 23:25:46 +0430
Subject: [PATCH] remove:LGe Kcal driver

---
 arch/arm/configs/g3-global_com-perf_defconfig            |    2 +-
 arch/arm/mach-msm/include/mach/board_lge.h               |   43 -------------------------------------------
 arch/arm/mach-msm/lge/Kconfig                            |  196 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-----------------------
 arch/arm/mach-msm/lge/Makefile                           |   25 ++++++++++++++++++-------
 arch/arm/mach-msm/lge/board-8974-g3-ca.c                 |  245 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 arch/arm/mach-msm/lge/board-8974-g3-cn.c                 |  247 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 arch/arm/mach-msm/lge/board-8974-g3-global.c             |  248 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 arch/arm/mach-msm/lge/board-8974-g3-global_com-gpiomux.c |
 arch/arm/mach-msm/lge/board-8974-g3-kddi.c               |  238 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 arch/arm/mach-msm/lge/board-8974-g3-kr.c                 |  263 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 arch/arm/mach-msm/lge/board-8974-g3-us.c                 |  245 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 arch/arm/mach-msm/lge/devices_lge.c                      |  215 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-----------------------------------------------------------------------------------------------------------------------------------------------------------
 arch/arm/mach-msm/lge/lge_kcal_ctrl.c                    |  129 ---------------------------------------------------------------------------------------------------------------------------------
 drivers/video/msm/mdss/mdss_mdp_pp.c                     |  174 ++----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 patches/000-remove-LGe-Kcal-driver.patch                 |
 15 files changed, 8088 insertions(+), 530 deletions(-)
 create mode 100644 arch/arm/mach-msm/lge/board-8974-g3-ca.c
 create mode 100644 arch/arm/mach-msm/lge/board-8974-g3-cn.c
 create mode 100644 arch/arm/mach-msm/lge/board-8974-g3-global.c
 create mode 100644 arch/arm/mach-msm/lge/board-8974-g3-global_com-gpiomux.c
 create mode 100644 arch/arm/mach-msm/lge/board-8974-g3-kddi.c
 create mode 100644 arch/arm/mach-msm/lge/board-8974-g3-kr.c
 create mode 100644 arch/arm/mach-msm/lge/board-8974-g3-us.c
 delete mode 100755 arch/arm/mach-msm/lge/lge_kcal_ctrl.c
 create mode 100644 patches/000-remove-LGe-Kcal-driver.patch

diff --git a/arch/arm/configs/g3-global_com-perf_defconfig b/arch/arm/configs/g3-global_com-perf_defconfig
index ce9ca7b..cee0340 100644
--- a/arch/arm/configs/g3-global_com-perf_defconfig
+++ b/arch/arm/configs/g3-global_com-perf_defconfig
@@ -533,7 +533,7 @@ CONFIG_FB_MSM_MDSS=y
 CONFIG_FB_MSM_MDSS_WRITEBACK=y
 CONFIG_FB_MSM_MDSS_HDMI_PANEL=y
 CONFIG_FB_MSM_MDSS_HDMI_MHL_SII8334 is not set
-CONFIG_LCD_KCAL=y
+# CONFIG_LCD_KCAL is not set
 CONFIG_SLIMPORT_ANX7816=y
 CONFIG_SLIMPORT_DYNAMIC_HPD=y
 CONFIG_BACKLIGHT_LCD_SUPPORT=y
diff --git a/arch/arm/mach-msm/include/mach/board_lge.h b/arch/arm/mach-msm/include/mach/board_lge.h
index cffc1e8..cd1f7ef 100644
--- a/arch/arm/mach-msm/include/mach/board_lge.h
+++ b/arch/arm/mach-msm/include/mach/board_lge.h
@@ -107,21 +107,6 @@ struct pseudo_batt_info_type {
 struct pseudo_batt_info_type;
 void pseudo_batt_set(struct pseudo_batt_info_type *);
 #endif
-#ifdef CONFIG_LGE_SUPPORT_LCD_MAKER_ID
-typedef enum {
-	LCD_RENESAS_LGD = 0,
-	LCD_RENESAS_JDI,
-	LCD_MAKER_MAX,
-} lcd_maker_id;
-
-typedef struct {
-	lcd_maker_id maker_id;
-	int min_mvol;
-	int max_mvol;
-} lcd_vol_maker_tbl_type;
-
-lcd_maker_id lge_get_panel_maker(void);
-#endif
 
 enum lge_boot_mode_type {
 	LGE_BOOT_MODE_NORMAL = 0,
@@ -142,24 +127,6 @@ int lge_get_factory_cable(void);
 void __init lge_add_android_usb_devices(void);
 #endif
 
-#if defined(CONFIG_LCD_KCAL)
-/*             
-                          
-                                
-*/
-struct kcal_data {
-		int red;
-		int green;
-		int blue;
-};
-
-struct kcal_platform_data {
-	int (*set_values) (int r, int g, int b);
-	int (*get_values) (int *r, int *g, int *b);
-	int (*refresh_display) (void);
-};
-#endif /* CONFIG_LCD_KCAL */
-
 enum lge_laf_mode_type {
 	LGE_LAF_MODE_NORMAL = 0,
 	LGE_LAF_MODE_LAF,
@@ -215,16 +182,6 @@ void __init lge_add_persist_ram_devices(void);
 void __init lge_add_lcd_misc_devices(void);
 #endif
 
-int gpio_debug_init(void);
-void gpio_debug_print(void);
-
-#if defined(CONFIG_LCD_KCAL)
-/*             
-                          
-                                
-*/
-void __init lge_add_lcd_kcal_devices(void);
-#endif
 #ifdef CONFIG_LGE_QFPROM_INTERFACE
 void __init lge_add_qfprom_devices(void);
 #endif
diff --git a/arch/arm/mach-msm/lge/Kconfig b/arch/arm/mach-msm/lge/Kconfig
index a54736f..ffbf4e0 100644
--- a/arch/arm/mach-msm/lge/Kconfig
+++ b/arch/arm/mach-msm/lge/Kconfig
@@ -3,8 +3,179 @@ config MACH_LGE
 
 menu "LGE Board Selection"
 
-source "arch/arm/mach-msm/lge/8974-g2/Kconfig"
-source "arch/arm/mach-msm/lge/8974ac-g3/Kconfig"
+config MACH_MSM8974_G3_KR
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 KR"
+	help
+	  Support for the Qualcomm MSM8974 G3 KR device.
+
+config MACH_MSM8974_G3_LGU
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 LGU"
+	help
+	  Support for the Qualcomm MSM8974 G3 LG Uplus device.
+
+config MACH_MSM8974_G3_LGU_EVB
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 LGU EVB"
+	help
+	  Support for the Qualcomm MSM8974 G3 LG Uplus EVB device.
+
+config MACH_MSM8974_G3_SKT
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 SKT"
+	help
+	  Support for the Qualcomm MSM8974 G3 SKT device.
+
+config MACH_MSM8974_G3_KT
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 KT"
+	help
+	  Support for the Qualcomm MSM8974 G3 KT device.
+
+config MACH_MSM8974_G3_VZW
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 VZW"
+	help
+	  Support for the Qualcomm MSM8974 G3 Verizon device.
+
+config MACH_MSM8974_G3_LRA
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 LRA"
+	help
+	  Support for the Qualcomm MSM8974 G3 LRA device.
+
+config MACH_MSM8974_G3_ATT
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 ATT"
+	help
+	  Support for the Qualcomm MSM8974 G3 AT&T device.
+
+config MACH_MSM8974_G3_SPR_US
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 SPR US"
+	help
+	  Support for the Qualcomm MSM8974 G3 Sprint device.
+
+config MACH_MSM8974_G3_USC_US
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 USC US"
+	help
+	  Support for the Qualcomm MSM8974 G3 Usc device.
+
+config MACH_MSM8974_G3_TMO_US
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 TMO US"
+	help
+	  Support for the Qualcomm MSM8974 G3 AT&T device.
+
+config MACH_MSM8974_G3_CN
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 CN"
+	help
+	  Support for the Qualcomm MSM8974 G3 CHINA device.
+	  
+config MACH_MSM8974_G3_CMCC_CN
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 CMCC CN"
+	help
+	  Support for the Qualcomm MSM8974 G3 CMCC device.
+
+config MACH_MSM8974_G3_CTC_CN
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 CTC CN"
+	help
+	  Support for the Qualcomm MSM8974 G3 CTC device.
+
+config MACH_MSM8974_G3_CUCC_CN
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 CUCC CN"
+	help
+	  Support for the Qualcomm MSM8974 G3 CUCC device.
+	  
+config MACH_MSM8974_G3_KDDI
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 KDDI"
+	help
+	  Support for the Qualcomm MSM8974 G3 KDDI device.
+
+config MACH_MSM8974_G3_KDDI_EVB
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 KDDI EVB"
+	help
+	  Support for the Qualcomm MSM8974 G3 LG KDDI EVB device.
+
+config MACH_MSM8974_G3_GLOBAL_COM
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 GLOBAL COM"
+	help
+	  Support for the Qualcomm MSM8974 G3 GLOBAL device.
+
+config MACH_MSM8974_G3_GLOBAL_COM_LOWMEM
+	depends on MACH_MSM8974_G3_GLOBAL_COM
+	bool "MSM8974 G3 GLOBAL COM LOWMEM"
+	help
+	  Support for the Qualcomm MSM8974 G3 GLOBAL LOWMEM device.
+
+config MACH_MSM8974_G3_CA
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 CA"
+	help
+	  Support for the Qualcomm MSM8974 G3 Canada device.
+
+config MACH_MSM8974_G3_BELL
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 BELL"
+	help
+	  Support for the Qualcomm MSM8974 G3 BELL device.
+
+config MACH_MSM8974_G3_TLS
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 TLS"
+	help
+	  Support for the Qualcomm MSM8974 G3 TLS device.
+
+config MACH_MSM8974_G3_RGS
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 RGS"
+	help
+	  Support for the Qualcomm MSM8974 G3 RGS device.
+
+config MACH_MSM8974_G3_VTR
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 VTR"
+	help
+	  Support for the Qualcomm MSM8974 G3 VTR device.
+	  
+config MACH_MSM8974_G3_WIN
+	depends on ARCH_MSM8974
+	select MACH_LGE
+	bool "MSM8974 G3 WIN"
+	help
+	  Support for the Qualcomm MSM8974 G3 WIN device.
 
 menuconfig LGE_SPECIFIC_PATCHES
     depends on MACH_LGE
@@ -69,11 +240,6 @@ config LGE_KSWITCH
     help
       LGE Kill Switch
 
-config LCD_KCAL
-	depends on MACH_LGE
-	bool "Enable sysfs for LCD KCAL"
-	default n
-
 config LGE_QSDL_SUPPORT
     tristate "Support for Quality Statistics Data Logging"
     default n
@@ -89,20 +255,4 @@ config LGE_QFPROM_INTERFACE
 	help
 	  LGE QFPROM DRIVER.
 
-
-config LGE_DIAG_BYPASS
-	tristate "Support LGE diag bypass for factory"
-	default n
-	depends on MACH_LGE
-	help
-	  LGE diag bypass
-
-
-config LGE_LCD_OFF_DIMMING
-	tristate "Support LGE LCD off dimming reboot"
-	default n
-	depends on MACH_LGE
-	help
-	  Support lcd off or dimming reboot when reboot reason is "LCD off". lcd stay dimming until lcd is off and on again.
-
 endmenu
diff --git a/arch/arm/mach-msm/lge/Makefile b/arch/arm/mach-msm/lge/Makefile
index ec20a70..efddad4 100644
--- a/arch/arm/mach-msm/lge/Makefile
+++ b/arch/arm/mach-msm/lge/Makefile
@@ -1,14 +1,25 @@
-
-# LGE Board Selection
-obj-$(CONFIG_MACH_MSM8974_G2) += 8974-g2/
-obj-$(CONFIG_MACH_MSM8974_G3) += 8974ac-g3/
-
+obj-$(CONFIG_MACH_MSM8974_G3_LGU) += board-8974-g3-kr.o board-8974-g3-kr-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_LGU_EVB) += board-8974-g3-kr.o board-8974-g3-kr-evb-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_SKT) += board-8974-g3-kr.o board-8974-g3-kr-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_KT) += board-8974-g3-kr.o board-8974-g3-kr-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_VZW) += board-8974-g3-us.o board-8974-g3-vzw-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_LRA) += board-8974-g3-us.o board-8974-g3-lra-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_ATT) += board-8974-g3-us.o board-8974-g3-att-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_TMO_US) += board-8974-g3-us.o board-8974-g3-tmo_us-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_SPR_US) += board-8974-g3-us.o board-8974-g3-spr_us-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_USC_US) += board-8974-g3-us.o board-8974-g3-usc_us-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_CMCC_CN) += board-8974-g3-cn.o board-8974-g3-cn-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_CTC_CN) += board-8974-g3-cn.o board-8974-g3-cn-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_CUCC_CN) += board-8974-g3-cn.o board-8974-g3-cn-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_KDDI) += board-8974-g3-kddi.o board-8974-g3-kddi-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_KDDI_EVB) += board-8974-g3-kddi.o board-8974-g3-kddi-evb-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_GLOBAL_COM) += board-8974-g3-global.o board-8974-g3-global_com-gpiomux.o
+obj-$(CONFIG_MACH_MSM8974_G3_CA) += board-8974-g3-ca.o board-8974-g3-ca-gpiomux.o
 obj-$(CONFIG_MACH_LGE) += devices_lge.o
 obj-$(CONFIG_MACH_LGE) += lge_charging_scenario.o
-obj-$(CONFIG_LCD_KCAL) += lge_kcal_ctrl.o
 obj-$(CONFIG_WIFI_CONTROL_FUNC) += wifi_bcm_lge.o
 obj-$(CONFIG_LGE_HANDLE_PANIC) += lge_handle_panic.o
-obj-$(CONFIG_MACH_LGE) += lge_gpio_debug.o
+obj-$(CONFIG_LGE_BLUETOOTH) += board-8974-g3-rfkill.o
 
 obj-$(CONFIG_LGE_BOOTLOADER_LOG) += lge_bootloader_log.o
 obj-$(CONFIG_LGE_BOOTLOADER_TIME_CHECKER) += lge_bootloader_time_checker.o
diff --git a/arch/arm/mach-msm/lge/board-8974-g3-ca.c b/arch/arm/mach-msm/lge/board-8974-g3-ca.c
new file mode 100644
index 0000000..cca2ff9
--- /dev/null
+++ b/arch/arm/mach-msm/lge/board-8974-g3-ca.c
@@ -0,0 +1,245 @@
+/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/err.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/irq.h>
+#include <linux/irqdomain.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_platform.h>
+#include <linux/memory.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/krait-regulator.h>
+#include <linux/msm_tsens.h>
+#include <linux/msm_thermal.h>
+#include <asm/mach/map.h>
+#include <asm/hardware/gic.h>
+#include <asm/mach/map.h>
+#include <asm/mach/arch.h>
+#include <mach/board.h>
+#include <mach/gpiomux.h>
+#include <mach/msm_iomap.h>
+#ifdef CONFIG_ION_MSM
+#include <mach/ion.h>
+#endif
+#include <mach/msm_memtypes.h>
+#include <mach/msm_smd.h>
+#include <mach/restart.h>
+#include <mach/rpm-smd.h>
+#include <mach/rpm-regulator-smd.h>
+#include <mach/socinfo.h>
+#include <mach/msm_smem.h>
+#include "../board-dt.h"
+#include "../clock.h"
+#include "../devices.h"
+#include "../spm.h"
+#include "../pm.h"
+#include "../modem_notifier.h"
+#include "../platsmp.h"
+#include <mach/board_lge.h>
+
+static struct memtype_reserve msm8974_reserve_table[] __initdata = {
+	[MEMTYPE_SMI] = {
+	},
+	[MEMTYPE_EBI0] = {
+		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
+	},
+	[MEMTYPE_EBI1] = {
+		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
+	},
+};
+
+static int msm8974_paddr_to_memtype(phys_addr_t paddr)
+{
+	return MEMTYPE_EBI1;
+}
+
+static struct reserve_info msm8974_reserve_info __initdata = {
+	.memtype_reserve_table = msm8974_reserve_table,
+	.paddr_to_memtype = msm8974_paddr_to_memtype,
+};
+
+void __init msm_8974_reserve(void)
+{
+	reserve_info = &msm8974_reserve_info;
+	of_scan_flat_dt(dt_scan_for_memory_reserve, msm8974_reserve_table);
+#ifdef CONFIG_MACH_LGE
+	of_scan_flat_dt(lge_init_dt_scan_chosen, NULL);
+#endif
+	msm_reserve();
+	lge_reserve();
+}
+
+static void __init msm8974_early_memory(void)
+{
+	reserve_info = &msm8974_reserve_info;
+	of_scan_flat_dt(dt_scan_for_memory_hole, msm8974_reserve_table);
+}
+
+#ifdef CONFIG_LGE_LCD_TUNING
+static struct platform_device lcd_misc_device = {
+	.name = "lcd_misc_msm",
+	.id = 0,
+};
+
+void __init lge_add_lcd_misc_devices(void)
+{
+	platform_device_register(&lcd_misc_device);
+}
+#endif
+
+/*
+ * Used to satisfy dependencies for devices that need to be
+ * run early or in a particular order. Most likely your device doesn't fall
+ * into this category, and thus the driver should not be added here. The
+ * EPROBE_DEFER can satisfy most dependency problems.
+ */
+/* LGE_CHANGE_S, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
+#if defined(CONFIG_BCMDHD) || defined(CONFIG_BCMDHD_MODULE)
+extern void init_bcm_wifi(void);
+#endif
+/* LGE_CHANGE_E, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
+
+void __init msm8974_add_drivers(void)
+{
+	msm_smem_init();
+	msm_init_modem_notifier_list();
+	msm_smd_init();
+	msm_rpm_driver_init();
+	msm_pm_sleep_status_init();
+	rpm_regulator_smd_driver_init();
+	msm_spm_device_init();
+	krait_power_init();
+	if (of_board_is_rumi())
+		msm_clock_init(&msm8974_rumi_clock_init_data);
+	else
+		msm_clock_init(&msm8974_clock_init_data);
+	tsens_tm_init_driver();
+	msm_thermal_device_init();
+	lge_add_persistent_device();
+#ifdef CONFIG_LGE_QFPROM_INTERFACE
+	lge_add_qfprom_devices();
+#endif
+#ifdef CONFIG_LGE_DIAG_ENABLE_SYSFS
+	lge_add_diag_devices();
+#endif
+#ifdef CONFIG_LGE_LCD_TUNING
+	lge_add_lcd_misc_devices();
+#endif
+/* LGE_CHANGE_S, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
+#if defined(CONFIG_BCMDHD) || defined(CONFIG_BCMDHD_MODULE)
+	init_bcm_wifi();
+#endif
+/* LGE_CHANGE_E, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
+#if defined(CONFIG_LGE_PM_BATTERY_ID_CHECKER)
+	lge_battery_id_devices();
+#endif
+#ifdef CONFIG_LGE_QSDL_SUPPORT
+	lge_add_qsdl_device();
+#endif
+#ifdef CONFIG_USB_G_LGE_ANDROID
+	lge_add_android_usb_devices();
+#endif
+}
+
+static struct of_dev_auxdata msm_hsic_host_adata[] = {
+	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, "msm_hsic_host", NULL),
+	{}
+};
+
+static struct of_dev_auxdata msm8974_auxdata_lookup[] __initdata = {
+	OF_DEV_AUXDATA("qcom,hsusb-otg", 0xF9A55000, \
+			"msm_otg", NULL),
+	OF_DEV_AUXDATA("qcom,ehci-host", 0xF9A55000, \
+			"msm_ehci_host", NULL),
+	OF_DEV_AUXDATA("qcom,dwc-usb3-msm", 0xF9200000, \
+			"msm_dwc3", NULL),
+	OF_DEV_AUXDATA("qcom,usb-bam-msm", 0xF9304000, \
+			"usb_bam", NULL),
+	OF_DEV_AUXDATA("qcom,spi-qup-v2", 0xF9924000, \
+			"spi_qsd.1", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9824000, \
+			"msm_sdcc.1", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98A4000, \
+			"msm_sdcc.2", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9864000, \
+			"msm_sdcc.3", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98E4000, \
+			"msm_sdcc.4", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9824900, \
+			"msm_sdcc.1", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98A4900, \
+			"msm_sdcc.2", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9864900, \
+			"msm_sdcc.3", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98E4900, \
+			"msm_sdcc.4", NULL),
+	OF_DEV_AUXDATA("qcom,msm-rng", 0xF9BFF000, \
+			"msm_rng", NULL),
+	OF_DEV_AUXDATA("qcom,qseecom", 0xFE806000, \
+			"qseecom", NULL),
+	OF_DEV_AUXDATA("qcom,mdss_mdp", 0xFD900000, "mdp.0", NULL),
+	OF_DEV_AUXDATA("qcom,msm-tsens", 0xFC4A8000, \
+			"msm-tsens", NULL),
+	OF_DEV_AUXDATA("qcom,qcedev", 0xFD440000, \
+			"qcedev.0", NULL),
+	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, \
+			"msm_hsic_host", NULL),
+	OF_DEV_AUXDATA("qcom,hsic-smsc-hub", 0, "msm_smsc_hub",
+			msm_hsic_host_adata),
+	{}
+};
+
+static void __init msm8974_map_io(void)
+{
+	msm_map_8974_io();
+}
+
+void __init msm8974_init(void)
+{
+	struct of_dev_auxdata *adata = msm8974_auxdata_lookup;
+
+	if (socinfo_init() < 0)
+		pr_err("%s: socinfo_init() failed\n", __func__);
+
+	msm_8974_init_gpiomux();
+	regulator_has_full_constraints();
+	board_dt_populate(adata);
+	msm8974_add_drivers();
+}
+
+void __init msm8974_init_very_early(void)
+{
+	msm8974_early_memory();
+}
+
+static const char *msm8974_dt_match[] __initconst = {
+	"qcom,msm8974",
+	"qcom,apq8074",
+	NULL
+};
+
+DT_MACHINE_START(MSM8974_DT, "Qualcomm MSM 8974 (Flattened Device Tree)")
+	.map_io = msm8974_map_io,
+	.init_irq = msm_dt_init_irq,
+	.init_machine = msm8974_init,
+	.handle_irq = gic_handle_irq,
+	.timer = &msm_dt_timer,
+	.dt_compat = msm8974_dt_match,
+	.reserve = msm_8974_reserve,
+	.init_very_early = msm8974_init_very_early,
+	.restart = msm_restart,
+	.smp = &msm8974_smp_ops,
+MACHINE_END
diff --git a/arch/arm/mach-msm/lge/board-8974-g3-cn.c b/arch/arm/mach-msm/lge/board-8974-g3-cn.c
new file mode 100644
index 0000000..bcc0578
--- /dev/null
+++ b/arch/arm/mach-msm/lge/board-8974-g3-cn.c
@@ -0,0 +1,247 @@
+/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/err.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/irq.h>
+#include <linux/irqdomain.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_platform.h>
+#include <linux/memory.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/krait-regulator.h>
+#include <linux/msm_tsens.h>
+#include <linux/msm_thermal.h>
+#include <asm/mach/map.h>
+#include <asm/hardware/gic.h>
+#include <asm/mach/map.h>
+#include <asm/mach/arch.h>
+#include <mach/board.h>
+#include <mach/gpiomux.h>
+#include <mach/msm_iomap.h>
+#ifdef CONFIG_ION_MSM
+#include <mach/ion.h>
+#endif
+#include <mach/msm_memtypes.h>
+#include <mach/msm_smd.h>
+#include <mach/restart.h>
+#include <mach/rpm-smd.h>
+#include <mach/rpm-regulator-smd.h>
+#include <mach/socinfo.h>
+#include <mach/msm_smem.h>
+#include "../board-dt.h"
+#include "../clock.h"
+#include "../devices.h"
+#include "../spm.h"
+#include "../pm.h"
+#include "../modem_notifier.h"
+#include "../platsmp.h"
+#include <mach/board_lge.h>
+
+#ifdef CONFIG_MFD_WM5110
+#include <linux/slimbus/slimbus.h>
+#endif
+
+static struct memtype_reserve msm8974_reserve_table[] __initdata = {
+	[MEMTYPE_SMI] = {
+	},
+	[MEMTYPE_EBI0] = {
+		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
+	},
+	[MEMTYPE_EBI1] = {
+		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
+	},
+};
+
+static int msm8974_paddr_to_memtype(phys_addr_t paddr)
+{
+	return MEMTYPE_EBI1;
+}
+
+static struct reserve_info msm8974_reserve_info __initdata = {
+	.memtype_reserve_table = msm8974_reserve_table,
+	.paddr_to_memtype = msm8974_paddr_to_memtype,
+};
+
+void __init msm_8974_reserve(void)
+{
+	reserve_info = &msm8974_reserve_info;
+	of_scan_flat_dt(dt_scan_for_memory_reserve, msm8974_reserve_table);
+#ifdef CONFIG_MACH_LGE
+	of_scan_flat_dt(lge_init_dt_scan_chosen, NULL);
+#endif
+	msm_reserve();
+	lge_reserve();
+}
+
+static void __init msm8974_early_memory(void)
+{
+	reserve_info = &msm8974_reserve_info;
+	of_scan_flat_dt(dt_scan_for_memory_hole, msm8974_reserve_table);
+}
+
+/*
+ * Used to satisfy dependencies for devices that need to be
+ * run early or in a particular order. Most likely your device doesn't fall
+ * into this category, and thus the driver should not be added here. The
+ * EPROBE_DEFER can satisfy most dependency problems.
+ */
+/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
+extern void init_bcm_wifi(void);
+#endif
+/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+
+void __init msm8974_add_drivers(void)
+{
+	msm_smem_init();
+	msm_init_modem_notifier_list();
+	msm_smd_init();
+	msm_rpm_driver_init();
+	msm_pm_sleep_status_init();
+	rpm_regulator_smd_driver_init();
+	msm_spm_device_init();
+	krait_power_init();
+	if (of_board_is_rumi())
+		msm_clock_init(&msm8974_rumi_clock_init_data);
+	else
+		msm_clock_init(&msm8974_clock_init_data);
+	tsens_tm_init_driver();
+	msm_thermal_device_init();
+	lge_add_persistent_device();
+#ifdef CONFIG_LGE_QFPROM_INTERFACE
+	lge_add_qfprom_devices();
+#endif
+/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
+	init_bcm_wifi();
+#endif
+/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+#if defined(CONFIG_LGE_PM_BATTERY_ID_CHECKER)
+	lge_battery_id_devices();
+#endif
+#ifdef CONFIG_USB_G_LGE_ANDROID
+	lge_add_android_usb_devices();
+#endif
+}
+
+static struct of_dev_auxdata msm_hsic_host_adata[] = {
+	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, "msm_hsic_host", NULL),
+	{}
+};
+
+static struct of_dev_auxdata msm8974_auxdata_lookup[] __initdata = {
+	OF_DEV_AUXDATA("qcom,hsusb-otg", 0xF9A55000, \
+			"msm_otg", NULL),
+	OF_DEV_AUXDATA("qcom,ehci-host", 0xF9A55000, \
+			"msm_ehci_host", NULL),
+	OF_DEV_AUXDATA("qcom,dwc-usb3-msm", 0xF9200000, \
+			"msm_dwc3", NULL),
+	OF_DEV_AUXDATA("qcom,usb-bam-msm", 0xF9304000, \
+			"usb_bam", NULL),
+	OF_DEV_AUXDATA("qcom,spi-qup-v2", 0xF9924000, \
+			"spi_qsd.1", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9824000, \
+			"msm_sdcc.1", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98A4000, \
+			"msm_sdcc.2", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9864000, \
+			"msm_sdcc.3", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98E4000, \
+			"msm_sdcc.4", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9824900, \
+			"msm_sdcc.1", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98A4900, \
+			"msm_sdcc.2", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9864900, \
+			"msm_sdcc.3", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98E4900, \
+			"msm_sdcc.4", NULL),
+	OF_DEV_AUXDATA("qcom,msm-rng", 0xF9BFF000, \
+			"msm_rng", NULL),
+	OF_DEV_AUXDATA("qcom,qseecom", 0xFE806000, \
+			"qseecom", NULL),
+	OF_DEV_AUXDATA("qcom,mdss_mdp", 0xFD900000, "mdp.0", NULL),
+	OF_DEV_AUXDATA("qcom,msm-tsens", 0xFC4A8000, \
+			"msm-tsens", NULL),
+	OF_DEV_AUXDATA("qcom,qcedev", 0xFD440000, \
+			"qcedev.0", NULL),
+	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, \
+			"msm_hsic_host", NULL),
+	OF_DEV_AUXDATA("qcom,hsic-smsc-hub", 0, "msm_smsc_hub",
+			msm_hsic_host_adata),
+	{}
+};
+
+/* LGE_CHANGE, yeri.lee@lge.com, 2013-10-31, wm5110 Bring up*/
+#ifdef CONFIG_MFD_WM5110
+static struct slim_device wm5110_slim_audio = {
+	.name = "wm5110-slim-audio",
+	.e_addr = {0x00, 0x00, 0x10, 0x51, 0x2f, 0x01 },
+};
+
+static struct slim_boardinfo msm_slim_devices[] = {
+	{
+		.bus_num = 1,
+		.slim_slave = &wm5110_slim_audio,
+	},
+};
+#endif
+
+static void __init msm8974_map_io(void)
+{
+	msm_map_8974_io();
+}
+
+void __init msm8974_init(void)
+{
+	struct of_dev_auxdata *adata = msm8974_auxdata_lookup;
+
+	if (socinfo_init() < 0)
+		pr_err("%s: socinfo_init() failed\n", __func__);
+
+	msm_8974_init_gpiomux();
+	regulator_has_full_constraints();
+	board_dt_populate(adata);
+	msm8974_add_drivers();
+#ifdef CONFIG_MFD_WM5110
+	/* Register the Wolfson WM5119 slimbus codec */
+	slim_register_board_info(msm_slim_devices, 1);
+#endif
+}
+
+void __init msm8974_init_very_early(void)
+{
+	msm8974_early_memory();
+}
+
+static const char *msm8974_dt_match[] __initconst = {
+	"qcom,msm8974",
+	"qcom,apq8074",
+	NULL
+};
+
+DT_MACHINE_START(MSM8974_DT, "Qualcomm MSM 8974 (Flattened Device Tree)")
+	.map_io = msm8974_map_io,
+	.init_irq = msm_dt_init_irq,
+	.init_machine = msm8974_init,
+	.handle_irq = gic_handle_irq,
+	.timer = &msm_dt_timer,
+	.dt_compat = msm8974_dt_match,
+	.reserve = msm_8974_reserve,
+	.init_very_early = msm8974_init_very_early,
+	.restart = msm_restart,
+	.smp = &msm8974_smp_ops,
+MACHINE_END
diff --git a/arch/arm/mach-msm/lge/board-8974-g3-global.c b/arch/arm/mach-msm/lge/board-8974-g3-global.c
new file mode 100644
index 0000000..2403b01
--- /dev/null
+++ b/arch/arm/mach-msm/lge/board-8974-g3-global.c
@@ -0,0 +1,248 @@
+/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/err.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/irq.h>
+#include <linux/irqdomain.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_platform.h>
+#include <linux/memory.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/krait-regulator.h>
+#include <linux/msm_tsens.h>
+#include <linux/msm_thermal.h>
+#include <asm/mach/map.h>
+#include <asm/hardware/gic.h>
+#include <asm/mach/map.h>
+#include <asm/mach/arch.h>
+#include <mach/board.h>
+#include <mach/gpiomux.h>
+#include <mach/msm_iomap.h>
+#ifdef CONFIG_ION_MSM
+#include <mach/ion.h>
+#endif
+#include <mach/msm_memtypes.h>
+#include <mach/msm_smd.h>
+#include <mach/restart.h>
+#include <mach/rpm-smd.h>
+#include <mach/rpm-regulator-smd.h>
+#include <mach/socinfo.h>
+#include <mach/msm_smem.h>
+#include "../board-dt.h"
+#include "../clock.h"
+#include "../devices.h"
+#include "../spm.h"
+#include "../pm.h"
+#include "../modem_notifier.h"
+#include "../platsmp.h"
+#include <mach/board_lge.h>
+
+#ifdef CONFIG_MFD_WM5110
+#include <linux/slimbus/slimbus.h>
+#endif
+
+static struct memtype_reserve msm8974_reserve_table[] __initdata = {
+	[MEMTYPE_SMI] = {
+	},
+	[MEMTYPE_EBI0] = {
+		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
+	},
+	[MEMTYPE_EBI1] = {
+		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
+	},
+};
+
+static int msm8974_paddr_to_memtype(phys_addr_t paddr)
+{
+	return MEMTYPE_EBI1;
+}
+
+static struct reserve_info msm8974_reserve_info __initdata = {
+	.memtype_reserve_table = msm8974_reserve_table,
+	.paddr_to_memtype = msm8974_paddr_to_memtype,
+};
+
+void __init msm_8974_reserve(void)
+{
+	reserve_info = &msm8974_reserve_info;
+	of_scan_flat_dt(dt_scan_for_memory_reserve, msm8974_reserve_table);
+#ifdef CONFIG_MACH_LGE
+	of_scan_flat_dt(lge_init_dt_scan_chosen, NULL);
+#endif
+	msm_reserve();
+	lge_reserve();
+}
+
+static void __init msm8974_early_memory(void)
+{
+	reserve_info = &msm8974_reserve_info;
+	of_scan_flat_dt(dt_scan_for_memory_hole, msm8974_reserve_table);
+}
+
+/*
+ * Used to satisfy dependencies for devices that need to be
+ * run early or in a particular order. Most likely your device doesn't fall
+ * into this category, and thus the driver should not be added here. The
+ * EPROBE_DEFER can satisfy most dependency problems.
+ */
+/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
+extern void init_bcm_wifi(void);
+#endif
+/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+
+void __init msm8974_add_drivers(void)
+{
+	msm_smem_init();
+	msm_init_modem_notifier_list();
+	msm_smd_init();
+	msm_rpm_driver_init();
+	msm_pm_sleep_status_init();
+	rpm_regulator_smd_driver_init();
+	msm_spm_device_init();
+	krait_power_init();
+	if (of_board_is_rumi())
+		msm_clock_init(&msm8974_rumi_clock_init_data);
+	else
+		msm_clock_init(&msm8974_clock_init_data);
+	tsens_tm_init_driver();
+	msm_thermal_device_init();
+	lge_add_persistent_device();
+#ifdef CONFIG_LGE_QFPROM_INTERFACE
+	lge_add_qfprom_devices();
+#endif
+/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
+	init_bcm_wifi();
+#endif
+/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+#if defined(CONFIG_LGE_PM_BATTERY_ID_CHECKER)
+	lge_battery_id_devices();
+#endif
+#ifdef CONFIG_USB_G_LGE_ANDROID
+	lge_add_android_usb_devices();
+#endif
+
+}
+
+static struct of_dev_auxdata msm_hsic_host_adata[] = {
+	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, "msm_hsic_host", NULL),
+	{}
+};
+
+static struct of_dev_auxdata msm8974_auxdata_lookup[] __initdata = {
+	OF_DEV_AUXDATA("qcom,hsusb-otg", 0xF9A55000, \
+			"msm_otg", NULL),
+	OF_DEV_AUXDATA("qcom,ehci-host", 0xF9A55000, \
+			"msm_ehci_host", NULL),
+	OF_DEV_AUXDATA("qcom,dwc-usb3-msm", 0xF9200000, \
+			"msm_dwc3", NULL),
+	OF_DEV_AUXDATA("qcom,usb-bam-msm", 0xF9304000, \
+			"usb_bam", NULL),
+	OF_DEV_AUXDATA("qcom,spi-qup-v2", 0xF9924000, \
+			"spi_qsd.1", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9824000, \
+			"msm_sdcc.1", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98A4000, \
+			"msm_sdcc.2", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9864000, \
+			"msm_sdcc.3", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98E4000, \
+			"msm_sdcc.4", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9824900, \
+			"msm_sdcc.1", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98A4900, \
+			"msm_sdcc.2", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9864900, \
+			"msm_sdcc.3", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98E4900, \
+			"msm_sdcc.4", NULL),
+	OF_DEV_AUXDATA("qcom,msm-rng", 0xF9BFF000, \
+			"msm_rng", NULL),
+	OF_DEV_AUXDATA("qcom,qseecom", 0xFE806000, \
+			"qseecom", NULL),
+	OF_DEV_AUXDATA("qcom,mdss_mdp", 0xFD900000, "mdp.0", NULL),
+	OF_DEV_AUXDATA("qcom,msm-tsens", 0xFC4A8000, \
+			"msm-tsens", NULL),
+	OF_DEV_AUXDATA("qcom,qcedev", 0xFD440000, \
+			"qcedev.0", NULL),
+	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, \
+			"msm_hsic_host", NULL),
+	OF_DEV_AUXDATA("qcom,hsic-smsc-hub", 0, "msm_smsc_hub",
+			msm_hsic_host_adata),
+	{}
+};
+
+/* LGE_CHANGE, yeri.lee@lge.com, 2013-10-31, wm5110 Bring up*/
+#ifdef CONFIG_MFD_WM5110
+static struct slim_device wm5110_slim_audio = {
+	.name = "wm5110-slim-audio",
+	.e_addr = {0x00, 0x00, 0x10, 0x51, 0x2f, 0x01 },
+};
+
+static struct slim_boardinfo msm_slim_devices[] = {
+	{
+		.bus_num = 1,
+		.slim_slave = &wm5110_slim_audio,
+	},
+};
+#endif
+
+static void __init msm8974_map_io(void)
+{
+	msm_map_8974_io();
+}
+
+void __init msm8974_init(void)
+{
+	struct of_dev_auxdata *adata = msm8974_auxdata_lookup;
+
+	if (socinfo_init() < 0)
+		pr_err("%s: socinfo_init() failed\n", __func__);
+
+	msm_8974_init_gpiomux();
+	regulator_has_full_constraints();
+	board_dt_populate(adata);
+	msm8974_add_drivers();
+#ifdef CONFIG_MFD_WM5110
+	/* Register the Wolfson WM5119 slimbus codec */
+	slim_register_board_info(msm_slim_devices, 1);
+#endif
+}
+
+void __init msm8974_init_very_early(void)
+{
+	msm8974_early_memory();
+}
+
+static const char *msm8974_dt_match[] __initconst = {
+	"qcom,msm8974",
+	"qcom,apq8074",
+	NULL
+};
+
+DT_MACHINE_START(MSM8974_DT, "Qualcomm MSM 8974 (Flattened Device Tree)")
+	.map_io = msm8974_map_io,
+	.init_irq = msm_dt_init_irq,
+	.init_machine = msm8974_init,
+	.handle_irq = gic_handle_irq,
+	.timer = &msm_dt_timer,
+	.dt_compat = msm8974_dt_match,
+	.reserve = msm_8974_reserve,
+	.init_very_early = msm8974_init_very_early,
+	.restart = msm_restart,
+	.smp = &msm8974_smp_ops,
+MACHINE_END
diff --git a/arch/arm/mach-msm/lge/board-8974-g3-global_com-gpiomux.c b/arch/arm/mach-msm/lge/board-8974-g3-global_com-gpiomux.c
new file mode 100644
index 0000000..f424c59
--- /dev/null
+++ b/arch/arm/mach-msm/lge/board-8974-g3-global_com-gpiomux.c
@@ -0,0 +1,2727 @@
+/* Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/gpio.h>
+#include <linux/init.h>
+#include <linux/ioport.h>
+#include <mach/board.h>
+#include <mach/gpio.h>
+#include <mach/gpiomux.h>
+#include <mach/socinfo.h>
+#include <mach/board_lge.h>
+
+#define KS8851_IRQ_GPIO 94
+
+#define WLAN_CLK	40
+#define WLAN_SET	39
+#define WLAN_DATA0	38
+#define WLAN_DATA1	37
+#define WLAN_DATA2	36
+
+static struct gpiomux_setting ap2mdm_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_OUT_LOW,
+};
+
+static struct gpiomux_setting mdm2ap_status_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_OUT_LOW,
+};
+
+static struct gpiomux_setting mdm2ap_errfatal_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_OUT_LOW,
+};
+
+static struct gpiomux_setting mdm2ap_pblrdy = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_IN,
+};
+
+
+static struct gpiomux_setting ap2mdm_soft_reset_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_OUT_LOW,
+};
+
+static struct gpiomux_setting ap2mdm_wakeup = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_OUT_LOW,
+};
+
+static struct msm_gpiomux_config mdm_configs[] __initdata = {
+	/* AP2MDM_STATUS */
+	{
+		.gpio = 105,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &ap2mdm_cfg,
+		}
+	},
+	/* MDM2AP_STATUS */
+	{
+		.gpio = 46,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &mdm2ap_status_cfg,
+		}
+	},
+	/* MDM2AP_ERRFATAL */
+	{
+		.gpio = 82,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &mdm2ap_errfatal_cfg,
+		}
+	},
+	/* AP2MDM_ERRFATAL */
+	{
+		.gpio = 106,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &ap2mdm_cfg,
+		}
+	},
+	/* AP2MDM_SOFT_RESET, aka AP2MDM_PON_RESET_N */
+	{
+		.gpio = 24,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &ap2mdm_soft_reset_cfg,
+		}
+	},
+	/* AP2MDM_WAKEUP */
+	{
+		.gpio = 104,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &ap2mdm_wakeup,
+		}
+	},
+	/* MDM2AP_PBL_READY*/
+	{
+		.gpio = 80,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &mdm2ap_pblrdy,
+		}
+	},
+};
+
+static struct gpiomux_setting gpio_uart_config = {
+	.func = GPIOMUX_FUNC_2,
+	.drv = GPIOMUX_DRV_16MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_OUT_HIGH,
+};
+
+static struct gpiomux_setting slimbus = {
+	.func = GPIOMUX_FUNC_1,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_KEEPER,
+};
+
+#if defined(CONFIG_KS8851) || defined(CONFIG_KS8851_MODULE)
+static struct gpiomux_setting gpio_eth_config = {
+	.pull = GPIOMUX_PULL_UP,
+	.drv = GPIOMUX_DRV_2MA,
+	.func = GPIOMUX_FUNC_GPIO,
+};
+
+static struct gpiomux_setting gpio_spi_cs2_config = {
+	.func = GPIOMUX_FUNC_4,
+	.drv = GPIOMUX_DRV_6MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting gpio_spi_config = {
+	.func = GPIOMUX_FUNC_1,
+	.drv = GPIOMUX_DRV_12MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+static struct gpiomux_setting gpio_spi_susp_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting gpio_spi_cs1_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_6MA,
+	.pull = GPIOMUX_PULL_UP,
+};
+
+static struct msm_gpiomux_config msm_eth_configs[] = {
+	{
+		.gpio = KS8851_IRQ_GPIO,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_eth_config,
+		}
+	},
+};
+#endif
+#ifndef CONFIG_MACH_LGE
+static struct gpiomux_setting gpio_suspend_config[] = {
+	{
+		.func = GPIOMUX_FUNC_GPIO,  /* IN-NP */
+		.drv = GPIOMUX_DRV_2MA,
+		.pull = GPIOMUX_PULL_NONE,
+	},
+	{
+		.func = GPIOMUX_FUNC_GPIO,  /* O-LOW */
+		.drv = GPIOMUX_DRV_2MA,
+		.pull = GPIOMUX_PULL_NONE,
+		.dir = GPIOMUX_OUT_LOW,
+	},
+};
+#endif
+static struct gpiomux_setting gpio_epm_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv  = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_OUT_HIGH,
+};
+
+static struct gpiomux_setting gpio_epm_marker_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv  = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_OUT_HIGH,
+};
+
+static struct gpiomux_setting wcnss_5wire_suspend_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv  = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+};
+
+static struct gpiomux_setting wcnss_5wire_active_cfg = {
+	.func = GPIOMUX_FUNC_1,
+	.drv  = GPIOMUX_DRV_6MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting wcnss_5gpio_suspend_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv  = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+};
+
+static struct gpiomux_setting wcnss_5gpio_active_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv  = GPIOMUX_DRV_6MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting ath_gpio_active_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+};
+
+static struct gpiomux_setting ath_gpio_suspend_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting gpio_i2c_config = {
+	.func = GPIOMUX_FUNC_3,
+	/*
+	 * Please keep I2C GPIOs drive-strength at minimum (2ma). It is a
+	 * workaround for HW issue of glitches caused by rapid GPIO current-
+	 * change.
+	 */
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting lcd_en_act_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_OUT_HIGH,
+};
+
+static struct gpiomux_setting lcd_en_sus_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting taiko_reset = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_6MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_OUT_LOW,
+};
+
+static struct gpiomux_setting taiko_int = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting touch_int_act_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_8MA,
+	.dir = GPIOMUX_IN,
+};
+
+static struct gpiomux_setting touch_int_sus_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.dir = GPIOMUX_IN,
+};
+
+static struct gpiomux_setting touch_i2c_act_cfg = {
+	.func = GPIOMUX_FUNC_3,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting touch_i2c_sus_cfg = {
+	.func = GPIOMUX_FUNC_3,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+	.dir = GPIOMUX_IN,
+};
+
+static struct gpiomux_setting touch_reset_sus_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_6MA,
+	.pull = GPIOMUX_PULL_DOWN,
+	.dir = GPIOMUX_IN,
+};
+
+static struct gpiomux_setting touch_reset_act_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_6MA,
+	.pull = GPIOMUX_PULL_DOWN,
+	.dir = GPIOMUX_IN,
+};
+
+#ifndef CONFIG_LGE_IRRC
+/* NOT USED: GPIO 86 is used as IRRC_RxD in G3 board */
+static struct gpiomux_setting hap_lvl_shft_suspended_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting hap_lvl_shft_active_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_UP,
+};
+static struct msm_gpiomux_config hap_lvl_shft_config[] __initdata = {
+	{
+		.gpio = 86,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &hap_lvl_shft_suspended_config,
+			[GPIOMUX_ACTIVE] = &hap_lvl_shft_active_config,
+		},
+	},
+};
+#endif
+
+static struct msm_gpiomux_config msm_touch_configs[] __initdata = {
+	{
+		.gpio      = 8,		/* TOUCH RESET */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &touch_reset_act_cfg,
+			[GPIOMUX_SUSPENDED] = &touch_reset_sus_cfg,
+		},
+	},
+	{
+		.gpio      = 73,		/* TOUCH IRQ */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &touch_int_act_cfg,
+			[GPIOMUX_SUSPENDED] = &touch_int_sus_cfg,
+		},
+	},
+
+};
+
+
+static struct gpiomux_setting hsic_sus_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting hsic_act_cfg = {
+	.func = GPIOMUX_FUNC_1,
+	.drv = GPIOMUX_DRV_12MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting hsic_hub_act_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+	.dir = GPIOMUX_IN,
+};
+
+static struct gpiomux_setting hsic_resume_act_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+	.dir = GPIOMUX_OUT_LOW,
+};
+
+static struct gpiomux_setting hsic_resume_susp_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct msm_gpiomux_config msm_hsic_configs[] = {
+	{
+		.gpio = 144,               /*HSIC_STROBE */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &hsic_act_cfg,
+			[GPIOMUX_SUSPENDED] = &hsic_sus_cfg,
+		},
+	},
+#ifndef CONFIG_MACH_LGE
+	{
+		.gpio = 145,               /* HSIC_DATA */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &hsic_act_cfg,
+			[GPIOMUX_SUSPENDED] = &hsic_sus_cfg,
+		},
+	},
+#endif
+	{
+		.gpio = 80,
+		.settings = {
+			[GPIOMUX_ACTIVE] = &hsic_resume_act_cfg,
+			[GPIOMUX_SUSPENDED] = &hsic_resume_susp_cfg,
+		},
+	},
+};
+
+static struct msm_gpiomux_config msm_hsic_hub_configs[] = {
+	{
+		.gpio = 50,               /* HSIC_HUB_INT_N */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &hsic_hub_act_cfg,
+			[GPIOMUX_SUSPENDED] = &hsic_sus_cfg,
+		},
+	},
+};
+
+/*                                                                   */
+static struct gpiomux_setting hall_ic_act_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+	.dir = GPIOMUX_IN,
+};
+
+static struct msm_gpiomux_config msm_hall_ic_configs[] = {
+	{
+		.gpio = 103,
+		.settings = {
+			[GPIOMUX_ACTIVE] = &hall_ic_act_cfg,
+		},
+	},
+	{
+		.gpio = 144,
+		.settings = {
+			[GPIOMUX_ACTIVE] = &hall_ic_act_cfg,
+		},
+	},
+};
+/*                                                                   */
+
+
+static struct gpiomux_setting mhl_suspend_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting mhl_active_1_cfg = {
+	.func = GPIOMUX_FUNC_1,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+	.dir = GPIOMUX_OUT_HIGH,
+};
+
+static struct gpiomux_setting hdmi_suspend_1_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+};
+
+static struct gpiomux_setting hdmi_suspend_2_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting hdmi_active_1_cfg = {
+	.func = GPIOMUX_FUNC_1,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+};
+
+static struct gpiomux_setting hdmi_active_2_cfg = {
+	.func = GPIOMUX_FUNC_1,
+	.drv = GPIOMUX_DRV_16MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct msm_gpiomux_config msm_mhl_configs[] __initdata = {
+	{
+		/* mhl-sii8334 pwr */
+		.gpio = 12,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &mhl_suspend_config,
+			[GPIOMUX_ACTIVE]    = &mhl_active_1_cfg,
+		},
+	},
+	{
+		/* mhl-sii8334 intr */
+		.gpio = 82,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &mhl_suspend_config,
+			[GPIOMUX_ACTIVE]    = &mhl_active_1_cfg,
+		},
+	},
+};
+
+
+static struct msm_gpiomux_config msm_hdmi_configs[] __initdata = {
+	{
+		.gpio = 31,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &hdmi_active_1_cfg,
+			[GPIOMUX_SUSPENDED] = &hdmi_suspend_1_cfg,
+		},
+	},
+	{
+		.gpio = 32,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &hdmi_active_1_cfg,
+			[GPIOMUX_SUSPENDED] = &hdmi_suspend_1_cfg,
+		},
+	},
+	{
+		.gpio = 33,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &hdmi_active_1_cfg,
+			[GPIOMUX_SUSPENDED] = &hdmi_suspend_1_cfg,
+		},
+	},
+	{
+		.gpio = 34,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &hdmi_active_2_cfg,
+			[GPIOMUX_SUSPENDED] = &hdmi_suspend_2_cfg,
+		},
+	},
+};
+
+static struct gpiomux_setting gpio_uart7_active_cfg = {
+	.func = GPIOMUX_FUNC_3,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting gpio_uart7_suspend_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct msm_gpiomux_config msm_blsp2_uart7_configs[] __initdata = {
+	{
+		.gpio	= 41,	/* BLSP2 UART7 TX */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &gpio_uart7_active_cfg,
+			[GPIOMUX_SUSPENDED] = &gpio_uart7_suspend_cfg,
+		},
+	},
+	{
+		.gpio	= 42,	/* BLSP2 UART7 RX */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &gpio_uart7_active_cfg,
+			[GPIOMUX_SUSPENDED] = &gpio_uart7_suspend_cfg,
+		},
+	},
+	{
+		.gpio	= 43,	/* BLSP2 UART7 CTS */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &gpio_uart7_active_cfg,
+			[GPIOMUX_SUSPENDED] = &gpio_uart7_suspend_cfg,
+		},
+	},
+	{
+		.gpio	= 44,	/* BLSP2 UART7 RFR */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &gpio_uart7_active_cfg,
+			[GPIOMUX_SUSPENDED] = &gpio_uart7_suspend_cfg,
+		},
+	},
+};
+
+static struct msm_gpiomux_config msm_rumi_blsp_configs[] __initdata = {
+	{
+		.gpio      = 45,	/* BLSP2 UART8 TX */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_uart_config,
+		},
+	},
+	{
+		.gpio      = 46,	/* BLSP2 UART8 RX */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_uart_config,
+		},
+	},
+};
+
+static struct msm_gpiomux_config msm_lcd_configs[] __initdata = {
+	{
+		.gpio = 58,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &lcd_en_act_cfg,
+			[GPIOMUX_SUSPENDED] = &lcd_en_sus_cfg,
+		},
+	},
+};
+
+static struct msm_gpiomux_config msm_epm_configs[] __initdata = {
+	{
+		.gpio      = 81,		/* EPM enable */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_epm_config,
+		},
+	},
+	{
+		.gpio      = 85,		/* EPM MARKER2 */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_epm_marker_config,
+		},
+	},
+	{
+		.gpio      = 96,		/* EPM MARKER1 */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_epm_marker_config,
+		},
+	},
+};
+
+static struct msm_gpiomux_config msm_blsp_configs[] __initdata = {
+#if defined(CONFIG_KS8851) || defined(CONFIG_KS8851_MODULE)
+	{
+		.gpio      = 0,		/* BLSP1 QUP SPI_DATA_MOSI */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &gpio_spi_config,
+			[GPIOMUX_SUSPENDED] = &gpio_spi_susp_config,
+		},
+	},
+	{
+		.gpio      = 1,		/* BLSP1 QUP SPI_DATA_MISO */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &gpio_spi_config,
+			[GPIOMUX_SUSPENDED] = &gpio_spi_susp_config,
+		},
+	},
+	{
+		.gpio      = 3,		/* BLSP1 QUP SPI_CLK */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &gpio_spi_config,
+			[GPIOMUX_SUSPENDED] = &gpio_spi_susp_config,
+		},
+	},
+	{
+		.gpio      = 9,		/* BLSP1 QUP SPI_CS2A_N */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &gpio_spi_cs2_config,
+			[GPIOMUX_SUSPENDED] = &gpio_spi_susp_config,
+		},
+	},
+	{
+		.gpio      = 8,		/* BLSP1 QUP SPI_CS1_N */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &gpio_spi_cs1_config,
+			[GPIOMUX_SUSPENDED] = &gpio_spi_susp_config,
+		},
+	},
+#endif
+	{
+		.gpio      = 6,		/* BLSP1 QUP2 I2C_DAT */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &touch_i2c_sus_cfg,
+			[GPIOMUX_ACTIVE] = &touch_i2c_act_cfg,
+		},
+	},
+	{
+		.gpio      = 7,		/* BLSP1 QUP2 I2C_CLK */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &touch_i2c_sus_cfg,
+			[GPIOMUX_ACTIVE] = &touch_i2c_act_cfg,
+		},
+	},
+	{
+		.gpio      = 83,		/* BLSP11 QUP I2C_DAT */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_i2c_config,
+		},
+	},
+	{
+		.gpio      = 84,		/* BLSP11 QUP I2C_CLK */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_i2c_config,
+		},
+	},
+
+#ifdef CONFIG_LGE_IRRC
+	{
+		.gpio	   = 85,		/* BLSP2 UART TX */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_uart_config,
+		},
+	},
+	{
+		.gpio	   = 86,		/* BLSP2 UART RX */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_uart_config,
+		},
+	},
+#endif
+
+#ifdef CONFIG_MACH_LGE
+	{
+		.gpio      = 0,                 /* BLSP2 UART TX */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_uart_config,
+		},
+	},
+	{
+		.gpio      = 1,                 /* BLSP2 UART RX */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_uart_config,
+		},
+	},
+#else   /*QCT Original code */
+	{
+		.gpio      = 4,			/* BLSP2 UART TX */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_uart_config,
+		},
+	},
+	{
+		.gpio      = 5,			/* BLSP2 UART RX */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_uart_config,
+		},
+	},
+#endif
+#ifndef CONFIG_MACH_LGE
+	{                           /* NFC */
+		.gpio      = 29,		/* BLSP1 QUP6 I2C_DAT */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_i2c_config,
+		},
+	},
+	{                           /* NFC */
+		.gpio      = 30,		/* BLSP1 QUP6 I2C_CLK */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_i2c_config,
+		},
+	},
+	{
+		.gpio      = 53,		/* BLSP2 QUP4 SPI_DATA_MOSI */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &gpio_spi_config,
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+	{
+		.gpio      = 54,		/* BLSP2 QUP4 SPI_DATA_MISO */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &gpio_spi_config,
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+	{
+		.gpio      = 56,		/* BLSP2 QUP4 SPI_CLK */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &gpio_spi_config,
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[0],
+		},
+	},
+	{
+		.gpio      = 55,		/* BLSP2 QUP4 SPI_CS0_N */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &gpio_spi_config,
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[0],
+		},
+	},
+#endif
+};
+
+static struct msm_gpiomux_config msm8974_slimbus_config[] __initdata = {
+	{
+		.gpio	= 70,		/* slimbus clk */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &slimbus,
+		},
+	},
+	{
+		.gpio	= 71,		/* slimbus data */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &slimbus,
+		},
+	},
+};
+
+#ifdef CONFIG_SND_SOC_CS35L32
+static struct gpiomux_setting qua_mi2s_act_cfg = {
+	.func = GPIOMUX_FUNC_1,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting qua_mi2s_sus_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct msm_gpiomux_config msm8974_qua_mi2s_configs[] __initdata = {
+	{
+		.gpio = 57,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &qua_mi2s_sus_cfg,
+			[GPIOMUX_ACTIVE] = &qua_mi2s_act_cfg,
+		},
+	},
+	{
+		.gpio = 58,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &qua_mi2s_sus_cfg,
+			[GPIOMUX_ACTIVE] = &qua_mi2s_act_cfg,
+		},
+	},
+	{
+		.gpio = 59,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &qua_mi2s_sus_cfg,
+			[GPIOMUX_ACTIVE] = &qua_mi2s_act_cfg,
+		},
+	},
+	{
+		.gpio = 60,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &qua_mi2s_sus_cfg,
+			[GPIOMUX_ACTIVE] = &qua_mi2s_act_cfg,
+		},
+	},
+};
+#endif
+
+static struct gpiomux_setting cam_settings[] = {
+	{
+		.func = GPIOMUX_FUNC_1, /*active 1*/ /* 0 */
+		.drv = GPIOMUX_DRV_2MA,
+		.pull = GPIOMUX_PULL_NONE,
+	},
+
+	{
+		.func = GPIOMUX_FUNC_1, /*suspend*/ /* 1 */
+		.drv = GPIOMUX_DRV_2MA,
+		.pull = GPIOMUX_PULL_DOWN,
+	},
+
+	{
+		.func = GPIOMUX_FUNC_1, /*i2c suspend*/ /* 2 */
+		.drv = GPIOMUX_DRV_2MA,
+		.pull = GPIOMUX_PULL_KEEPER,
+	},
+
+	{
+		.func = GPIOMUX_FUNC_GPIO, /*active 0*/ /* 3 */
+		.drv = GPIOMUX_DRV_2MA,
+		.pull = GPIOMUX_PULL_NONE,
+	},
+
+	{
+		.func = GPIOMUX_FUNC_GPIO, /*suspend 0*/ /* 4 */
+		.drv = GPIOMUX_DRV_2MA,
+		.pull = GPIOMUX_PULL_DOWN,
+	},
+
+	{
+		.func = GPIOMUX_FUNC_GPIO, /*active 2*/ /* 5 */ /* for INPUT pin */
+		.drv = GPIOMUX_DRV_8MA,
+		.pull = GPIOMUX_PULL_UP,
+		.dir = GPIOMUX_IN,
+	},
+
+	{
+		.func = GPIOMUX_FUNC_GPIO, /*suspend 2*/ /* 6 */ /* for INPUT pin */
+		.drv = GPIOMUX_DRV_8MA,
+		.pull = GPIOMUX_PULL_NONE,
+		.dir = GPIOMUX_IN,
+	},
+
+};
+
+#ifdef CONFIG_MACH_LGE
+static struct gpiomux_setting sd_card_det_active_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+	.dir = GPIOMUX_IN,
+};
+#else
+static struct gpiomux_setting sd_card_det_active_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_IN,
+};
+#endif
+
+static struct gpiomux_setting sd_card_det_sleep_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+	.dir = GPIOMUX_IN,
+};
+
+#ifdef CONFIG_MACH_LGE
+static struct msm_gpiomux_config sd_card_det __initdata = {
+	.gpio = 95,
+	.settings = {
+		[GPIOMUX_ACTIVE]    = &sd_card_det_active_config,
+		[GPIOMUX_SUSPENDED] = &sd_card_det_sleep_config,
+	},
+};
+#else
+static struct msm_gpiomux_config sd_card_det __initdata = {
+	.gpio = 62,
+	.settings = {
+		[GPIOMUX_ACTIVE]    = &sd_card_det_active_config,
+		[GPIOMUX_SUSPENDED] = &sd_card_det_sleep_config,
+	},
+};
+#endif
+
+#if defined(CONFIG_MACH_LGE)
+#if 0
+static struct msm_gpiomux_config msm_sensor_configs[] __initdata = {
+	{
+		.gpio = 15, /* CAM_MCLK0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 16, /* CAM_MCLK1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 17, /* CAM_MCLK2 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 18, /* WEBCAM1_RESET_N / CAM_MCLK3 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 19, /* CCI_I2C_SDA0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[0],
+		},
+	},
+	{
+		.gpio = 20, /* CCI_I2C_SCL0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[0],
+		},
+	},
+	{
+		.gpio = 21, /* CCI_I2C_SDA1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[0],
+		},
+	},
+	{
+		.gpio = 22, /* CCI_I2C_SCL1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[0],
+		},
+	},
+	{
+		.gpio = 23, /* FLASH_LED_EN */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+	{
+		.gpio = 24, /* FLASH_LED_NOW */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+	{
+		.gpio = 25, /* WEBCAM2_RESET_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+	{
+		.gpio = 26, /* CAM_IRQ */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 27, /* OIS_SYNC */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+#ifndef CONFIG_MACH_LGE
+	{
+		.gpio = 28, /* WEBCAM1_STANDBY */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+#endif
+	{
+		.gpio = 89, /* CAM1_STANDBY_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+	{
+		.gpio = 90, /* CAM1_RST_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+	{
+		.gpio = 91, /* CAM2_STANDBY_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+/*                                                             */
+#if defined(CONFIG_LGE_NFC) || defined(CONFIG_NFC_BCM2079X) || defined(CONFIG_LGE_NFC_PN547_C2)
+#else
+	{
+		.gpio = 92, /* CAM2_RST_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+#endif
+/*                                                           */
+
+};
+
+static struct msm_gpiomux_config msm_sensor_configs_dragonboard[] __initdata = {
+	{
+		.gpio = 15, /* CAM_MCLK0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 16, /* CAM_MCLK1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 17, /* CAM_MCLK2 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 18, /* WEBCAM1_RESET_N / CAM_MCLK3 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 19, /* CCI_I2C_SDA0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[0],
+		},
+	},
+	{
+		.gpio = 20, /* CCI_I2C_SCL0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[0],
+		},
+	},
+	{
+		.gpio = 21, /* CCI_I2C_SDA1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[0],
+		},
+	},
+	{
+		.gpio = 22, /* CCI_I2C_SCL1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[0],
+		},
+	},
+	{
+		.gpio = 23, /* FLASH_LED_EN */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+	{
+		.gpio = 24, /* FLASH_LED_NOW */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+	{
+		.gpio = 25, /* WEBCAM2_RESET_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+	{
+		.gpio = 26, /* CAM_IRQ */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 27, /* OIS_SYNC */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+#ifndef CONFIG_MACH_LGE
+	{
+		.gpio = 28, /* WEBCAM1_STANDBY */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+#endif
+	{
+		.gpio = 89, /* CAM1_STANDBY_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+	{
+		.gpio = 90, /* CAM1_RST_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+	{
+		.gpio = 91, /* CAM2_STANDBY_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+/*                                                             */
+#if defined(CONFIG_LGE_NFC) || defined(CONFIG_NFC_BCM2079X) || defined(CONFIG_LGE_NFC_PN547_C2)
+#else
+	{
+		.gpio = 94, /* CAM2_RST_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &gpio_suspend_config[1],
+		},
+	},
+#endif
+/*                                                           */
+};
+#endif
+/* EVB */
+static struct msm_gpiomux_config msm_sensor_configs_evb[] __initdata = {
+	{
+		.gpio = 15, /* CAM_MCLK0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 16, /* 13M_VANA / CAM_MCLK1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 17, /* CAM_MCLK2 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 18, /* CAM2_RST_N / CAM_MCLK3 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 19, /* CCI_I2C_SDA0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[2],
+		},
+	},
+	{
+		.gpio = 20, /* CCI_I2C_SCL0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[2],
+		},
+	},
+	{
+		.gpio = 21, /* CCI_I2C_SDA1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[2],
+		},
+	},
+	{
+		.gpio = 22, /* CCI_I2C_SCL1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[2],
+		},
+	},
+	{
+		.gpio = 29, /* OIS_RESET */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 30, /* AF_MVDD */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 43, /* FLASH_LED_STROBE */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 49, /* CAM1_RST_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 57, /* 13M_VCM_EN */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 145, /* OIS_LDO_EN */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 96, /* 13M_VIO */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+};
+/* REV A*/
+static struct msm_gpiomux_config msm_sensor_configs_rev_a[] __initdata = {
+	{
+		.gpio = 4, /* CAM1_RST_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 15, /* CAM_MCLK0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 16, /* 13M_VANA / CAM_MCLK1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 17, /* CAM_MCLK2 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 18, /* CAM2_RST_N  / CAM_MCLK3 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 19, /* CCI_I2C_SDA0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[2],
+		},
+	},
+	{
+		.gpio = 20, /* CCI_I2C_SCL0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[2],
+		},
+	},
+	{
+		.gpio = 21, /* CCI_I2C_SDA1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[2],
+		},
+	},
+	{
+		.gpio = 22, /* CCI_I2C_SCL1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[2],
+		},
+	},
+	{
+		.gpio = 29, /* OIS_RESET */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 30, /* AF_MVDD */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 43, /* FLASH_LED_STROBE */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+#if 0 /* from REV A , pm_gpio_4 */
+	{
+		.gpio = 57, /* 13M_VCM_EN */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+#endif
+	{
+		.gpio = 96, /* 13M_VIO */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 145, /* OIS_LDO_EN */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+};
+
+/* REV B*/
+static struct msm_gpiomux_config msm_sensor_configs_rev_a1[] __initdata = {
+	{
+		.gpio = 4, /* CAM1_RST_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 15, /* CAM_MCLK0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 16, /* 13M_VANA / CAM_MCLK1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 17, /* CAM_MCLK2 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[1],
+		},
+	},
+	{
+		.gpio = 18, /* CAM2_RST_N  / CAM_MCLK3 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 19, /* CCI_I2C_SDA0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[2],
+		},
+	},
+	{
+		.gpio = 20, /* CCI_I2C_SCL0 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[2],
+		},
+	},
+	{
+		.gpio = 21, /* CCI_I2C_SDA1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[2],
+		},
+	},
+	{
+		.gpio = 22, /* CCI_I2C_SCL1 */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[0],
+			[GPIOMUX_SUSPENDED] = &cam_settings[2],
+		},
+	},
+	{
+		.gpio = 29, /* OIS_RESET */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 30, /* OIS_ANA/OIS_DIG */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 89, /* VT_CAM_EN */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 96, /* 13M_VIO */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 145, /* VCM_LDO_EN */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[3],
+			[GPIOMUX_SUSPENDED] = &cam_settings[4],
+		},
+	},
+	{
+		.gpio = 61, /* LDAF_INT */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &cam_settings[5],
+			[GPIOMUX_SUSPENDED] = &cam_settings[6],
+		},
+	},
+};
+
+#endif /*                              */
+static struct gpiomux_setting auxpcm_act_cfg = {
+	.func = GPIOMUX_FUNC_1,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+
+static struct gpiomux_setting auxpcm_sus_cfg = {
+	.func = GPIOMUX_FUNC_1,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+#ifdef CONFIG_SND_SOC_TPA2015D
+static struct gpiomux_setting tpa2015d_extamp_cfg_gpio4 = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+	.dir = GPIOMUX_OUT_LOW,
+};
+
+static struct msm_gpiomux_config tpa2015d_extamp_configs[] = {
+	{
+		.gpio = 4,
+		.settings = {
+			[GPIOMUX_ACTIVE] = &tpa2015d_extamp_cfg_gpio4,
+		},
+	},
+};
+#endif
+
+/* Primary AUXPCM port sharing GPIO lines with Primary MI2S */
+#ifndef CONFIG_MACH_LGE
+static struct msm_gpiomux_config msm8974_pri_pri_auxpcm_configs[] __initdata = {
+	{
+		.gpio = 65,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &auxpcm_sus_cfg,
+			[GPIOMUX_ACTIVE] = &auxpcm_act_cfg,
+		},
+	},
+	{
+		.gpio = 66,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &auxpcm_sus_cfg,
+			[GPIOMUX_ACTIVE] = &auxpcm_act_cfg,
+		},
+	},
+	{
+		.gpio = 67,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &auxpcm_sus_cfg,
+			[GPIOMUX_ACTIVE] = &auxpcm_act_cfg,
+		},
+	},
+
+	{
+		.gpio = 68,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &auxpcm_sus_cfg,
+			[GPIOMUX_ACTIVE] = &auxpcm_act_cfg,
+		},
+	},
+};
+#endif
+
+/* Primary AUXPCM port sharing GPIO lines with Tertiary MI2S */
+static struct msm_gpiomux_config msm8974_pri_ter_auxpcm_configs[] __initdata = {
+	{
+		.gpio = 74,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &auxpcm_sus_cfg,
+			[GPIOMUX_ACTIVE] = &auxpcm_act_cfg,
+		},
+	},
+	{
+		.gpio = 75,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &auxpcm_sus_cfg,
+			[GPIOMUX_ACTIVE] = &auxpcm_act_cfg,
+		},
+	},
+	{
+		.gpio = 76,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &auxpcm_sus_cfg,
+			[GPIOMUX_ACTIVE] = &auxpcm_act_cfg,
+		},
+	},
+	{
+		.gpio = 77,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &auxpcm_sus_cfg,
+			[GPIOMUX_ACTIVE] = &auxpcm_act_cfg,
+		},
+	},
+};
+
+static struct msm_gpiomux_config msm8974_sec_auxpcm_configs[] __initdata = {
+	{
+		.gpio = 79,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &auxpcm_sus_cfg,
+			[GPIOMUX_ACTIVE] = &auxpcm_act_cfg,
+		},
+	},
+	{
+		.gpio = 80,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &auxpcm_sus_cfg,
+			[GPIOMUX_ACTIVE] = &auxpcm_act_cfg,
+		},
+	},
+	{
+		.gpio = 81,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &auxpcm_sus_cfg,
+			[GPIOMUX_ACTIVE] = &auxpcm_act_cfg,
+		},
+	},
+	{
+		.gpio = 82,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &auxpcm_sus_cfg,
+			[GPIOMUX_ACTIVE] = &auxpcm_act_cfg,
+		},
+	},
+};
+
+static struct msm_gpiomux_config wcnss_5wire_interface[] = {
+	{
+		.gpio = 36,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &wcnss_5wire_active_cfg,
+			[GPIOMUX_SUSPENDED] = &wcnss_5wire_suspend_cfg,
+		},
+	},
+	{
+		.gpio = 37,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &wcnss_5wire_active_cfg,
+			[GPIOMUX_SUSPENDED] = &wcnss_5wire_suspend_cfg,
+		},
+	},
+	{
+		.gpio = 38,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &wcnss_5wire_active_cfg,
+			[GPIOMUX_SUSPENDED] = &wcnss_5wire_suspend_cfg,
+		},
+	},
+	{
+		.gpio = 39,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &wcnss_5wire_active_cfg,
+			[GPIOMUX_SUSPENDED] = &wcnss_5wire_suspend_cfg,
+		},
+	},
+	{
+		.gpio = 40,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &wcnss_5wire_active_cfg,
+			[GPIOMUX_SUSPENDED] = &wcnss_5wire_suspend_cfg,
+		},
+	},
+};
+
+static struct msm_gpiomux_config wcnss_5gpio_interface[] = {
+	{
+		.gpio = 36,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &wcnss_5gpio_active_cfg,
+			[GPIOMUX_SUSPENDED] = &wcnss_5gpio_suspend_cfg,
+		},
+	},
+	{
+		.gpio = 37,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &wcnss_5gpio_active_cfg,
+			[GPIOMUX_SUSPENDED] = &wcnss_5gpio_suspend_cfg,
+		},
+	},
+	{
+		.gpio = 38,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &wcnss_5gpio_active_cfg,
+			[GPIOMUX_SUSPENDED] = &wcnss_5gpio_suspend_cfg,
+		},
+	},
+	{
+		.gpio = 39,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &wcnss_5gpio_active_cfg,
+			[GPIOMUX_SUSPENDED] = &wcnss_5gpio_suspend_cfg,
+		},
+	},
+	{
+		.gpio = 40,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &wcnss_5gpio_active_cfg,
+			[GPIOMUX_SUSPENDED] = &wcnss_5gpio_suspend_cfg,
+		},
+	},
+};
+
+static struct msm_gpiomux_config ath_gpio_configs[] = {
+	{
+		.gpio = 51,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &ath_gpio_active_cfg,
+			[GPIOMUX_SUSPENDED] = &ath_gpio_suspend_cfg,
+		},
+	},
+	{
+		.gpio = 79,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &ath_gpio_active_cfg,
+			[GPIOMUX_SUSPENDED] = &ath_gpio_suspend_cfg,
+		},
+	},
+};
+
+static struct msm_gpiomux_config msm_taiko_config[] __initdata = {
+	{
+		.gpio	= 63,		/* SYS_RST_N */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &taiko_reset,
+		},
+	},
+	{
+		.gpio	= 72,		/* CDC_INT */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &taiko_int,
+		},
+	},
+};
+
+#ifdef CONFIG_SLIMPORT_ANX7816
+static struct gpiomux_setting slimport_int_sus_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+	.dir = GPIOMUX_IN,
+};
+
+static struct msm_gpiomux_config slimport_configs[] __initdata = {
+	{
+		.gpio      = 28,        /* SLIMPORT IRQ */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &slimport_int_sus_cfg,
+		},
+	},
+
+};
+#endif
+
+#ifdef CONFIG_SWITCH_MAX1462X
+static struct gpiomux_setting headset_active_cfg_gpio65  = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+	.dir  = GPIOMUX_IN,
+};
+
+static struct gpiomux_setting headset_active_cfg_gpio64  = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_UP,
+	.dir  = GPIOMUX_IN,
+};
+
+static struct msm_gpiomux_config headset_configs[]  = {
+	{
+		.gpio = 64,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &headset_active_cfg_gpio64,
+		},
+	},
+
+	{
+		.gpio = 65,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &headset_active_cfg_gpio65,
+		},
+	},
+};
+#endif
+
+#if defined(CONFIG_LGE_SM100) || defined(CONFIG_TSPDRV)
+static struct gpiomux_setting vibrator_suspend_cfg = {
+       .func = GPIOMUX_FUNC_GPIO,
+       .drv = GPIOMUX_DRV_2MA,
+       .pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting vibrator_active_cfg_gpio27 = {
+       .func = GPIOMUX_FUNC_6,
+       .drv = GPIOMUX_DRV_2MA,
+       .pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting vibrator_active_cfg_gpio60 = {
+       .func = GPIOMUX_FUNC_GPIO,
+       .drv = GPIOMUX_DRV_2MA,
+       .pull = GPIOMUX_PULL_NONE,
+};
+
+static struct msm_gpiomux_config vibrator_configs_evb[] = {
+	{
+		.gpio = 27,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &vibrator_active_cfg_gpio27,
+			[GPIOMUX_SUSPENDED] = &vibrator_suspend_cfg,
+		},
+	},
+	{
+		.gpio = 60,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &vibrator_active_cfg_gpio60,
+			[GPIOMUX_SUSPENDED] = &vibrator_suspend_cfg,
+		},
+	},
+};
+
+static struct msm_gpiomux_config vibrator_configs[] = {
+	{
+		.gpio = 27,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &vibrator_active_cfg_gpio27,
+			[GPIOMUX_SUSPENDED] = &vibrator_suspend_cfg,
+		},
+	},
+	{
+		.gpio = 53,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &vibrator_active_cfg_gpio60,
+			[GPIOMUX_SUSPENDED] = &vibrator_suspend_cfg,
+		},
+	},
+};
+#endif
+static struct gpiomux_setting sdc3_clk_actv_cfg = {
+	.func = GPIOMUX_FUNC_2,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting sdc3_cmd_data_0_3_actv_cfg = {
+	.func = GPIOMUX_FUNC_2,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_UP,
+};
+
+static struct gpiomux_setting sdc3_suspend_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting sdc3_data_1_suspend_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_UP,
+};
+
+static struct msm_gpiomux_config msm8974_sdc3_configs[] __initdata = {
+	{
+		/* DAT3 */
+		.gpio      = 35,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &sdc3_cmd_data_0_3_actv_cfg,
+			[GPIOMUX_SUSPENDED] = &sdc3_suspend_cfg,
+		},
+	},
+	{
+		/* DAT2 */
+		.gpio      = 36,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &sdc3_cmd_data_0_3_actv_cfg,
+			[GPIOMUX_SUSPENDED] = &sdc3_suspend_cfg,
+		},
+	},
+	{
+		/* DAT1 */
+		.gpio      = 37,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &sdc3_cmd_data_0_3_actv_cfg,
+			[GPIOMUX_SUSPENDED] = &sdc3_data_1_suspend_cfg,
+		},
+	},
+	{
+		/* DAT0 */
+		.gpio      = 38,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &sdc3_cmd_data_0_3_actv_cfg,
+			[GPIOMUX_SUSPENDED] = &sdc3_suspend_cfg,
+		},
+	},
+	{
+		/* CMD */
+		.gpio      = 39,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &sdc3_cmd_data_0_3_actv_cfg,
+			[GPIOMUX_SUSPENDED] = &sdc3_suspend_cfg,
+		},
+	},
+	{
+		/* CLK */
+		.gpio      = 40,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &sdc3_clk_actv_cfg,
+			[GPIOMUX_SUSPENDED] = &sdc3_suspend_cfg,
+		},
+	},
+};
+
+static void msm_gpiomux_sdc3_install(void)
+{
+	msm_gpiomux_install(msm8974_sdc3_configs,
+			    ARRAY_SIZE(msm8974_sdc3_configs));
+}
+
+#ifdef CONFIG_MMC_MSM_SDC4_SUPPORT
+static struct gpiomux_setting sdc4_clk_actv_cfg = {
+	.func = GPIOMUX_FUNC_2,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting sdc4_cmd_data_0_3_actv_cfg = {
+	.func = GPIOMUX_FUNC_2,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_UP,
+};
+
+static struct gpiomux_setting sdc4_suspend_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting sdc4_data_1_suspend_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_UP,
+};
+
+static struct msm_gpiomux_config msm8974_sdc4_configs[] __initdata = {
+	{
+/*                                                             */
+#if defined(CONFIG_LGE_NFC) || defined(CONFIG_NFC_BCM2079X) || defined(CONFIG_LGE_NFC_PN547_C2)
+#else
+		/* DAT3 */
+		.gpio      = 92,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &sdc4_cmd_data_0_3_actv_cfg,
+			[GPIOMUX_SUSPENDED] = &sdc4_suspend_cfg,
+		},
+	},
+	{
+		/* DAT2 */
+		.gpio      = 94,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &sdc4_cmd_data_0_3_actv_cfg,
+			[GPIOMUX_SUSPENDED] = &sdc4_suspend_cfg,
+		},
+	},
+#endif
+/*                                                           */
+
+	{
+		/* DAT1 */
+		.gpio      = 95,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &sdc4_cmd_data_0_3_actv_cfg,
+			[GPIOMUX_SUSPENDED] = &sdc4_data_1_suspend_cfg,
+		},
+	},
+	{
+		/* DAT0 */
+		.gpio      = 96,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &sdc4_cmd_data_0_3_actv_cfg,
+			[GPIOMUX_SUSPENDED] = &sdc4_suspend_cfg,
+		},
+	},
+	{
+		/* CMD */
+		.gpio      = 91,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &sdc4_cmd_data_0_3_actv_cfg,
+			[GPIOMUX_SUSPENDED] = &sdc4_suspend_cfg,
+		},
+	},
+	{
+		/* CLK */
+		.gpio      = 93,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &sdc4_clk_actv_cfg,
+			[GPIOMUX_SUSPENDED] = &sdc4_suspend_cfg,
+		},
+	},
+};
+
+static void msm_gpiomux_sdc4_install(void)
+{
+	msm_gpiomux_install(msm8974_sdc4_configs,
+			    ARRAY_SIZE(msm8974_sdc4_configs));
+}
+#else
+static void msm_gpiomux_sdc4_install(void) {}
+#endif /* CONFIG_MMC_MSM_SDC4_SUPPORT */
+
+/*                                                        */
+#ifdef CONFIG_LGE_BLUETOOTH
+static struct gpiomux_setting bt_blsp5_uart_tx_config = {
+    .func = GPIOMUX_FUNC_3,
+    .drv = GPIOMUX_DRV_8MA,
+    .pull = GPIOMUX_PULL_NONE, /* Should be PULL NONE */
+};
+
+static struct gpiomux_setting bt_blsp5_uart_rx_config = {
+    .func = GPIOMUX_FUNC_3,
+    .drv = GPIOMUX_DRV_8MA,
+    .pull = GPIOMUX_PULL_NONE, /* Should be PULL NONE */
+};
+
+static struct gpiomux_setting bt_blsp5_uart_cts_config = {
+    .func = GPIOMUX_FUNC_3,
+    .drv = GPIOMUX_DRV_8MA,
+    .pull = GPIOMUX_PULL_NONE, /* Should be PULL NONE */
+};
+
+static struct gpiomux_setting bt_blsp5_uart_rfr_config = {
+    .func = GPIOMUX_FUNC_4,
+    .drv = GPIOMUX_DRV_8MA,
+    .pull = GPIOMUX_PULL_NONE, /* Should be PULL NONE */
+};
+
+static struct gpiomux_setting bt_gpio_uart_suspend_config = {
+    .func = GPIOMUX_FUNC_GPIO,
+    .drv = GPIOMUX_DRV_2MA,
+    .pull = GPIOMUX_PULL_NONE, /* PULL Configuration */
+};
+
+static struct gpiomux_setting bt_rfkill_active_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv  = GPIOMUX_DRV_6MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting bt_rfkill_suspend_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv  = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting bt_host_wakeup_active_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_IN,
+};
+
+static struct gpiomux_setting bt_host_wakeup_suspend_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_IN,
+};
+
+static struct gpiomux_setting bt_wakeup_active_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting bt_wakeup_suspend_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting bt_pcm_active_config = {
+	.func = GPIOMUX_FUNC_1,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting bt_pcm_suspend_config = {
+	.func = GPIOMUX_FUNC_1,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct msm_gpiomux_config bt_msm_blsp_configs[] __initdata = {
+	{
+		.gpio = 23, /* BLSP1 UART5 TX */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &bt_blsp5_uart_tx_config ,
+			[GPIOMUX_SUSPENDED] = &bt_gpio_uart_suspend_config ,
+		},
+	},
+	{
+		.gpio = 24, /* BLSP1 UART5 RX */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &bt_blsp5_uart_rx_config ,
+			[GPIOMUX_SUSPENDED] = &bt_gpio_uart_suspend_config ,
+		},
+	},
+	{
+		.gpio = 25, /* BLSP1 UART5 CTS */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &bt_blsp5_uart_cts_config ,
+			[GPIOMUX_SUSPENDED] = &bt_gpio_uart_suspend_config ,
+		},
+	},
+	{
+		.gpio = 26, /* BLSP1 UART5 RFR */
+		.settings = {
+			[GPIOMUX_ACTIVE] = &bt_blsp5_uart_rfr_config ,
+			[GPIOMUX_SUSPENDED] = &bt_gpio_uart_suspend_config ,
+		},
+	},
+};
+
+static struct msm_gpiomux_config bt_rfkill_configs[] = {
+	{
+		.gpio = 41,	/* BT_RESET_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &bt_rfkill_active_config,
+			[GPIOMUX_SUSPENDED] = &bt_rfkill_suspend_config,
+		},
+	},
+};
+
+static struct msm_gpiomux_config bt_host_wakeup_configs[] __initdata = {
+	{
+		.gpio = 42,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &bt_host_wakeup_active_config,
+			[GPIOMUX_SUSPENDED] = &bt_host_wakeup_suspend_config,
+		},
+	},
+};
+
+static struct msm_gpiomux_config bt_wakeup_configs[] __initdata = {
+	{
+		.gpio = 62,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &bt_wakeup_active_config,
+			[GPIOMUX_SUSPENDED] = &bt_wakeup_suspend_config,
+		},
+	},
+};
+
+static struct msm_gpiomux_config bt_pcm_configs[] __initdata = {
+	{
+		.gpio	   = 79,	/* BT_PCM_CLK */
+		.settings = {
+			[GPIOMUX_ACTIVE]	= &bt_pcm_active_config,
+			[GPIOMUX_SUSPENDED] = &bt_pcm_suspend_config,
+		},
+	},
+	{
+		.gpio	   = 80,	/* BT_PCM_SYNC */
+		.settings = {
+			[GPIOMUX_ACTIVE]	= &bt_pcm_active_config,
+			[GPIOMUX_SUSPENDED] = &bt_pcm_suspend_config,
+		},
+	},
+	{
+		.gpio	   = 81,	/* BT_PCM_DIN */
+		.settings = {
+			[GPIOMUX_ACTIVE]	= &bt_pcm_active_config,
+			[GPIOMUX_SUSPENDED] = &bt_pcm_suspend_config,
+		},
+	},
+	{
+		.gpio	   = 82,	/* BT_PCM_DOUT */
+		.settings = {
+			[GPIOMUX_ACTIVE]	= &bt_pcm_active_config,
+			[GPIOMUX_SUSPENDED] = &bt_pcm_suspend_config,
+		},
+	}
+};
+
+static void bluetooth_msm_gpiomux_install(void)
+{
+    /* UART */
+    msm_gpiomux_install(bt_msm_blsp_configs, ARRAY_SIZE(bt_msm_blsp_configs));
+
+    /* RFKILL */
+    msm_gpiomux_install(bt_rfkill_configs, ARRAY_SIZE(bt_rfkill_configs));
+
+    /* HOST WAKE-UP */
+    msm_gpiomux_install(bt_host_wakeup_configs, ARRAY_SIZE(bt_host_wakeup_configs));
+
+    /* BT WAKE-UP */
+    msm_gpiomux_install(bt_wakeup_configs, ARRAY_SIZE(bt_wakeup_configs));
+
+    /* PCM I/F */
+    msm_gpiomux_install(bt_pcm_configs, ARRAY_SIZE(bt_pcm_configs));
+}
+#endif /*                      */
+/*                                                        */
+
+/*                                                                               */
+#if defined(CONFIG_LGE_BROADCAST_TDMB)
+static struct gpiomux_setting gpio_blsp8_spi_active_config = {
+	.func = GPIOMUX_FUNC_1,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting gpio_blsp8_spi_suspended_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_DOWN,
+};
+
+static struct gpiomux_setting gpio_broadcast_ctrl_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting gpio_broadcast_int_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_UP,
+};
+
+static struct msm_gpiomux_config msm8974_tdmb_configs[] __initdata = {
+	{
+		.gpio	   = 45,		/* BLSP 2 QUP 1 (BLSP8) SPI_DATA_MOSI */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &gpio_blsp8_spi_active_config,
+			[GPIOMUX_SUSPENDED] = &gpio_blsp8_spi_suspended_config,
+		},
+	},
+	{
+		.gpio	   = 46,		/* BLSP 2 QUP 1 (BLSP8) SPI_DATA_MISO */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &gpio_blsp8_spi_active_config,
+			[GPIOMUX_SUSPENDED] = &gpio_blsp8_spi_suspended_config,
+		},
+	},
+	{
+		.gpio	   = 47,		/* BLSP 2 QUP 1 (BLSP8) SPI_CS_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &gpio_blsp8_spi_active_config,
+			[GPIOMUX_SUSPENDED] = &gpio_blsp8_spi_suspended_config,
+		},
+	},
+	{
+		.gpio	   = 48,		/* BLSP 2 QUP 1 (BLSP8) SPI_CLK */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &gpio_blsp8_spi_active_config,
+			[GPIOMUX_SUSPENDED] = &gpio_blsp8_spi_suspended_config,
+		},
+	},
+	{
+		.gpio	   = 55,		/* DNB_EN */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_broadcast_ctrl_config,
+		},
+	},
+	{
+		.gpio	   = 77,		/* DNB_INT */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_broadcast_int_config,
+		},
+	},
+};
+#endif /*               */
+/*                                                                               */
+static struct gpiomux_setting max17048_i2c_sda_config = {
+	/* GPIO_2 */
+	.func = GPIOMUX_FUNC_3,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+static struct gpiomux_setting max17048_i2c_scl_config = {
+	/* GPIO_3 */
+	.func = GPIOMUX_FUNC_3,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+static struct gpiomux_setting max17048_int_config = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_6MA,
+	.dir = GPIOMUX_IN,
+};
+static struct msm_gpiomux_config msm_fuel_gauge_configs[] __initdata = {
+	{
+		.gpio      = 2,		/* BLSP1 QUP1 I2C_DAT */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &max17048_i2c_sda_config,
+			[GPIOMUX_SUSPENDED] = &max17048_i2c_sda_config,
+		},
+	},
+	{
+		.gpio      = 3,		/* BLSP1 QUP1 I2C_CLK */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &max17048_i2c_scl_config,
+			[GPIOMUX_SUSPENDED] = &max17048_i2c_scl_config,
+		},
+	},
+	{
+		.gpio      = 9,		/* FUEL_GAUGE_INT_N */
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &max17048_int_config,
+			[GPIOMUX_SUSPENDED] = &max17048_int_config,
+		},
+	},
+};
+
+#ifdef CONFIG_MACH_LGE /*temporary code for bringup */
+
+#else /*QCT Original code */
+static struct msm_gpiomux_config apq8074_dragonboard_ts_config[] __initdata = {
+	{
+		/* BLSP1 QUP I2C_DATA */
+		.gpio      = 2,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_i2c_config,
+		},
+	},
+	{
+		/* BLSP1 QUP I2C_CLK */
+		.gpio      = 3,
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gpio_i2c_config,
+		},
+	},
+};
+#endif
+
+
+/*                                                             */
+#if defined(CONFIG_LGE_NFC) || defined(CONFIG_NFC_BCM2079X) || defined(CONFIG_LGE_NFC_PN547_C2)
+static struct gpiomux_setting nfc_sda_cfg = {
+	.func = GPIOMUX_FUNC_3,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting nfc_scl_cfg = {
+	.func = GPIOMUX_FUNC_3,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+static struct gpiomux_setting nfc_ven_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_2MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_OUT_LOW,
+};
+
+static struct gpiomux_setting nfc_irq_cfg = {
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_DOWN,
+	.dir = GPIOMUX_IN,
+};
+
+static struct gpiomux_setting nfc_mode_cfg = {	/* WAKE */
+	.func = GPIOMUX_FUNC_GPIO,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+	.dir = GPIOMUX_OUT_HIGH,
+};
+static struct msm_gpiomux_config msm8974_nfc_configs[] __initdata = {
+	{
+		/* I2C SDA */
+		.gpio      = 83,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &nfc_sda_cfg,
+			[GPIOMUX_SUSPENDED] = &nfc_sda_cfg,
+		},
+	},
+	{
+		/* I2C SCL */
+		.gpio      = 84,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &nfc_scl_cfg,
+			[GPIOMUX_SUSPENDED] = &nfc_scl_cfg,
+		},
+	},
+	{
+		/* VEN */
+		.gpio      = 94,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &nfc_ven_cfg,
+			[GPIOMUX_SUSPENDED] = &nfc_ven_cfg,
+		},
+	},
+	{
+		/* IRQ */
+		.gpio      = 5,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &nfc_irq_cfg,
+			[GPIOMUX_SUSPENDED] = &nfc_irq_cfg,
+		},
+	},
+	{
+		/* MODE *//* WAKE */
+		.gpio      = 92,
+		.settings = {
+			[GPIOMUX_ACTIVE]    = &nfc_mode_cfg,
+			[GPIOMUX_SUSPENDED] = &nfc_mode_cfg,
+		},
+	},
+};
+#endif
+/*                                                           */
+
+
+void __init msm_8974_init_gpiomux(void)
+{
+	int rc;
+
+	rc = msm_gpiomux_init_dt();
+	if (rc) {
+		pr_err("%s failed %d\n", __func__, rc);
+		return;
+	}
+
+	pr_err("%s:%d socinfo_get_version %x\n", __func__, __LINE__,
+		socinfo_get_version());
+	if (socinfo_get_version() >= 0x20000)
+		msm_tlmm_misc_reg_write(TLMM_SPARE_REG, 0xf);
+
+#if defined(CONFIG_KS8851) || defined(CONFIG_KS8851_MODULE)
+	if (!(of_board_is_dragonboard() && machine_is_apq8074()))
+		msm_gpiomux_install(msm_eth_configs, \
+			ARRAY_SIZE(msm_eth_configs));
+#endif
+	msm_gpiomux_install(msm_blsp_configs, ARRAY_SIZE(msm_blsp_configs));
+	msm_gpiomux_install(msm_blsp2_uart7_configs,
+			 ARRAY_SIZE(msm_blsp2_uart7_configs));
+	msm_gpiomux_install(wcnss_5wire_interface,
+				ARRAY_SIZE(wcnss_5wire_interface));
+	if (of_board_is_liquid())
+		msm_gpiomux_install_nowrite(ath_gpio_configs,
+					ARRAY_SIZE(ath_gpio_configs));
+	msm_gpiomux_install(msm8974_slimbus_config,
+			ARRAY_SIZE(msm8974_slimbus_config));
+
+	msm_gpiomux_install(msm_touch_configs, ARRAY_SIZE(msm_touch_configs));
+#ifndef CONFIG_LGE_IRRC
+		msm_gpiomux_install(hap_lvl_shft_config,
+				ARRAY_SIZE(hap_lvl_shft_config));
+#endif
+
+#if defined(CONFIG_MACH_LGE)
+	printk("kilo: board_revno =%d \n", lge_get_board_revno());
+	switch (lge_get_board_revno()) {
+	case HW_REV_EVB1:
+	case HW_REV_EVB2:
+		msm_gpiomux_install(msm_sensor_configs_evb, ARRAY_SIZE(msm_sensor_configs_evb));
+		break;
+	case HW_REV_A:
+		msm_gpiomux_install(msm_sensor_configs_rev_a, ARRAY_SIZE(msm_sensor_configs_rev_a));
+		break;
+	case HW_REV_B:
+	default:
+		msm_gpiomux_install(msm_sensor_configs_rev_a1, ARRAY_SIZE(msm_sensor_configs_rev_a1));
+		break;
+	}
+#else /* QCT Original */
+	if (of_board_is_dragonboard() && machine_is_apq8074())
+		msm_gpiomux_install(msm_sensor_configs_dragonboard, \
+				ARRAY_SIZE(msm_sensor_configs_dragonboard));
+	else
+		msm_gpiomux_install(msm_sensor_configs, \
+				ARRAY_SIZE(msm_sensor_configs));
+#endif
+	msm_gpiomux_install(&sd_card_det, 1);
+#if defined (CONFIG_BCMDHD)
+	msm_gpiomux_sdc3_install();
+#endif
+
+	if (machine_is_apq8074() && (of_board_is_liquid() || \
+	    of_board_is_dragonboard()))
+		msm_gpiomux_sdc3_install();
+
+	if (!(of_board_is_dragonboard() && machine_is_apq8074()))
+		msm_gpiomux_sdc4_install();
+
+	msm_gpiomux_install(msm_taiko_config, ARRAY_SIZE(msm_taiko_config));
+
+	msm_gpiomux_install(msm_hsic_configs, ARRAY_SIZE(msm_hsic_configs));
+	msm_gpiomux_install(msm_hsic_hub_configs,
+				ARRAY_SIZE(msm_hsic_hub_configs));
+
+	msm_gpiomux_install(msm_hdmi_configs, ARRAY_SIZE(msm_hdmi_configs));
+	if (of_board_is_fluid())
+		msm_gpiomux_install(msm_mhl_configs,
+				    ARRAY_SIZE(msm_mhl_configs));
+
+	if (of_board_is_liquid() ||
+	    (of_board_is_dragonboard() && machine_is_apq8074()))
+		msm_gpiomux_install(msm8974_pri_ter_auxpcm_configs,
+				 ARRAY_SIZE(msm8974_pri_ter_auxpcm_configs));
+#ifndef CONFIG_MACH_LGE
+	else
+		msm_gpiomux_install(msm8974_pri_pri_auxpcm_configs,
+				 ARRAY_SIZE(msm8974_pri_pri_auxpcm_configs));
+#endif
+	if (of_board_is_cdp())
+		msm_gpiomux_install(msm8974_sec_auxpcm_configs,
+				 ARRAY_SIZE(msm8974_sec_auxpcm_configs));
+	else if (of_board_is_liquid() || of_board_is_fluid() ||
+						of_board_is_mtp())
+		msm_gpiomux_install(msm_epm_configs,
+				ARRAY_SIZE(msm_epm_configs));
+
+	if (lge_get_board_revno() < HW_REV_A)
+		msm_gpiomux_install_nowrite(msm_lcd_configs,
+				ARRAY_SIZE(msm_lcd_configs));
+
+	if (of_board_is_rumi())
+		msm_gpiomux_install(msm_rumi_blsp_configs,
+				    ARRAY_SIZE(msm_rumi_blsp_configs));
+
+	if (socinfo_get_platform_subtype() == PLATFORM_SUBTYPE_MDM)
+		msm_gpiomux_install(mdm_configs,
+			ARRAY_SIZE(mdm_configs));
+#if defined(CONFIG_LGE_SM100) || defined(CONFIG_TSPDRV)
+	if (lge_get_board_revno() < HW_REV_A)
+	       msm_gpiomux_install(vibrator_configs_evb, ARRAY_SIZE(vibrator_configs_evb));
+	else
+		msm_gpiomux_install(vibrator_configs, ARRAY_SIZE(vibrator_configs));
+#endif
+
+#ifdef CONFIG_SLIMPORT_ANX7816
+		msm_gpiomux_install(slimport_configs,
+				ARRAY_SIZE(slimport_configs));
+#endif
+
+/*                                                                   */
+	msm_gpiomux_install(msm_hall_ic_configs, ARRAY_SIZE(msm_hall_ic_configs));
+/*                                                                   */
+
+
+#ifndef CONFIG_MACH_LGE /*QCT Original code */
+	if (of_board_is_dragonboard() && machine_is_apq8074())
+		msm_gpiomux_install(apq8074_dragonboard_ts_config,
+			ARRAY_SIZE(apq8074_dragonboard_ts_config));
+#else
+	msm_gpiomux_install(msm_fuel_gauge_configs,
+			ARRAY_SIZE(msm_fuel_gauge_configs));
+#endif
+
+/*                                                             */
+#if defined(CONFIG_LGE_NFC) || defined(CONFIG_NFC_BCM2079X) || defined(CONFIG_LGE_NFC_PN547_C2)
+	msm_gpiomux_install(msm8974_nfc_configs, ARRAY_SIZE(msm8974_nfc_configs));
+#endif
+/*                                                           */
+
+
+/*                                                        */
+#ifdef CONFIG_LGE_BLUETOOTH
+    bluetooth_msm_gpiomux_install();
+#endif /*                      */
+/*                                                        */
+
+/*                                                                               */
+#if defined(CONFIG_LGE_BROADCAST_TDMB)
+	msm_gpiomux_install(msm8974_tdmb_configs, ARRAY_SIZE(msm8974_tdmb_configs));
+#endif /*               */
+
+#if defined(CONFIG_SWITCH_MAX1462X)
+		msm_gpiomux_install(headset_configs, ARRAY_SIZE(headset_configs));
+#endif
+#ifdef CONFIG_SND_SOC_CS35L32
+	if (lge_get_board_revno() >= HW_REV_A)
+		msm_gpiomux_install(msm8974_qua_mi2s_configs, ARRAY_SIZE(msm8974_qua_mi2s_configs));
+#endif /*CONFIG_SND_SOC_CS35L32*/
+
+#ifdef CONFIG_SND_SOC_TPA2015D
+		msm_gpiomux_install(tpa2015d_extamp_configs, ARRAY_SIZE(tpa2015d_extamp_configs));
+#endif
+}
+
+static void wcnss_switch_to_gpio(void)
+{
+	/* Switch MUX to GPIO */
+	msm_gpiomux_install(wcnss_5gpio_interface,
+			ARRAY_SIZE(wcnss_5gpio_interface));
+
+	/* Ensure GPIO config */
+	gpio_direction_input(WLAN_DATA2);
+	gpio_direction_input(WLAN_DATA1);
+	gpio_direction_input(WLAN_DATA0);
+	gpio_direction_output(WLAN_SET, 0);
+	gpio_direction_output(WLAN_CLK, 0);
+}
+
+static void wcnss_switch_to_5wire(void)
+{
+	msm_gpiomux_install(wcnss_5wire_interface,
+			ARRAY_SIZE(wcnss_5wire_interface));
+}
+
+u32 wcnss_rf_read_reg(u32 rf_reg_addr)
+{
+	int count = 0;
+	u32 rf_cmd_and_addr = 0;
+	u32 rf_data_received = 0;
+	u32 rf_bit = 0;
+
+	wcnss_switch_to_gpio();
+
+	/* Reset the signal if it is already being used. */
+	gpio_set_value(WLAN_SET, 0);
+	gpio_set_value(WLAN_CLK, 0);
+
+	/* We start with cmd_set high WLAN_SET = 1. */
+	gpio_set_value(WLAN_SET, 1);
+
+	gpio_direction_output(WLAN_DATA0, 1);
+	gpio_direction_output(WLAN_DATA1, 1);
+	gpio_direction_output(WLAN_DATA2, 1);
+
+	gpio_set_value(WLAN_DATA0, 0);
+	gpio_set_value(WLAN_DATA1, 0);
+	gpio_set_value(WLAN_DATA2, 0);
+
+	/* Prepare command and RF register address that need to sent out.
+	 * Make sure that we send only 14 bits from LSB.
+	 */
+	rf_cmd_and_addr  = (((WLAN_RF_READ_REG_CMD) |
+		(rf_reg_addr << WLAN_RF_REG_ADDR_START_OFFSET)) &
+		WLAN_RF_READ_CMD_MASK);
+
+	for (count = 0; count < 5; count++) {
+		gpio_set_value(WLAN_CLK, 0);
+
+		rf_bit = (rf_cmd_and_addr & 0x1);
+		gpio_set_value(WLAN_DATA0, rf_bit ? 1 : 0);
+		rf_cmd_and_addr = (rf_cmd_and_addr >> 1);
+
+		rf_bit = (rf_cmd_and_addr & 0x1);
+		gpio_set_value(WLAN_DATA1, rf_bit ? 1 : 0);
+		rf_cmd_and_addr = (rf_cmd_and_addr >> 1);
+
+		rf_bit = (rf_cmd_and_addr & 0x1);
+		gpio_set_value(WLAN_DATA2, rf_bit ? 1 : 0);
+		rf_cmd_and_addr = (rf_cmd_and_addr >> 1);
+
+		/* Send the data out WLAN_CLK = 1 */
+		gpio_set_value(WLAN_CLK, 1);
+	}
+
+	/* Pull down the clock signal */
+	gpio_set_value(WLAN_CLK, 0);
+
+	/* Configure data pins to input IO pins */
+	gpio_direction_input(WLAN_DATA0);
+	gpio_direction_input(WLAN_DATA1);
+	gpio_direction_input(WLAN_DATA2);
+
+	for (count = 0; count < 2; count++) {
+		gpio_set_value(WLAN_CLK, 1);
+		gpio_set_value(WLAN_CLK, 0);
+	}
+
+	rf_bit = 0;
+	for (count = 0; count < 6; count++) {
+		gpio_set_value(WLAN_CLK, 1);
+		gpio_set_value(WLAN_CLK, 0);
+
+		rf_bit = gpio_get_value(WLAN_DATA0);
+		rf_data_received |= (rf_bit << (count * 3 + 0));
+
+		if (count != 5) {
+			rf_bit = gpio_get_value(WLAN_DATA1);
+			rf_data_received |= (rf_bit << (count * 3 + 1));
+
+			rf_bit = gpio_get_value(WLAN_DATA2);
+			rf_data_received |= (rf_bit << (count * 3 + 2));
+		}
+	}
+
+	gpio_set_value(WLAN_SET, 0);
+	wcnss_switch_to_5wire();
+
+	return rf_data_received;
+}
diff --git a/arch/arm/mach-msm/lge/board-8974-g3-kddi.c b/arch/arm/mach-msm/lge/board-8974-g3-kddi.c
new file mode 100644
index 0000000..be8eb70
--- /dev/null
+++ b/arch/arm/mach-msm/lge/board-8974-g3-kddi.c
@@ -0,0 +1,238 @@
+/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/err.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/irq.h>
+#include <linux/irqdomain.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_platform.h>
+#include <linux/memory.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/krait-regulator.h>
+#include <linux/msm_tsens.h>
+#include <linux/msm_thermal.h>
+#include <asm/mach/map.h>
+#include <asm/hardware/gic.h>
+#include <asm/mach/map.h>
+#include <asm/mach/arch.h>
+#include <mach/board.h>
+#include <mach/gpiomux.h>
+#include <mach/msm_iomap.h>
+#ifdef CONFIG_ION_MSM
+#include <mach/ion.h>
+#endif
+#include <mach/msm_memtypes.h>
+#include <mach/msm_smd.h>
+#include <mach/restart.h>
+#include <mach/rpm-smd.h>
+#include <mach/rpm-regulator-smd.h>
+#include <mach/socinfo.h>
+#include <mach/msm_smem.h>
+#include "../board-dt.h"
+#include "../clock.h"
+#include "../devices.h"
+#include "../spm.h"
+#include "../pm.h"
+#include "../modem_notifier.h"
+#include "../platsmp.h"
+#include <mach/board_lge.h>
+
+#ifdef CONFIG_MFD_WM5110
+#include <linux/slimbus/slimbus.h>
+#endif
+
+static struct memtype_reserve msm8974_reserve_table[] __initdata = {
+	[MEMTYPE_SMI] = {
+	},
+	[MEMTYPE_EBI0] = {
+		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
+	},
+	[MEMTYPE_EBI1] = {
+		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
+	},
+};
+
+static int msm8974_paddr_to_memtype(phys_addr_t paddr)
+{
+	return MEMTYPE_EBI1;
+}
+
+static struct reserve_info msm8974_reserve_info __initdata = {
+	.memtype_reserve_table = msm8974_reserve_table,
+	.paddr_to_memtype = msm8974_paddr_to_memtype,
+};
+
+void __init msm_8974_reserve(void)
+{
+	reserve_info = &msm8974_reserve_info;
+	of_scan_flat_dt(dt_scan_for_memory_reserve, msm8974_reserve_table);
+#ifdef CONFIG_MACH_LGE
+	of_scan_flat_dt(lge_init_dt_scan_chosen, NULL);
+#endif
+	msm_reserve();
+	lge_reserve();
+}
+
+static void __init msm8974_early_memory(void)
+{
+	reserve_info = &msm8974_reserve_info;
+	of_scan_flat_dt(dt_scan_for_memory_hole, msm8974_reserve_table);
+}
+
+/*
+ * Used to satisfy dependencies for devices that need to be
+ * run early or in a particular order. Most likely your device doesn't fall
+ * into this category, and thus the driver should not be added here. The
+ * EPROBE_DEFER can satisfy most dependency problems.
+ */
+/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
+extern void init_bcm_wifi(void);
+#endif
+/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+
+void __init msm8974_add_drivers(void)
+{
+	msm_smem_init();
+	msm_init_modem_notifier_list();
+	msm_smd_init();
+	msm_rpm_driver_init();
+	msm_pm_sleep_status_init();
+	rpm_regulator_smd_driver_init();
+	msm_spm_device_init();
+	krait_power_init();
+	if (of_board_is_rumi())
+		msm_clock_init(&msm8974_rumi_clock_init_data);
+	else
+		msm_clock_init(&msm8974_clock_init_data);
+	tsens_tm_init_driver();
+	msm_thermal_device_init();
+	lge_add_persistent_device();
+#ifdef CONFIG_LGE_QFPROM_INTERFACE
+	lge_add_qfprom_devices();
+#endif
+/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
+	init_bcm_wifi();
+#endif
+/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+#ifdef CONFIG_USB_G_LGE_ANDROID
+	lge_add_android_usb_devices();
+#endif
+
+}
+
+static struct of_dev_auxdata msm8974_auxdata_lookup[] __initdata = {
+	OF_DEV_AUXDATA("qcom,hsusb-otg", 0xF9A55000, \
+			"msm_otg", NULL),
+	OF_DEV_AUXDATA("qcom,ehci-host", 0xF9A55000, \
+			"msm_ehci_host", NULL),
+	OF_DEV_AUXDATA("qcom,dwc-usb3-msm", 0xF9200000, \
+			"msm_dwc3", NULL),
+	OF_DEV_AUXDATA("qcom,usb-bam-msm", 0xF9304000, \
+			"usb_bam", NULL),
+	OF_DEV_AUXDATA("qcom,spi-qup-v2", 0xF9924000, \
+			"spi_qsd.1", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9824000, \
+			"msm_sdcc.1", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98A4000, \
+			"msm_sdcc.2", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9864000, \
+			"msm_sdcc.3", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98E4000, \
+			"msm_sdcc.4", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9824900, \
+			"msm_sdcc.1", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98A4900, \
+			"msm_sdcc.2", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9864900, \
+			"msm_sdcc.3", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98E4900, \
+			"msm_sdcc.4", NULL),
+	OF_DEV_AUXDATA("qcom,msm-rng", 0xF9BFF000, \
+			"msm_rng", NULL),
+	OF_DEV_AUXDATA("qcom,qseecom", 0xFE806000, \
+			"qseecom", NULL),
+	OF_DEV_AUXDATA("qcom,mdss_mdp", 0xFD900000, "mdp.0", NULL),
+	OF_DEV_AUXDATA("qcom,msm-tsens", 0xFC4A8000, \
+			"msm-tsens", NULL),
+	OF_DEV_AUXDATA("qcom,qcedev", 0xFD440000, \
+			"qcedev.0", NULL),
+	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, \
+			"msm_hsic_host", NULL),
+	{}
+};
+
+/* LGE_CHANGE, yeri.lee@lge.com, 2013-10-31, wm5110 Bring up*/
+#ifdef CONFIG_MFD_WM5110
+static struct slim_device wm5110_slim_audio = {
+	.name = "wm5110-slim-audio",
+	.e_addr = {0x00, 0x00, 0x10, 0x51, 0x2f, 0x01 },
+};
+
+static struct slim_boardinfo msm_slim_devices[] = {
+	{
+		.bus_num = 1,
+		.slim_slave = &wm5110_slim_audio,
+	},
+};
+#endif
+
+static void __init msm8974_map_io(void)
+{
+	msm_map_8974_io();
+}
+
+void __init msm8974_init(void)
+{
+	struct of_dev_auxdata *adata = msm8974_auxdata_lookup;
+
+	if (socinfo_init() < 0)
+		pr_err("%s: socinfo_init() failed\n", __func__);
+
+	msm_8974_init_gpiomux();
+	regulator_has_full_constraints();
+	board_dt_populate(adata);
+	msm8974_add_drivers();
+#ifdef CONFIG_MFD_WM5110
+	/* Register the Wolfson WM5119 slimbus codec */
+	slim_register_board_info(msm_slim_devices, 1);
+#endif
+}
+
+void __init msm8974_init_very_early(void)
+{
+	msm8974_early_memory();
+}
+
+static const char *msm8974_dt_match[] __initconst = {
+	"qcom,msm8974",
+	"qcom,apq8074",
+	NULL
+};
+
+DT_MACHINE_START(MSM8974_DT, "Qualcomm MSM 8974 (Flattened Device Tree)")
+	.map_io = msm8974_map_io,
+	.init_irq = msm_dt_init_irq,
+	.init_machine = msm8974_init,
+	.handle_irq = gic_handle_irq,
+	.timer = &msm_dt_timer,
+	.dt_compat = msm8974_dt_match,
+	.reserve = msm_8974_reserve,
+	.init_very_early = msm8974_init_very_early,
+	.restart = msm_restart,
+	.smp = &msm8974_smp_ops,
+MACHINE_END
diff --git a/arch/arm/mach-msm/lge/board-8974-g3-kr.c b/arch/arm/mach-msm/lge/board-8974-g3-kr.c
new file mode 100644
index 0000000..334e1af
--- /dev/null
+++ b/arch/arm/mach-msm/lge/board-8974-g3-kr.c
@@ -0,0 +1,263 @@
+/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/err.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/irq.h>
+#include <linux/irqdomain.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_platform.h>
+#include <linux/memory.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/krait-regulator.h>
+#include <linux/msm_tsens.h>
+#include <linux/msm_thermal.h>
+#include <asm/mach/map.h>
+#include <asm/hardware/gic.h>
+#include <asm/mach/map.h>
+#include <asm/mach/arch.h>
+#include <mach/board.h>
+#include <mach/gpiomux.h>
+#include <mach/msm_iomap.h>
+#ifdef CONFIG_ION_MSM
+#include <mach/ion.h>
+#endif
+#include <mach/msm_memtypes.h>
+#include <mach/msm_smd.h>
+#include <mach/restart.h>
+#include <mach/rpm-smd.h>
+#include <mach/rpm-regulator-smd.h>
+#include <mach/socinfo.h>
+#include <mach/msm_smem.h>
+#include "../board-dt.h"
+#include "../clock.h"
+#include "../devices.h"
+#include "../spm.h"
+#include "../pm.h"
+#include "../modem_notifier.h"
+#include "../platsmp.h"
+#include <mach/board_lge.h>
+
+#ifdef CONFIG_MFD_WM5110
+#include <linux/slimbus/slimbus.h>
+#endif
+
+static struct memtype_reserve msm8974_reserve_table[] __initdata = {
+	[MEMTYPE_SMI] = {
+	},
+	[MEMTYPE_EBI0] = {
+		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
+	},
+	[MEMTYPE_EBI1] = {
+		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
+	},
+};
+
+static int msm8974_paddr_to_memtype(phys_addr_t paddr)
+{
+	return MEMTYPE_EBI1;
+}
+
+static struct reserve_info msm8974_reserve_info __initdata = {
+	.memtype_reserve_table = msm8974_reserve_table,
+	.paddr_to_memtype = msm8974_paddr_to_memtype,
+};
+
+void __init msm_8974_reserve(void)
+{
+	reserve_info = &msm8974_reserve_info;
+	of_scan_flat_dt(dt_scan_for_memory_reserve, msm8974_reserve_table);
+#ifdef CONFIG_MACH_LGE
+	of_scan_flat_dt(lge_init_dt_scan_chosen, NULL);
+#endif
+	msm_reserve();
+	lge_reserve();
+}
+
+static void __init msm8974_early_memory(void)
+{
+	reserve_info = &msm8974_reserve_info;
+	of_scan_flat_dt(dt_scan_for_memory_hole, msm8974_reserve_table);
+}
+
+#ifdef CONFIG_LGE_LCD_TUNING
+static struct platform_device lcd_misc_device = {
+	.name = "lcd_misc_msm",
+	.id = 0,
+};
+
+void __init lge_add_lcd_misc_devices(void)
+{
+	platform_device_register(&lcd_misc_device);
+}
+#endif
+
+/*
+ * Used to satisfy dependencies for devices that need to be
+ * run early or in a particular order. Most likely your device doesn't fall
+ * into this category, and thus the driver should not be added here. The
+ * EPROBE_DEFER can satisfy most dependency problems.
+ */
+/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
+extern void init_bcm_wifi(void);
+#endif
+/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+
+void __init msm8974_add_drivers(void)
+{
+	msm_smem_init();
+	msm_init_modem_notifier_list();
+	msm_smd_init();
+	msm_rpm_driver_init();
+	msm_pm_sleep_status_init();
+	rpm_regulator_smd_driver_init();
+	msm_spm_device_init();
+	krait_power_init();
+	if (of_board_is_rumi())
+		msm_clock_init(&msm8974_rumi_clock_init_data);
+	else
+		msm_clock_init(&msm8974_clock_init_data);
+	tsens_tm_init_driver();
+	msm_thermal_device_init();
+#ifdef CONFIG_LGE_QFPROM_INTERFACE
+	lge_add_qfprom_devices();
+#endif
+#ifdef CONFIG_LGE_LCD_TUNING
+	lge_add_lcd_misc_devices();
+#endif
+	lge_add_persistent_device();
+/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
+	init_bcm_wifi();
+#endif
+/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
+#if defined(CONFIG_LGE_PM_BATTERY_ID_CHECKER)
+	lge_battery_id_devices();
+#endif
+#ifdef CONFIG_USB_G_LGE_ANDROID
+	lge_add_android_usb_devices();
+#endif
+
+}
+
+static struct of_dev_auxdata msm_hsic_host_adata[] = {
+	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, "msm_hsic_host", NULL),
+	{}
+};
+
+static struct of_dev_auxdata msm8974_auxdata_lookup[] __initdata = {
+	OF_DEV_AUXDATA("qcom,hsusb-otg", 0xF9A55000, \
+			"msm_otg", NULL),
+	OF_DEV_AUXDATA("qcom,ehci-host", 0xF9A55000, \
+			"msm_ehci_host", NULL),
+	OF_DEV_AUXDATA("qcom,dwc-usb3-msm", 0xF9200000, \
+			"msm_dwc3", NULL),
+	OF_DEV_AUXDATA("qcom,usb-bam-msm", 0xF9304000, \
+			"usb_bam", NULL),
+	OF_DEV_AUXDATA("qcom,spi-qup-v2", 0xF9924000, \
+			"spi_qsd.1", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9824000, \
+			"msm_sdcc.1", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98A4000, \
+			"msm_sdcc.2", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9864000, \
+			"msm_sdcc.3", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98E4000, \
+			"msm_sdcc.4", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9824900, \
+			"msm_sdcc.1", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98A4900, \
+			"msm_sdcc.2", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9864900, \
+			"msm_sdcc.3", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98E4900, \
+			"msm_sdcc.4", NULL),
+	OF_DEV_AUXDATA("qcom,msm-rng", 0xF9BFF000, \
+			"msm_rng", NULL),
+	OF_DEV_AUXDATA("qcom,qseecom", 0xFE806000, \
+			"qseecom", NULL),
+	OF_DEV_AUXDATA("qcom,mdss_mdp", 0xFD900000, "mdp.0", NULL),
+	OF_DEV_AUXDATA("qcom,msm-tsens", 0xFC4A8000, \
+			"msm-tsens", NULL),
+	OF_DEV_AUXDATA("qcom,qcedev", 0xFD440000, \
+			"qcedev.0", NULL),
+	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, \
+			"msm_hsic_host", NULL),
+	OF_DEV_AUXDATA("qcom,hsic-smsc-hub", 0, "msm_smsc_hub",
+			msm_hsic_host_adata),
+	{}
+};
+
+/* LGE_CHANGE, yeri.lee@lge.com, 2013-10-31, wm5110 Bring up*/
+#ifdef CONFIG_MFD_WM5110
+static struct slim_device wm5110_slim_audio = {
+	.name = "wm5110-slim-audio",
+	.e_addr = {0x00, 0x00, 0x10, 0x51, 0x2f, 0x01 },
+};
+
+static struct slim_boardinfo msm_slim_devices[] = {
+	{
+		.bus_num = 1,
+		.slim_slave = &wm5110_slim_audio,
+	},
+};
+#endif
+
+static void __init msm8974_map_io(void)
+{
+	msm_map_8974_io();
+}
+
+void __init msm8974_init(void)
+{
+	struct of_dev_auxdata *adata = msm8974_auxdata_lookup;
+
+	if (socinfo_init() < 0)
+		pr_err("%s: socinfo_init() failed\n", __func__);
+
+	msm_8974_init_gpiomux();
+	regulator_has_full_constraints();
+	board_dt_populate(adata);
+	msm8974_add_drivers();
+#ifdef CONFIG_MFD_WM5110
+	/* Register the Wolfson WM5119 slimbus codec */
+	slim_register_board_info(msm_slim_devices, 1);
+#endif
+}
+
+void __init msm8974_init_very_early(void)
+{
+	msm8974_early_memory();
+}
+
+static const char *msm8974_dt_match[] __initconst = {
+	"qcom,msm8974",
+	"qcom,apq8074",
+	NULL
+};
+
+DT_MACHINE_START(MSM8974_DT, "Qualcomm MSM 8974 (Flattened Device Tree)")
+	.map_io = msm8974_map_io,
+	.init_irq = msm_dt_init_irq,
+	.init_machine = msm8974_init,
+	.handle_irq = gic_handle_irq,
+	.timer = &msm_dt_timer,
+	.dt_compat = msm8974_dt_match,
+	.reserve = msm_8974_reserve,
+	.init_very_early = msm8974_init_very_early,
+	.restart = msm_restart,
+	.smp = &msm8974_smp_ops,
+MACHINE_END
diff --git a/arch/arm/mach-msm/lge/board-8974-g3-us.c b/arch/arm/mach-msm/lge/board-8974-g3-us.c
new file mode 100644
index 0000000..cca2ff9
--- /dev/null
+++ b/arch/arm/mach-msm/lge/board-8974-g3-us.c
@@ -0,0 +1,245 @@
+/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/err.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/irq.h>
+#include <linux/irqdomain.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_platform.h>
+#include <linux/memory.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/krait-regulator.h>
+#include <linux/msm_tsens.h>
+#include <linux/msm_thermal.h>
+#include <asm/mach/map.h>
+#include <asm/hardware/gic.h>
+#include <asm/mach/map.h>
+#include <asm/mach/arch.h>
+#include <mach/board.h>
+#include <mach/gpiomux.h>
+#include <mach/msm_iomap.h>
+#ifdef CONFIG_ION_MSM
+#include <mach/ion.h>
+#endif
+#include <mach/msm_memtypes.h>
+#include <mach/msm_smd.h>
+#include <mach/restart.h>
+#include <mach/rpm-smd.h>
+#include <mach/rpm-regulator-smd.h>
+#include <mach/socinfo.h>
+#include <mach/msm_smem.h>
+#include "../board-dt.h"
+#include "../clock.h"
+#include "../devices.h"
+#include "../spm.h"
+#include "../pm.h"
+#include "../modem_notifier.h"
+#include "../platsmp.h"
+#include <mach/board_lge.h>
+
+static struct memtype_reserve msm8974_reserve_table[] __initdata = {
+	[MEMTYPE_SMI] = {
+	},
+	[MEMTYPE_EBI0] = {
+		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
+	},
+	[MEMTYPE_EBI1] = {
+		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
+	},
+};
+
+static int msm8974_paddr_to_memtype(phys_addr_t paddr)
+{
+	return MEMTYPE_EBI1;
+}
+
+static struct reserve_info msm8974_reserve_info __initdata = {
+	.memtype_reserve_table = msm8974_reserve_table,
+	.paddr_to_memtype = msm8974_paddr_to_memtype,
+};
+
+void __init msm_8974_reserve(void)
+{
+	reserve_info = &msm8974_reserve_info;
+	of_scan_flat_dt(dt_scan_for_memory_reserve, msm8974_reserve_table);
+#ifdef CONFIG_MACH_LGE
+	of_scan_flat_dt(lge_init_dt_scan_chosen, NULL);
+#endif
+	msm_reserve();
+	lge_reserve();
+}
+
+static void __init msm8974_early_memory(void)
+{
+	reserve_info = &msm8974_reserve_info;
+	of_scan_flat_dt(dt_scan_for_memory_hole, msm8974_reserve_table);
+}
+
+#ifdef CONFIG_LGE_LCD_TUNING
+static struct platform_device lcd_misc_device = {
+	.name = "lcd_misc_msm",
+	.id = 0,
+};
+
+void __init lge_add_lcd_misc_devices(void)
+{
+	platform_device_register(&lcd_misc_device);
+}
+#endif
+
+/*
+ * Used to satisfy dependencies for devices that need to be
+ * run early or in a particular order. Most likely your device doesn't fall
+ * into this category, and thus the driver should not be added here. The
+ * EPROBE_DEFER can satisfy most dependency problems.
+ */
+/* LGE_CHANGE_S, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
+#if defined(CONFIG_BCMDHD) || defined(CONFIG_BCMDHD_MODULE)
+extern void init_bcm_wifi(void);
+#endif
+/* LGE_CHANGE_E, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
+
+void __init msm8974_add_drivers(void)
+{
+	msm_smem_init();
+	msm_init_modem_notifier_list();
+	msm_smd_init();
+	msm_rpm_driver_init();
+	msm_pm_sleep_status_init();
+	rpm_regulator_smd_driver_init();
+	msm_spm_device_init();
+	krait_power_init();
+	if (of_board_is_rumi())
+		msm_clock_init(&msm8974_rumi_clock_init_data);
+	else
+		msm_clock_init(&msm8974_clock_init_data);
+	tsens_tm_init_driver();
+	msm_thermal_device_init();
+	lge_add_persistent_device();
+#ifdef CONFIG_LGE_QFPROM_INTERFACE
+	lge_add_qfprom_devices();
+#endif
+#ifdef CONFIG_LGE_DIAG_ENABLE_SYSFS
+	lge_add_diag_devices();
+#endif
+#ifdef CONFIG_LGE_LCD_TUNING
+	lge_add_lcd_misc_devices();
+#endif
+/* LGE_CHANGE_S, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
+#if defined(CONFIG_BCMDHD) || defined(CONFIG_BCMDHD_MODULE)
+	init_bcm_wifi();
+#endif
+/* LGE_CHANGE_E, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
+#if defined(CONFIG_LGE_PM_BATTERY_ID_CHECKER)
+	lge_battery_id_devices();
+#endif
+#ifdef CONFIG_LGE_QSDL_SUPPORT
+	lge_add_qsdl_device();
+#endif
+#ifdef CONFIG_USB_G_LGE_ANDROID
+	lge_add_android_usb_devices();
+#endif
+}
+
+static struct of_dev_auxdata msm_hsic_host_adata[] = {
+	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, "msm_hsic_host", NULL),
+	{}
+};
+
+static struct of_dev_auxdata msm8974_auxdata_lookup[] __initdata = {
+	OF_DEV_AUXDATA("qcom,hsusb-otg", 0xF9A55000, \
+			"msm_otg", NULL),
+	OF_DEV_AUXDATA("qcom,ehci-host", 0xF9A55000, \
+			"msm_ehci_host", NULL),
+	OF_DEV_AUXDATA("qcom,dwc-usb3-msm", 0xF9200000, \
+			"msm_dwc3", NULL),
+	OF_DEV_AUXDATA("qcom,usb-bam-msm", 0xF9304000, \
+			"usb_bam", NULL),
+	OF_DEV_AUXDATA("qcom,spi-qup-v2", 0xF9924000, \
+			"spi_qsd.1", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9824000, \
+			"msm_sdcc.1", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98A4000, \
+			"msm_sdcc.2", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9864000, \
+			"msm_sdcc.3", NULL),
+	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98E4000, \
+			"msm_sdcc.4", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9824900, \
+			"msm_sdcc.1", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98A4900, \
+			"msm_sdcc.2", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9864900, \
+			"msm_sdcc.3", NULL),
+	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98E4900, \
+			"msm_sdcc.4", NULL),
+	OF_DEV_AUXDATA("qcom,msm-rng", 0xF9BFF000, \
+			"msm_rng", NULL),
+	OF_DEV_AUXDATA("qcom,qseecom", 0xFE806000, \
+			"qseecom", NULL),
+	OF_DEV_AUXDATA("qcom,mdss_mdp", 0xFD900000, "mdp.0", NULL),
+	OF_DEV_AUXDATA("qcom,msm-tsens", 0xFC4A8000, \
+			"msm-tsens", NULL),
+	OF_DEV_AUXDATA("qcom,qcedev", 0xFD440000, \
+			"qcedev.0", NULL),
+	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, \
+			"msm_hsic_host", NULL),
+	OF_DEV_AUXDATA("qcom,hsic-smsc-hub", 0, "msm_smsc_hub",
+			msm_hsic_host_adata),
+	{}
+};
+
+static void __init msm8974_map_io(void)
+{
+	msm_map_8974_io();
+}
+
+void __init msm8974_init(void)
+{
+	struct of_dev_auxdata *adata = msm8974_auxdata_lookup;
+
+	if (socinfo_init() < 0)
+		pr_err("%s: socinfo_init() failed\n", __func__);
+
+	msm_8974_init_gpiomux();
+	regulator_has_full_constraints();
+	board_dt_populate(adata);
+	msm8974_add_drivers();
+}
+
+void __init msm8974_init_very_early(void)
+{
+	msm8974_early_memory();
+}
+
+static const char *msm8974_dt_match[] __initconst = {
+	"qcom,msm8974",
+	"qcom,apq8074",
+	NULL
+};
+
+DT_MACHINE_START(MSM8974_DT, "Qualcomm MSM 8974 (Flattened Device Tree)")
+	.map_io = msm8974_map_io,
+	.init_irq = msm_dt_init_irq,
+	.init_machine = msm8974_init,
+	.handle_irq = gic_handle_irq,
+	.timer = &msm_dt_timer,
+	.dt_compat = msm8974_dt_match,
+	.reserve = msm_8974_reserve,
+	.init_very_early = msm8974_init_very_early,
+	.restart = msm_restart,
+	.smp = &msm8974_smp_ops,
+MACHINE_END
diff --git a/arch/arm/mach-msm/lge/devices_lge.c b/arch/arm/mach-msm/lge/devices_lge.c
index 0d558a3..5e20dc5 100644
--- a/arch/arm/mach-msm/lge/devices_lge.c
+++ b/arch/arm/mach-msm/lge/devices_lge.c
@@ -17,6 +17,10 @@
 #include <mach/lge_handle_panic.h>
 #endif
 
+#ifdef CONFIG_KEXEC_HARDBOOT
+#include <linux/memblock.h>
+#endif
+
 #ifdef CONFIG_LGE_PM
 #include <linux/qpnp/qpnp-adc.h>
 #include <mach/board_lge.h>
@@ -42,16 +46,6 @@
 /* in drivers/staging/android */
 #include "ram_console.h"
 
-#if defined(CONFIG_LCD_KCAL)
-/*             
-                             
-                                   
-   */
-#include <linux/module.h>
-#include "../../../../drivers/video/msm/mdss/mdss_fb.h"
-extern int update_preset_lcdc_lut(void);
-#endif /* CONFIG_LCD_KCAL */
-
 static int cn_arr_len = 3;
 
 struct cn_prop {
@@ -98,15 +92,15 @@ int __init lge_init_dt_scan_chosen(unsigned long node, const char *uname,
 			continue;
 		if (type == CELL_U32) {
 			u32 = of_get_flat_dt_prop(node, cn_array[i].name, &len);
-			if (u32 != NULL)
+			if(u32 != NULL)
 				cn_array[i].cell_u32 = of_read_ulong(u32, 1);
 		} else if (type == CELL_U64) {
 			u32 = of_get_flat_dt_prop(node, cn_array[i].name, &len);
-			if (u32 != NULL)
+			if(u32 != NULL)
 				cn_array[i].cell_u64 = of_read_number(u32, 2);
 		} else {
 			p = of_get_flat_dt_prop(node, cn_array[i].name, &len);
-			if (p != NULL)
+			if(p != NULL)
 				strlcpy(cn_array[i].str, p, len);
 		}
 		cn_array[i].is_valid = 1;
@@ -217,6 +211,16 @@ void __init lge_add_persist_ram_devices(void)
 
 void __init lge_reserve(void)
 {
+#ifdef CONFIG_KEXEC_HARDBOOT
+	struct memtype_reserve *mt = &reserve_info->memtype_reserve_table[MEMTYPE_EBI1];
+	phys_addr_t start = mt->start - SZ_1M - LGE_PERSISTENT_RAM_SIZE;
+	int ret = memblock_remove(start, SZ_1M);
+	if(!ret)
+	pr_info("Hardboot page reserved at 0x%X\n", start);
+	else
+	pr_err("Failed to reserve space for hardboot page at 0x%X!\n", start);
+#endif	
+
 #if defined(CONFIG_ANDROID_PERSISTENT_RAM)
 	lge_add_persist_ram_devices();
 #endif
@@ -240,7 +244,7 @@ void __init lge_add_persistent_device(void)
 
 
 
-/*                                                              */
+/* BEGIN : janghyun.baek@lge.com 2012-12-26 For cable detection */
 #ifdef CONFIG_LGE_PM
 struct chg_cable_info_table {
 	int threshhold;
@@ -272,7 +276,7 @@ void __init lge_add_qfprom_devices(void)
 static bool cable_type_defined;
 static struct chg_cable_info_table pm8941_acc_cable_type_data[MAX_CABLE_NUM];
 #endif
-/*                                        */
+/* END : janghyun.baek@lge.com 2012-12-26 */
 #ifdef CONFIG_LGE_DIAG_ENABLE_SYSFS
 static struct platform_device lg_diag_cmd_device = {
 	.name = "lg_diag_cmd",
@@ -288,7 +292,7 @@ void __init lge_add_diag_devices(void)
 }
 #endif
 
-/*                                                              */
+/* BEGIN : janghyun.baek@lge.com 2012-12-26 For cable detection */
 #ifdef CONFIG_LGE_PM
 void get_cable_data_from_dt(void *of_node)
 {
@@ -465,7 +469,7 @@ void lge_pm_read_cable_info(struct qpnp_vadc_chip *vadc)
 	lge_pm_get_cable_info(vadc, &lge_cable_info);
 }
 #endif
-/*                                                            */
+/* END : janghyun.baek@lge.com 2012-12-26 For cable detection */
 
 #if defined(CONFIG_LGE_KSWITCH)
 static int kswitch_status;
@@ -513,13 +517,13 @@ __setup("uart_console=", lge_uart_mode);
 	return value : 1 --> right after laf complete & reset
 */
 
-int android_dlcomplete;
+int android_dlcomplete = 0;
 
 int __init lge_android_dlcomplete(char *s)
 {
-	if (strncmp(s, "1", 1) == 0)   /* if same string */
+	if(strncmp(s,"1",1) == 0)   // if same string
 		android_dlcomplete = 1;
-	else	/* not same string */
+	else	// not same string
 		android_dlcomplete = 0;
 	printk("androidboot.dlcomplete = %d\n", android_dlcomplete);
 
@@ -555,7 +559,7 @@ int __init lge_boot_mode_init(char *s)
 	else if (!strcmp(s, "pif_910k"))
 		lge_boot_mode = LGE_BOOT_MODE_PIFBOOT3;
 	printk("ANDROID BOOT MODE : %d %s\n", lge_boot_mode, s);
-	/*                            */
+	/* LGE_UPDATE_E for MINIOS2.0 */
 
 	return 1;
 }
@@ -574,17 +578,17 @@ int lge_get_factory_boot(void)
 	 *   cable must be factory cable.
 	 */
 	switch (lge_boot_mode) {
-	case LGE_BOOT_MODE_FACTORY:
-	case LGE_BOOT_MODE_FACTORY2:
-	case LGE_BOOT_MODE_FACTORY3:
-	case LGE_BOOT_MODE_PIFBOOT:
-	case LGE_BOOT_MODE_PIFBOOT2:
-	case LGE_BOOT_MODE_PIFBOOT3:
-		res = 1;
-		break;
-	default:
-		res = 0;
-		break;
+		case LGE_BOOT_MODE_FACTORY:
+		case LGE_BOOT_MODE_FACTORY2:
+		case LGE_BOOT_MODE_FACTORY3:
+		case LGE_BOOT_MODE_PIFBOOT:
+		case LGE_BOOT_MODE_PIFBOOT2:
+		case LGE_BOOT_MODE_PIFBOOT3:
+			res = 1;
+			break;
+		default:
+			res = 0;
+			break;
 	}
 	return res;
 }
@@ -607,17 +611,17 @@ int lge_get_factory_cable(void)
 }
 
 /* for board revision */
-static hw_rev_type lge_bd_rev = HW_REV_1_0; /* HW_REV_B; */
+static hw_rev_type lge_bd_rev = HW_REV_C; //HW_REV_B;
 
 /* CAUTION: These strings are come from LK. */
-#if defined (CONFIG_MACH_MSM8974_G3_GLOBAL_COM) || defined (CONFIG_MACH_MSM8974_G3_KDDI)
+#if defined (CONFIG_MACH_MSM8974_G3_GLOBAL_COM) ||defined (CONFIG_MACH_MSM8974_G3_KDDI)
 char *rev_str[] = {"evb1", "evb2", "rev_a", "rev_a1", "rev_b", "rev_c", "rev_d",
-	"rev_e", "rev_g", "rev_h", "rev_10", "rev_11", "rev_12",
-	"reserved"};
+	"rev_e","rev_g", "rev_h", "rev_10", "rev_11", "rev_12",
+	"revserved"};
 #else
 char *rev_str[] = {"evb1", "evb2", "rev_a", "rev_b", "rev_c", "rev_d",
 	"rev_e", "rev_f", "rev_g", "rev_h", "rev_10", "rev_11", "rev_12",
-	"reserved"};
+	"revserved"};
 #endif
 
 static int __init board_revno_setup(char *rev_info)
@@ -643,105 +647,6 @@ hw_rev_type lge_get_board_revno(void)
     return lge_bd_rev;
 }
 
-#ifdef CONFIG_LGE_LCD_TUNING
-static struct platform_device lcd_misc_device = {
-	.name = "lcd_misc_msm",
-	.id = 0,
-};
-
-void __init lge_add_lcd_misc_devices(void)
-{
-	platform_device_register(&lcd_misc_device);
-}
-#endif
-
-#ifdef CONFIG_LCD_KCAL
-/*             
-                          
-                                
-*/
-int g_kcal_r = 255;
-int g_kcal_g = 255;
-int g_kcal_b = 255;
-
-int kcal_set_values(int kcal_r, int kcal_g, int kcal_b)
-{
-#if 0
-	int is_update = 0;
-
-	int kcal_r_limit = 250;
-	int kcal_g_limit = 250;
-	int kcal_b_limit = 253;
-
-	g_kcal_r = kcal_r < kcal_r_limit ? kcal_r_limit : kcal_r;
-	g_kcal_g = kcal_g < kcal_g_limit ? kcal_g_limit : kcal_g;
-	g_kcal_b = kcal_b < kcal_b_limit ? kcal_b_limit : kcal_b;
-
-	if (kcal_r < kcal_r_limit || kcal_g < kcal_g_limit || kcal_b < kcal_b_limit)
-		is_update = 1;
-	if (is_update)
-		update_preset_lcdc_lut();
-#else
-	g_kcal_r = kcal_r;
-	g_kcal_g = kcal_g;
-	g_kcal_b = kcal_b;
-#endif
-	return 0;
-}
-
-static int kcal_get_values(int *kcal_r, int *kcal_g, int *kcal_b)
-{
-	*kcal_r = g_kcal_r;
-	*kcal_g = g_kcal_g;
-	*kcal_b = g_kcal_b;
-	return 0;
-}
-
-static int kcal_refresh_values(void)
-{
-	return update_preset_lcdc_lut();
-}
-
-static struct kcal_platform_data kcal_pdata = {
-	.set_values = kcal_set_values,
-	.get_values = kcal_get_values,
-	.refresh_display = kcal_refresh_values
-};
-
-static struct platform_device kcal_platrom_device = {
-	.name   = "kcal_ctrl",
-	.dev = {
-		.platform_data = &kcal_pdata,
-	}
-};
-
-static int __init display_kcal_setup(char *kcal)
-{
-	char vaild_k = 0;
-	int kcal_r = 255;
-	int kcal_g = 255;
-	int kcal_b = 255;
-
-	sscanf(kcal, "%d|%d|%d|%c", &kcal_r, &kcal_g, &kcal_b, &vaild_k);
-	pr_info("kcal is %d|%d|%d|%c\n", kcal_r, kcal_g, kcal_b, vaild_k);
-
-	if (vaild_k != 'K') {
-		pr_info("kcal not calibrated yet : %d\n", vaild_k);
-		kcal_r = kcal_g = kcal_b = 255;
-	}
-
-	kcal_set_values(kcal_r, kcal_g, kcal_b);
-	return 1;
-}
-__setup("lge.kcal=", display_kcal_setup);
-
-void __init lge_add_lcd_kcal_devices(void)
-{
-	pr_info(" KCAL_DEBUG : %s\n", __func__);
-	platform_device_register(&kcal_platrom_device);
-}
-#endif
-
 #if defined(CONFIG_LGE_PM_BATTERY_ID_CHECKER)
 struct lge_battery_id_platform_data lge_battery_id_plat = {
 	.id = 13,
@@ -766,8 +671,8 @@ static enum lge_laf_mode_type lge_laf_mode = LGE_LAF_MODE_NORMAL;
 
 int __init lge_laf_mode_init(char *s)
 {
-    if (strcmp(s, "") && strcmp(s, "MID"))
-        lge_laf_mode = LGE_LAF_MODE_LAF;
+	if (strcmp(s, ""))
+		lge_laf_mode = LGE_LAF_MODE_LAF;
 
 	return 1;
 }
@@ -810,7 +715,6 @@ int lge_get_kswitch_status(void)
 {
     return kswitch_status;
 }
-#endif
 
 static int lge_boot_reason = -1; /* undefined for error checking */
 static int __init lge_check_bootreason(char *reason)
@@ -857,29 +761,29 @@ void __init lge_add_qsdl_device(void)
 {
 	platform_device_register(&lge_qsdl_device);
 }
-#endif /*                         */
+#endif /* CONFIG_LGE_QSDL_SUPPORT */
 
 #ifdef CONFIG_USB_G_LGE_ANDROID
 static int get_factory_cable(void)
 {
 	int res;
 
 	switch (lge_boot_mode) {
-	case LGE_BOOT_MODE_FACTORY:
-	case LGE_BOOT_MODE_PIFBOOT:
-		res = LGEUSB_FACTORY_130K;
-		break;
-	case LGE_BOOT_MODE_FACTORY2:
-	case LGE_BOOT_MODE_PIFBOOT2:
-		res = LGEUSB_FACTORY_56K;
-		break;
-	case LGE_BOOT_MODE_FACTORY3:
-	case LGE_BOOT_MODE_PIFBOOT3:
-		res = LGEUSB_FACTORY_910K;
-		break;
-	default:
-		res = 0;
-		break;
+		case LGE_BOOT_MODE_FACTORY:
+		case LGE_BOOT_MODE_PIFBOOT:
+			res = LGEUSB_FACTORY_130K;
+			break;
+		case LGE_BOOT_MODE_FACTORY2:
+		case LGE_BOOT_MODE_PIFBOOT2:
+			res = LGEUSB_FACTORY_56K;
+			break;
+		case LGE_BOOT_MODE_FACTORY3:
+		case LGE_BOOT_MODE_PIFBOOT3:
+			res = LGEUSB_FACTORY_910K;
+			break;
+		default:
+			res = 0;
+			break;
 	}
 	return res;
 }
@@ -906,3 +810,4 @@ void __init lge_add_android_usb_devices(void)
 	platform_device_register(&lge_android_usb_device);
 }
 #endif
+#endif
diff --git a/arch/arm/mach-msm/lge/lge_kcal_ctrl.c b/arch/arm/mach-msm/lge/lge_kcal_ctrl.c
deleted file mode 100755
index b75656d..0000000
--- a/arch/arm/mach-msm/lge/lge_kcal_ctrl.c
+++ /dev/null
@@ -1,129 +0,0 @@
-/* arch/arm/mach-msm/lge/lge_kcal_ctrl.c
- *
- * Interface to calibrate display color temperature.
- *
- * Copyright (C) 2012 LGE
- *
- * This software is licensed under the terms of the GNU General Public
- * License version 2, as published by the Free Software Foundation, and
- * may be copied, distributed, and modified under those terms.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <linux/kernel.h>
-#include <linux/device.h>
-#include <linux/platform_device.h>
-#include <linux/init.h>
-#include <linux/module.h>
-#include <mach/board_lge.h>
-
-/*             
-                          
-                                
-*/
-
-static struct kcal_platform_data *kcal_pdata;
-static int last_status_kcal_ctrl;
-
-static ssize_t kcal_store(struct device *dev, struct device_attribute *attr,
-						const char *buf, size_t count)
-{
-	int kcal_r = 0;
-	int kcal_g = 0;
-	int kcal_b = 0;
-
-	if (!count)
-		return -EINVAL;
-
-	sscanf(buf, "%d %d %d", &kcal_r, &kcal_g, &kcal_b);
-	kcal_pdata->set_values(kcal_r, kcal_g, kcal_b);
-	return count;
-}
-
-static ssize_t kcal_show(struct device *dev, struct device_attribute *attr,
-								char *buf)
-{
-	int kcal_r = 0;
-	int kcal_g = 0;
-	int kcal_b = 0;
-
-	kcal_pdata->get_values(&kcal_r, &kcal_g, &kcal_b);
-
-	return sprintf(buf, "%d %d %d\n", kcal_r, kcal_g, kcal_b);
-}
-
-static ssize_t kcal_ctrl_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t count)
-{
-	int cmd = 0;
-
-	if (!count)
-		return last_status_kcal_ctrl = -EINVAL;
-
-	sscanf(buf, "%d", &cmd);
-
-	if (cmd != 1)
-		return last_status_kcal_ctrl = -EINVAL;
-
-	last_status_kcal_ctrl = kcal_pdata->refresh_display();
-
-	if (last_status_kcal_ctrl)
-		return -EINVAL;
-	else
-		return count;
-}
-
-static ssize_t kcal_ctrl_show(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	if (last_status_kcal_ctrl)
-		return sprintf(buf, "NG\n");
-	else
-		return sprintf(buf, "OK\n");
-}
-
-static DEVICE_ATTR(kcal, 0644, kcal_show, kcal_store);
-static DEVICE_ATTR(kcal_ctrl, 0644, kcal_ctrl_show, kcal_ctrl_store);
-
-static int kcal_ctrl_probe(struct platform_device *pdev)
-{
-	int rc = 0;
-
-	kcal_pdata = pdev->dev.platform_data;
-
-	if (!kcal_pdata->set_values || !kcal_pdata->get_values ||
-					!kcal_pdata->refresh_display) {
-		return -1;
-	}
-
-	rc = device_create_file(&pdev->dev, &dev_attr_kcal);
-	if (rc != 0)
-		return -1;
-	rc = device_create_file(&pdev->dev, &dev_attr_kcal_ctrl);
-	if (rc != 0)
-		return -1;
-
-	return 0;
-}
-
-static struct platform_driver this_driver = {
-	.probe  = kcal_ctrl_probe,
-	.driver = {
-		.name   = "kcal_ctrl",
-	},
-};
-
-int __init kcal_ctrl_init(void)
-{
-	return platform_driver_register(&this_driver);
-}
-
-device_initcall(kcal_ctrl_init);
-
-MODULE_DESCRIPTION("LGE KCAL driver");
-MODULE_LICENSE("GPL v2");
diff --git a/drivers/video/msm/mdss/mdss_mdp_pp.c b/drivers/video/msm/mdss/mdss_mdp_pp.c
index 989b14d..036a946 100644
--- a/drivers/video/msm/mdss/mdss_mdp_pp.c
+++ b/drivers/video/msm/mdss/mdss_mdp_pp.c
@@ -22,17 +22,6 @@
 #include <mach/msm_bus.h>
 #include <mach/msm_bus_board.h>
 
-#if defined(CONFIG_LCD_KCAL)
-/*             
-                          
-                                
-*/
-#include <mach/board_lge.h>
-extern int g_kcal_r;
-extern int g_kcal_g;
-extern int g_kcal_b;
-extern struct kcal_data kcal_value;
-#endif /* CONFIG_LCD_KCAL */
 struct mdp_csc_cfg mdp_csc_convert[MDSS_MDP_MAX_CSC] = {
 	[MDSS_MDP_CSC_RGB2RGB] = {
 		0,
@@ -1927,10 +1916,7 @@ int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
 			mdss_pp_res->gamut_disp_cfg[disp_num].flags |=
 				MDP_PP_OPS_WRITE;
 	}
-#if defined(CONFIG_LCD_KCAL)
-	if (disp_num == 0)
-		pp_sts.pgc_sts |= PP_STS_ENABLE;
-#endif
+
 	if (pp_sts.pgc_sts & PP_STS_ENABLE) {
 		flags |= PP_FLAGS_DIRTY_PGC;
 		if (!(mdss_pp_res->pgc_disp_cfg[disp_num].flags
@@ -1942,153 +1928,6 @@ int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
 	mdss_pp_res->pp_disp_flags[disp_num] |= flags;
 	return 0;
 }
-
-#if defined(CONFIG_LCD_KCAL)
-static struct mdp_ar_gc_lut_data test_r[GC_LUT_SEGMENTS] = {
-		{0x00000000, 0x00000100, 0x00000000},
-		{0x00000FFF, 0x00000000, 0x00007F80},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000}
-};
-
-static struct mdp_ar_gc_lut_data test_g[GC_LUT_SEGMENTS] = {
-		{0x00000000, 0x00000100, 0x00000000},
-		{0x00000FFF, 0x00000000, 0x00007F80},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000}
-};
-
-static struct mdp_ar_gc_lut_data test_b[GC_LUT_SEGMENTS] = {
-		{0x00000000, 0x00000100, 0x00000000},
-		{0x00000FFF, 0x00000000, 0x00007F80},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000},
-		{0x00000000, 0x00000000, 0x00000000}
-};
-
-void mdss_mdp_pp_argc(void)
-{
-	int disp_num = 0;
-	u32 tbl_size;
-
-	struct mdp_ar_gc_lut_data *r_data;
-	struct mdp_ar_gc_lut_data *g_data;
-	struct mdp_ar_gc_lut_data *b_data;
-	struct mdp_pgc_lut_data *pgc_config;
-
-	r_data = &mdss_pp_res->gc_lut_r[disp_num][0];
-	g_data = &mdss_pp_res->gc_lut_g[disp_num][0];
-	b_data = &mdss_pp_res->gc_lut_b[disp_num][0];
-
-	tbl_size = GC_LUT_SEGMENTS * sizeof(struct mdp_ar_gc_lut_data);
-	memcpy(r_data, test_r, tbl_size);
-	memcpy(g_data, test_g, tbl_size);
-	memcpy(b_data, test_b, tbl_size);
-
-
-	pgc_config = &mdss_pp_res->pgc_disp_cfg[disp_num];
-
-	pgc_config->r_data =
-		&mdss_pp_res->gc_lut_r[disp_num][0];
-	pgc_config->g_data =
-		&mdss_pp_res->gc_lut_g[disp_num][0];
-	pgc_config->b_data =
-		&mdss_pp_res->gc_lut_b[disp_num][0];
-
-	pgc_config->flags |= MDP_PP_OPS_WRITE;
-	pgc_config->flags |= MDP_PP_OPS_ENABLE;
-
-	pr_info(">>>>> %s \n", __func__);
-}
-
-
-#define NUM_QLUT 256
-#define MAX_KCAL_V (NUM_QLUT-1)
-
-#define SCALED_BY_KCAL(rgb, kcal) \
-	(((((unsigned int)(rgb) * (unsigned int)(kcal)) << 10) / \
-						(unsigned int)MAX_KCAL_V) >> 10)
-
-void mdss_mdp_pp_argc_kcal(int kr, int kg, int kb)/*struct mdss_mdp_ctl *ctl, */
-{
-	int i;
-	int disp_num = 0;
-	struct mdp_pgc_lut_data *pgc_config;
-
-	for (i = 0; i < GC_LUT_SEGMENTS; i++) {
-		mdss_pp_res->gc_lut_r[disp_num][i].slope =
-		SCALED_BY_KCAL(test_r[i].slope, kr);
-		mdss_pp_res->gc_lut_r[disp_num][i].offset =
-		SCALED_BY_KCAL(test_r[i].offset, kr);
-
-		mdss_pp_res->gc_lut_g[disp_num][i].slope =
-		SCALED_BY_KCAL(test_g[i].slope, kg);
-		mdss_pp_res->gc_lut_g[disp_num][i].offset =
-		SCALED_BY_KCAL(test_g[i].offset, kg);
-
-		mdss_pp_res->gc_lut_b[disp_num][i].slope =
-		SCALED_BY_KCAL(test_b[i].slope, kb);
-		mdss_pp_res->gc_lut_b[disp_num][i].offset =
-		SCALED_BY_KCAL(test_b[i].offset, kb);
-	}
-	pgc_config = &mdss_pp_res->pgc_disp_cfg[disp_num];
-	pgc_config->flags |= MDP_PP_OPS_WRITE;
-	pgc_config->flags |= MDP_PP_OPS_ENABLE;
-	/* mdss_mdp_pp_setup(ctl); */
-	mdss_pp_res->pp_disp_flags[disp_num] |= PP_FLAGS_DIRTY_PGC;
-
-	pr_info(">>>>> %s \n", __func__);
-}
-
-int update_preset_lcdc_lut(void)
-{
-	int ret = 0;
-
-	pr_info("update_preset_lcdc_lut red=[%d], green=[%d], blue=[%d]\n", g_kcal_r, g_kcal_g, g_kcal_b);
-
-	mdss_mdp_pp_argc_kcal(g_kcal_r, g_kcal_g, g_kcal_b);
-
-	if (ret)
-		pr_err("%s: failed to set lut! %d\n", __func__, ret);
-
-	return ret;
-}
-#endif
 int mdss_mdp_pp_init(struct device *dev)
 {
 	int i, ret = 0;
@@ -2142,16 +1981,7 @@ int mdss_mdp_pp_init(struct device *dev)
 		}
 
 	}
-#if defined(CONFIG_LCD_KCAL)
-/*             
-                          
-                                
-*/
-	if (!ret) {
-		mdss_mdp_pp_argc();
-		update_preset_lcdc_lut();
-	}
-#endif
+
 	mutex_unlock(&mdss_pp_mutex);
 	return ret;
 }
diff --git a/patches/000-remove-LGe-Kcal-driver.patch b/patches/000-remove-LGe-Kcal-driver.patch
new file mode 100644
index 0000000..c66c0ba
--- /dev/null
+++ b/patches/000-remove-LGe-Kcal-driver.patch
@@ -0,0 +1,3621 @@
+From 7b43f8ddf4c6565265244c8182baa4adfedff44d Mon Sep 17 00:00:00 2001
+From: mostafa-z <mostafazarghami@gmail.com>
+Date: Sun, 31 May 2015 18:14:20 +0430
+Subject: [PATCH] remove: LGe Kcal driver
+
+---
+ arch/arm/mach-msm/include/mach/board_lge.h   |  43 -------------------------------------------
+ arch/arm/mach-msm/lge/Kconfig                | 196 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-----------------------
+ arch/arm/mach-msm/lge/Makefile               |  25 ++++++++++++++++++-------
+ arch/arm/mach-msm/lge/board-8974-g3-ca.c     | 245 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ arch/arm/mach-msm/lge/board-8974-g3-cn.c     | 247 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ arch/arm/mach-msm/lge/board-8974-g3-global.c | 248 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ arch/arm/mach-msm/lge/board-8974-g3-kddi.c   | 238 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ arch/arm/mach-msm/lge/board-8974-g3-kr.c     | 263 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ arch/arm/mach-msm/lge/board-8974-g3-us.c     | 245 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ arch/arm/mach-msm/lge/devices_lge.c          | 201 ++++++++++++++++++++++++++++++++++++++++++++++-----------------------------------------------------------------------------------------------------------------------------------------------------------
+ drivers/video/msm/mdss/mdss_mdp_pp.c         |
+ 11 files changed, 1963 insertions(+), 793 deletions(-)
+ create mode 100644 arch/arm/mach-msm/lge/board-8974-g3-ca.c
+ create mode 100644 arch/arm/mach-msm/lge/board-8974-g3-cn.c
+ create mode 100644 arch/arm/mach-msm/lge/board-8974-g3-global.c
+ create mode 100644 arch/arm/mach-msm/lge/board-8974-g3-kddi.c
+ create mode 100644 arch/arm/mach-msm/lge/board-8974-g3-kr.c
+ create mode 100644 arch/arm/mach-msm/lge/board-8974-g3-us.c
+
+diff --git a/arch/arm/mach-msm/include/mach/board_lge.h b/arch/arm/mach-msm/include/mach/board_lge.h
+index cffc1e8..cd1f7ef 100644
+--- a/arch/arm/mach-msm/include/mach/board_lge.h
++++ b/arch/arm/mach-msm/include/mach/board_lge.h
+@@ -107,21 +107,6 @@ struct pseudo_batt_info_type {
+ struct pseudo_batt_info_type;
+ void pseudo_batt_set(struct pseudo_batt_info_type *);
+ #endif
+-#ifdef CONFIG_LGE_SUPPORT_LCD_MAKER_ID
+-typedef enum {
+-	LCD_RENESAS_LGD = 0,
+-	LCD_RENESAS_JDI,
+-	LCD_MAKER_MAX,
+-} lcd_maker_id;
+-
+-typedef struct {
+-	lcd_maker_id maker_id;
+-	int min_mvol;
+-	int max_mvol;
+-} lcd_vol_maker_tbl_type;
+-
+-lcd_maker_id lge_get_panel_maker(void);
+-#endif
+ 
+ enum lge_boot_mode_type {
+ 	LGE_BOOT_MODE_NORMAL = 0,
+@@ -142,24 +127,6 @@ int lge_get_factory_cable(void);
+ void __init lge_add_android_usb_devices(void);
+ #endif
+ 
+-#if defined(CONFIG_LCD_KCAL)
+-/*             
+-                          
+-                                
+-*/
+-struct kcal_data {
+-		int red;
+-		int green;
+-		int blue;
+-};
+-
+-struct kcal_platform_data {
+-	int (*set_values) (int r, int g, int b);
+-	int (*get_values) (int *r, int *g, int *b);
+-	int (*refresh_display) (void);
+-};
+-#endif /* CONFIG_LCD_KCAL */
+-
+ enum lge_laf_mode_type {
+ 	LGE_LAF_MODE_NORMAL = 0,
+ 	LGE_LAF_MODE_LAF,
+@@ -215,16 +182,6 @@ void __init lge_add_persist_ram_devices(void);
+ void __init lge_add_lcd_misc_devices(void);
+ #endif
+ 
+-int gpio_debug_init(void);
+-void gpio_debug_print(void);
+-
+-#if defined(CONFIG_LCD_KCAL)
+-/*             
+-                          
+-                                
+-*/
+-void __init lge_add_lcd_kcal_devices(void);
+-#endif
+ #ifdef CONFIG_LGE_QFPROM_INTERFACE
+ void __init lge_add_qfprom_devices(void);
+ #endif
+diff --git a/arch/arm/mach-msm/lge/Kconfig b/arch/arm/mach-msm/lge/Kconfig
+index a54736f..ffbf4e0 100644
+--- a/arch/arm/mach-msm/lge/Kconfig
++++ b/arch/arm/mach-msm/lge/Kconfig
+@@ -3,8 +3,179 @@ config MACH_LGE
+ 
+ menu "LGE Board Selection"
+ 
+-source "arch/arm/mach-msm/lge/8974-g2/Kconfig"
+-source "arch/arm/mach-msm/lge/8974ac-g3/Kconfig"
++config MACH_MSM8974_G3_KR
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 KR"
++	help
++	  Support for the Qualcomm MSM8974 G3 KR device.
++
++config MACH_MSM8974_G3_LGU
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 LGU"
++	help
++	  Support for the Qualcomm MSM8974 G3 LG Uplus device.
++
++config MACH_MSM8974_G3_LGU_EVB
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 LGU EVB"
++	help
++	  Support for the Qualcomm MSM8974 G3 LG Uplus EVB device.
++
++config MACH_MSM8974_G3_SKT
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 SKT"
++	help
++	  Support for the Qualcomm MSM8974 G3 SKT device.
++
++config MACH_MSM8974_G3_KT
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 KT"
++	help
++	  Support for the Qualcomm MSM8974 G3 KT device.
++
++config MACH_MSM8974_G3_VZW
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 VZW"
++	help
++	  Support for the Qualcomm MSM8974 G3 Verizon device.
++
++config MACH_MSM8974_G3_LRA
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 LRA"
++	help
++	  Support for the Qualcomm MSM8974 G3 LRA device.
++
++config MACH_MSM8974_G3_ATT
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 ATT"
++	help
++	  Support for the Qualcomm MSM8974 G3 AT&T device.
++
++config MACH_MSM8974_G3_SPR_US
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 SPR US"
++	help
++	  Support for the Qualcomm MSM8974 G3 Sprint device.
++
++config MACH_MSM8974_G3_USC_US
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 USC US"
++	help
++	  Support for the Qualcomm MSM8974 G3 Usc device.
++
++config MACH_MSM8974_G3_TMO_US
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 TMO US"
++	help
++	  Support for the Qualcomm MSM8974 G3 AT&T device.
++
++config MACH_MSM8974_G3_CN
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 CN"
++	help
++	  Support for the Qualcomm MSM8974 G3 CHINA device.
++	  
++config MACH_MSM8974_G3_CMCC_CN
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 CMCC CN"
++	help
++	  Support for the Qualcomm MSM8974 G3 CMCC device.
++
++config MACH_MSM8974_G3_CTC_CN
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 CTC CN"
++	help
++	  Support for the Qualcomm MSM8974 G3 CTC device.
++
++config MACH_MSM8974_G3_CUCC_CN
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 CUCC CN"
++	help
++	  Support for the Qualcomm MSM8974 G3 CUCC device.
++	  
++config MACH_MSM8974_G3_KDDI
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 KDDI"
++	help
++	  Support for the Qualcomm MSM8974 G3 KDDI device.
++
++config MACH_MSM8974_G3_KDDI_EVB
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 KDDI EVB"
++	help
++	  Support for the Qualcomm MSM8974 G3 LG KDDI EVB device.
++
++config MACH_MSM8974_G3_GLOBAL_COM
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 GLOBAL COM"
++	help
++	  Support for the Qualcomm MSM8974 G3 GLOBAL device.
++
++config MACH_MSM8974_G3_GLOBAL_COM_LOWMEM
++	depends on MACH_MSM8974_G3_GLOBAL_COM
++	bool "MSM8974 G3 GLOBAL COM LOWMEM"
++	help
++	  Support for the Qualcomm MSM8974 G3 GLOBAL LOWMEM device.
++
++config MACH_MSM8974_G3_CA
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 CA"
++	help
++	  Support for the Qualcomm MSM8974 G3 Canada device.
++
++config MACH_MSM8974_G3_BELL
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 BELL"
++	help
++	  Support for the Qualcomm MSM8974 G3 BELL device.
++
++config MACH_MSM8974_G3_TLS
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 TLS"
++	help
++	  Support for the Qualcomm MSM8974 G3 TLS device.
++
++config MACH_MSM8974_G3_RGS
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 RGS"
++	help
++	  Support for the Qualcomm MSM8974 G3 RGS device.
++
++config MACH_MSM8974_G3_VTR
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 VTR"
++	help
++	  Support for the Qualcomm MSM8974 G3 VTR device.
++	  
++config MACH_MSM8974_G3_WIN
++	depends on ARCH_MSM8974
++	select MACH_LGE
++	bool "MSM8974 G3 WIN"
++	help
++	  Support for the Qualcomm MSM8974 G3 WIN device.
+ 
+ menuconfig LGE_SPECIFIC_PATCHES
+     depends on MACH_LGE
+@@ -69,11 +240,6 @@ config LGE_KSWITCH
+     help
+       LGE Kill Switch
+ 
+-config LCD_KCAL
+-	depends on MACH_LGE
+-	bool "Enable sysfs for LCD KCAL"
+-	default n
+-
+ config LGE_QSDL_SUPPORT
+     tristate "Support for Quality Statistics Data Logging"
+     default n
+@@ -89,20 +255,4 @@ config LGE_QFPROM_INTERFACE
+ 	help
+ 	  LGE QFPROM DRIVER.
+ 
+-
+-config LGE_DIAG_BYPASS
+-	tristate "Support LGE diag bypass for factory"
+-	default n
+-	depends on MACH_LGE
+-	help
+-	  LGE diag bypass
+-
+-
+-config LGE_LCD_OFF_DIMMING
+-	tristate "Support LGE LCD off dimming reboot"
+-	default n
+-	depends on MACH_LGE
+-	help
+-	  Support lcd off or dimming reboot when reboot reason is "LCD off". lcd stay dimming until lcd is off and on again.
+-
+ endmenu
+diff --git a/arch/arm/mach-msm/lge/Makefile b/arch/arm/mach-msm/lge/Makefile
+index ec20a70..efddad4 100644
+--- a/arch/arm/mach-msm/lge/Makefile
++++ b/arch/arm/mach-msm/lge/Makefile
+@@ -1,14 +1,25 @@
+-
+-# LGE Board Selection
+-obj-$(CONFIG_MACH_MSM8974_G2) += 8974-g2/
+-obj-$(CONFIG_MACH_MSM8974_G3) += 8974ac-g3/
+-
++obj-$(CONFIG_MACH_MSM8974_G3_LGU) += board-8974-g3-kr.o board-8974-g3-kr-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_LGU_EVB) += board-8974-g3-kr.o board-8974-g3-kr-evb-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_SKT) += board-8974-g3-kr.o board-8974-g3-kr-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_KT) += board-8974-g3-kr.o board-8974-g3-kr-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_VZW) += board-8974-g3-us.o board-8974-g3-vzw-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_LRA) += board-8974-g3-us.o board-8974-g3-lra-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_ATT) += board-8974-g3-us.o board-8974-g3-att-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_TMO_US) += board-8974-g3-us.o board-8974-g3-tmo_us-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_SPR_US) += board-8974-g3-us.o board-8974-g3-spr_us-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_USC_US) += board-8974-g3-us.o board-8974-g3-usc_us-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_CMCC_CN) += board-8974-g3-cn.o board-8974-g3-cn-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_CTC_CN) += board-8974-g3-cn.o board-8974-g3-cn-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_CUCC_CN) += board-8974-g3-cn.o board-8974-g3-cn-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_KDDI) += board-8974-g3-kddi.o board-8974-g3-kddi-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_KDDI_EVB) += board-8974-g3-kddi.o board-8974-g3-kddi-evb-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_GLOBAL_COM) += board-8974-g3-global.o board-8974-g3-global_com-gpiomux.o
++obj-$(CONFIG_MACH_MSM8974_G3_CA) += board-8974-g3-ca.o board-8974-g3-ca-gpiomux.o
+ obj-$(CONFIG_MACH_LGE) += devices_lge.o
+ obj-$(CONFIG_MACH_LGE) += lge_charging_scenario.o
+-obj-$(CONFIG_LCD_KCAL) += lge_kcal_ctrl.o
+ obj-$(CONFIG_WIFI_CONTROL_FUNC) += wifi_bcm_lge.o
+ obj-$(CONFIG_LGE_HANDLE_PANIC) += lge_handle_panic.o
+-obj-$(CONFIG_MACH_LGE) += lge_gpio_debug.o
++obj-$(CONFIG_LGE_BLUETOOTH) += board-8974-g3-rfkill.o
+ 
+ obj-$(CONFIG_LGE_BOOTLOADER_LOG) += lge_bootloader_log.o
+ obj-$(CONFIG_LGE_BOOTLOADER_TIME_CHECKER) += lge_bootloader_time_checker.o
+diff --git a/arch/arm/mach-msm/lge/board-8974-g3-ca.c b/arch/arm/mach-msm/lge/board-8974-g3-ca.c
+new file mode 100644
+index 0000000..cca2ff9
+--- /dev/null
++++ b/arch/arm/mach-msm/lge/board-8974-g3-ca.c
+@@ -0,0 +1,245 @@
++/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
++ *
++ * This program is free software; you can redistribute it and/or modify
++ * it under the terms of the GNU General Public License version 2 and
++ * only version 2 as published by the Free Software Foundation.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ */
++
++#include <linux/err.h>
++#include <linux/kernel.h>
++#include <linux/platform_device.h>
++#include <linux/io.h>
++#include <linux/irq.h>
++#include <linux/irqdomain.h>
++#include <linux/of.h>
++#include <linux/of_address.h>
++#include <linux/of_platform.h>
++#include <linux/memory.h>
++#include <linux/regulator/machine.h>
++#include <linux/regulator/krait-regulator.h>
++#include <linux/msm_tsens.h>
++#include <linux/msm_thermal.h>
++#include <asm/mach/map.h>
++#include <asm/hardware/gic.h>
++#include <asm/mach/map.h>
++#include <asm/mach/arch.h>
++#include <mach/board.h>
++#include <mach/gpiomux.h>
++#include <mach/msm_iomap.h>
++#ifdef CONFIG_ION_MSM
++#include <mach/ion.h>
++#endif
++#include <mach/msm_memtypes.h>
++#include <mach/msm_smd.h>
++#include <mach/restart.h>
++#include <mach/rpm-smd.h>
++#include <mach/rpm-regulator-smd.h>
++#include <mach/socinfo.h>
++#include <mach/msm_smem.h>
++#include "../board-dt.h"
++#include "../clock.h"
++#include "../devices.h"
++#include "../spm.h"
++#include "../pm.h"
++#include "../modem_notifier.h"
++#include "../platsmp.h"
++#include <mach/board_lge.h>
++
++static struct memtype_reserve msm8974_reserve_table[] __initdata = {
++	[MEMTYPE_SMI] = {
++	},
++	[MEMTYPE_EBI0] = {
++		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
++	},
++	[MEMTYPE_EBI1] = {
++		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
++	},
++};
++
++static int msm8974_paddr_to_memtype(phys_addr_t paddr)
++{
++	return MEMTYPE_EBI1;
++}
++
++static struct reserve_info msm8974_reserve_info __initdata = {
++	.memtype_reserve_table = msm8974_reserve_table,
++	.paddr_to_memtype = msm8974_paddr_to_memtype,
++};
++
++void __init msm_8974_reserve(void)
++{
++	reserve_info = &msm8974_reserve_info;
++	of_scan_flat_dt(dt_scan_for_memory_reserve, msm8974_reserve_table);
++#ifdef CONFIG_MACH_LGE
++	of_scan_flat_dt(lge_init_dt_scan_chosen, NULL);
++#endif
++	msm_reserve();
++	lge_reserve();
++}
++
++static void __init msm8974_early_memory(void)
++{
++	reserve_info = &msm8974_reserve_info;
++	of_scan_flat_dt(dt_scan_for_memory_hole, msm8974_reserve_table);
++}
++
++#ifdef CONFIG_LGE_LCD_TUNING
++static struct platform_device lcd_misc_device = {
++	.name = "lcd_misc_msm",
++	.id = 0,
++};
++
++void __init lge_add_lcd_misc_devices(void)
++{
++	platform_device_register(&lcd_misc_device);
++}
++#endif
++
++/*
++ * Used to satisfy dependencies for devices that need to be
++ * run early or in a particular order. Most likely your device doesn't fall
++ * into this category, and thus the driver should not be added here. The
++ * EPROBE_DEFER can satisfy most dependency problems.
++ */
++/* LGE_CHANGE_S, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
++#if defined(CONFIG_BCMDHD) || defined(CONFIG_BCMDHD_MODULE)
++extern void init_bcm_wifi(void);
++#endif
++/* LGE_CHANGE_E, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
++
++void __init msm8974_add_drivers(void)
++{
++	msm_smem_init();
++	msm_init_modem_notifier_list();
++	msm_smd_init();
++	msm_rpm_driver_init();
++	msm_pm_sleep_status_init();
++	rpm_regulator_smd_driver_init();
++	msm_spm_device_init();
++	krait_power_init();
++	if (of_board_is_rumi())
++		msm_clock_init(&msm8974_rumi_clock_init_data);
++	else
++		msm_clock_init(&msm8974_clock_init_data);
++	tsens_tm_init_driver();
++	msm_thermal_device_init();
++	lge_add_persistent_device();
++#ifdef CONFIG_LGE_QFPROM_INTERFACE
++	lge_add_qfprom_devices();
++#endif
++#ifdef CONFIG_LGE_DIAG_ENABLE_SYSFS
++	lge_add_diag_devices();
++#endif
++#ifdef CONFIG_LGE_LCD_TUNING
++	lge_add_lcd_misc_devices();
++#endif
++/* LGE_CHANGE_S, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
++#if defined(CONFIG_BCMDHD) || defined(CONFIG_BCMDHD_MODULE)
++	init_bcm_wifi();
++#endif
++/* LGE_CHANGE_E, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
++#if defined(CONFIG_LGE_PM_BATTERY_ID_CHECKER)
++	lge_battery_id_devices();
++#endif
++#ifdef CONFIG_LGE_QSDL_SUPPORT
++	lge_add_qsdl_device();
++#endif
++#ifdef CONFIG_USB_G_LGE_ANDROID
++	lge_add_android_usb_devices();
++#endif
++}
++
++static struct of_dev_auxdata msm_hsic_host_adata[] = {
++	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, "msm_hsic_host", NULL),
++	{}
++};
++
++static struct of_dev_auxdata msm8974_auxdata_lookup[] __initdata = {
++	OF_DEV_AUXDATA("qcom,hsusb-otg", 0xF9A55000, \
++			"msm_otg", NULL),
++	OF_DEV_AUXDATA("qcom,ehci-host", 0xF9A55000, \
++			"msm_ehci_host", NULL),
++	OF_DEV_AUXDATA("qcom,dwc-usb3-msm", 0xF9200000, \
++			"msm_dwc3", NULL),
++	OF_DEV_AUXDATA("qcom,usb-bam-msm", 0xF9304000, \
++			"usb_bam", NULL),
++	OF_DEV_AUXDATA("qcom,spi-qup-v2", 0xF9924000, \
++			"spi_qsd.1", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9824000, \
++			"msm_sdcc.1", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98A4000, \
++			"msm_sdcc.2", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9864000, \
++			"msm_sdcc.3", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98E4000, \
++			"msm_sdcc.4", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9824900, \
++			"msm_sdcc.1", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98A4900, \
++			"msm_sdcc.2", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9864900, \
++			"msm_sdcc.3", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98E4900, \
++			"msm_sdcc.4", NULL),
++	OF_DEV_AUXDATA("qcom,msm-rng", 0xF9BFF000, \
++			"msm_rng", NULL),
++	OF_DEV_AUXDATA("qcom,qseecom", 0xFE806000, \
++			"qseecom", NULL),
++	OF_DEV_AUXDATA("qcom,mdss_mdp", 0xFD900000, "mdp.0", NULL),
++	OF_DEV_AUXDATA("qcom,msm-tsens", 0xFC4A8000, \
++			"msm-tsens", NULL),
++	OF_DEV_AUXDATA("qcom,qcedev", 0xFD440000, \
++			"qcedev.0", NULL),
++	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, \
++			"msm_hsic_host", NULL),
++	OF_DEV_AUXDATA("qcom,hsic-smsc-hub", 0, "msm_smsc_hub",
++			msm_hsic_host_adata),
++	{}
++};
++
++static void __init msm8974_map_io(void)
++{
++	msm_map_8974_io();
++}
++
++void __init msm8974_init(void)
++{
++	struct of_dev_auxdata *adata = msm8974_auxdata_lookup;
++
++	if (socinfo_init() < 0)
++		pr_err("%s: socinfo_init() failed\n", __func__);
++
++	msm_8974_init_gpiomux();
++	regulator_has_full_constraints();
++	board_dt_populate(adata);
++	msm8974_add_drivers();
++}
++
++void __init msm8974_init_very_early(void)
++{
++	msm8974_early_memory();
++}
++
++static const char *msm8974_dt_match[] __initconst = {
++	"qcom,msm8974",
++	"qcom,apq8074",
++	NULL
++};
++
++DT_MACHINE_START(MSM8974_DT, "Qualcomm MSM 8974 (Flattened Device Tree)")
++	.map_io = msm8974_map_io,
++	.init_irq = msm_dt_init_irq,
++	.init_machine = msm8974_init,
++	.handle_irq = gic_handle_irq,
++	.timer = &msm_dt_timer,
++	.dt_compat = msm8974_dt_match,
++	.reserve = msm_8974_reserve,
++	.init_very_early = msm8974_init_very_early,
++	.restart = msm_restart,
++	.smp = &msm8974_smp_ops,
++MACHINE_END
+diff --git a/arch/arm/mach-msm/lge/board-8974-g3-cn.c b/arch/arm/mach-msm/lge/board-8974-g3-cn.c
+new file mode 100644
+index 0000000..bcc0578
+--- /dev/null
++++ b/arch/arm/mach-msm/lge/board-8974-g3-cn.c
+@@ -0,0 +1,247 @@
++/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
++ *
++ * This program is free software; you can redistribute it and/or modify
++ * it under the terms of the GNU General Public License version 2 and
++ * only version 2 as published by the Free Software Foundation.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ */
++
++#include <linux/err.h>
++#include <linux/kernel.h>
++#include <linux/platform_device.h>
++#include <linux/io.h>
++#include <linux/irq.h>
++#include <linux/irqdomain.h>
++#include <linux/of.h>
++#include <linux/of_address.h>
++#include <linux/of_platform.h>
++#include <linux/memory.h>
++#include <linux/regulator/machine.h>
++#include <linux/regulator/krait-regulator.h>
++#include <linux/msm_tsens.h>
++#include <linux/msm_thermal.h>
++#include <asm/mach/map.h>
++#include <asm/hardware/gic.h>
++#include <asm/mach/map.h>
++#include <asm/mach/arch.h>
++#include <mach/board.h>
++#include <mach/gpiomux.h>
++#include <mach/msm_iomap.h>
++#ifdef CONFIG_ION_MSM
++#include <mach/ion.h>
++#endif
++#include <mach/msm_memtypes.h>
++#include <mach/msm_smd.h>
++#include <mach/restart.h>
++#include <mach/rpm-smd.h>
++#include <mach/rpm-regulator-smd.h>
++#include <mach/socinfo.h>
++#include <mach/msm_smem.h>
++#include "../board-dt.h"
++#include "../clock.h"
++#include "../devices.h"
++#include "../spm.h"
++#include "../pm.h"
++#include "../modem_notifier.h"
++#include "../platsmp.h"
++#include <mach/board_lge.h>
++
++#ifdef CONFIG_MFD_WM5110
++#include <linux/slimbus/slimbus.h>
++#endif
++
++static struct memtype_reserve msm8974_reserve_table[] __initdata = {
++	[MEMTYPE_SMI] = {
++	},
++	[MEMTYPE_EBI0] = {
++		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
++	},
++	[MEMTYPE_EBI1] = {
++		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
++	},
++};
++
++static int msm8974_paddr_to_memtype(phys_addr_t paddr)
++{
++	return MEMTYPE_EBI1;
++}
++
++static struct reserve_info msm8974_reserve_info __initdata = {
++	.memtype_reserve_table = msm8974_reserve_table,
++	.paddr_to_memtype = msm8974_paddr_to_memtype,
++};
++
++void __init msm_8974_reserve(void)
++{
++	reserve_info = &msm8974_reserve_info;
++	of_scan_flat_dt(dt_scan_for_memory_reserve, msm8974_reserve_table);
++#ifdef CONFIG_MACH_LGE
++	of_scan_flat_dt(lge_init_dt_scan_chosen, NULL);
++#endif
++	msm_reserve();
++	lge_reserve();
++}
++
++static void __init msm8974_early_memory(void)
++{
++	reserve_info = &msm8974_reserve_info;
++	of_scan_flat_dt(dt_scan_for_memory_hole, msm8974_reserve_table);
++}
++
++/*
++ * Used to satisfy dependencies for devices that need to be
++ * run early or in a particular order. Most likely your device doesn't fall
++ * into this category, and thus the driver should not be added here. The
++ * EPROBE_DEFER can satisfy most dependency problems.
++ */
++/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
++extern void init_bcm_wifi(void);
++#endif
++/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++
++void __init msm8974_add_drivers(void)
++{
++	msm_smem_init();
++	msm_init_modem_notifier_list();
++	msm_smd_init();
++	msm_rpm_driver_init();
++	msm_pm_sleep_status_init();
++	rpm_regulator_smd_driver_init();
++	msm_spm_device_init();
++	krait_power_init();
++	if (of_board_is_rumi())
++		msm_clock_init(&msm8974_rumi_clock_init_data);
++	else
++		msm_clock_init(&msm8974_clock_init_data);
++	tsens_tm_init_driver();
++	msm_thermal_device_init();
++	lge_add_persistent_device();
++#ifdef CONFIG_LGE_QFPROM_INTERFACE
++	lge_add_qfprom_devices();
++#endif
++/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
++	init_bcm_wifi();
++#endif
++/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++#if defined(CONFIG_LGE_PM_BATTERY_ID_CHECKER)
++	lge_battery_id_devices();
++#endif
++#ifdef CONFIG_USB_G_LGE_ANDROID
++	lge_add_android_usb_devices();
++#endif
++}
++
++static struct of_dev_auxdata msm_hsic_host_adata[] = {
++	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, "msm_hsic_host", NULL),
++	{}
++};
++
++static struct of_dev_auxdata msm8974_auxdata_lookup[] __initdata = {
++	OF_DEV_AUXDATA("qcom,hsusb-otg", 0xF9A55000, \
++			"msm_otg", NULL),
++	OF_DEV_AUXDATA("qcom,ehci-host", 0xF9A55000, \
++			"msm_ehci_host", NULL),
++	OF_DEV_AUXDATA("qcom,dwc-usb3-msm", 0xF9200000, \
++			"msm_dwc3", NULL),
++	OF_DEV_AUXDATA("qcom,usb-bam-msm", 0xF9304000, \
++			"usb_bam", NULL),
++	OF_DEV_AUXDATA("qcom,spi-qup-v2", 0xF9924000, \
++			"spi_qsd.1", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9824000, \
++			"msm_sdcc.1", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98A4000, \
++			"msm_sdcc.2", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9864000, \
++			"msm_sdcc.3", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98E4000, \
++			"msm_sdcc.4", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9824900, \
++			"msm_sdcc.1", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98A4900, \
++			"msm_sdcc.2", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9864900, \
++			"msm_sdcc.3", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98E4900, \
++			"msm_sdcc.4", NULL),
++	OF_DEV_AUXDATA("qcom,msm-rng", 0xF9BFF000, \
++			"msm_rng", NULL),
++	OF_DEV_AUXDATA("qcom,qseecom", 0xFE806000, \
++			"qseecom", NULL),
++	OF_DEV_AUXDATA("qcom,mdss_mdp", 0xFD900000, "mdp.0", NULL),
++	OF_DEV_AUXDATA("qcom,msm-tsens", 0xFC4A8000, \
++			"msm-tsens", NULL),
++	OF_DEV_AUXDATA("qcom,qcedev", 0xFD440000, \
++			"qcedev.0", NULL),
++	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, \
++			"msm_hsic_host", NULL),
++	OF_DEV_AUXDATA("qcom,hsic-smsc-hub", 0, "msm_smsc_hub",
++			msm_hsic_host_adata),
++	{}
++};
++
++/* LGE_CHANGE, yeri.lee@lge.com, 2013-10-31, wm5110 Bring up*/
++#ifdef CONFIG_MFD_WM5110
++static struct slim_device wm5110_slim_audio = {
++	.name = "wm5110-slim-audio",
++	.e_addr = {0x00, 0x00, 0x10, 0x51, 0x2f, 0x01 },
++};
++
++static struct slim_boardinfo msm_slim_devices[] = {
++	{
++		.bus_num = 1,
++		.slim_slave = &wm5110_slim_audio,
++	},
++};
++#endif
++
++static void __init msm8974_map_io(void)
++{
++	msm_map_8974_io();
++}
++
++void __init msm8974_init(void)
++{
++	struct of_dev_auxdata *adata = msm8974_auxdata_lookup;
++
++	if (socinfo_init() < 0)
++		pr_err("%s: socinfo_init() failed\n", __func__);
++
++	msm_8974_init_gpiomux();
++	regulator_has_full_constraints();
++	board_dt_populate(adata);
++	msm8974_add_drivers();
++#ifdef CONFIG_MFD_WM5110
++	/* Register the Wolfson WM5119 slimbus codec */
++	slim_register_board_info(msm_slim_devices, 1);
++#endif
++}
++
++void __init msm8974_init_very_early(void)
++{
++	msm8974_early_memory();
++}
++
++static const char *msm8974_dt_match[] __initconst = {
++	"qcom,msm8974",
++	"qcom,apq8074",
++	NULL
++};
++
++DT_MACHINE_START(MSM8974_DT, "Qualcomm MSM 8974 (Flattened Device Tree)")
++	.map_io = msm8974_map_io,
++	.init_irq = msm_dt_init_irq,
++	.init_machine = msm8974_init,
++	.handle_irq = gic_handle_irq,
++	.timer = &msm_dt_timer,
++	.dt_compat = msm8974_dt_match,
++	.reserve = msm_8974_reserve,
++	.init_very_early = msm8974_init_very_early,
++	.restart = msm_restart,
++	.smp = &msm8974_smp_ops,
++MACHINE_END
+diff --git a/arch/arm/mach-msm/lge/board-8974-g3-global.c b/arch/arm/mach-msm/lge/board-8974-g3-global.c
+new file mode 100644
+index 0000000..2403b01
+--- /dev/null
++++ b/arch/arm/mach-msm/lge/board-8974-g3-global.c
+@@ -0,0 +1,248 @@
++/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
++ *
++ * This program is free software; you can redistribute it and/or modify
++ * it under the terms of the GNU General Public License version 2 and
++ * only version 2 as published by the Free Software Foundation.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ */
++
++#include <linux/err.h>
++#include <linux/kernel.h>
++#include <linux/platform_device.h>
++#include <linux/io.h>
++#include <linux/irq.h>
++#include <linux/irqdomain.h>
++#include <linux/of.h>
++#include <linux/of_address.h>
++#include <linux/of_platform.h>
++#include <linux/memory.h>
++#include <linux/regulator/machine.h>
++#include <linux/regulator/krait-regulator.h>
++#include <linux/msm_tsens.h>
++#include <linux/msm_thermal.h>
++#include <asm/mach/map.h>
++#include <asm/hardware/gic.h>
++#include <asm/mach/map.h>
++#include <asm/mach/arch.h>
++#include <mach/board.h>
++#include <mach/gpiomux.h>
++#include <mach/msm_iomap.h>
++#ifdef CONFIG_ION_MSM
++#include <mach/ion.h>
++#endif
++#include <mach/msm_memtypes.h>
++#include <mach/msm_smd.h>
++#include <mach/restart.h>
++#include <mach/rpm-smd.h>
++#include <mach/rpm-regulator-smd.h>
++#include <mach/socinfo.h>
++#include <mach/msm_smem.h>
++#include "../board-dt.h"
++#include "../clock.h"
++#include "../devices.h"
++#include "../spm.h"
++#include "../pm.h"
++#include "../modem_notifier.h"
++#include "../platsmp.h"
++#include <mach/board_lge.h>
++
++#ifdef CONFIG_MFD_WM5110
++#include <linux/slimbus/slimbus.h>
++#endif
++
++static struct memtype_reserve msm8974_reserve_table[] __initdata = {
++	[MEMTYPE_SMI] = {
++	},
++	[MEMTYPE_EBI0] = {
++		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
++	},
++	[MEMTYPE_EBI1] = {
++		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
++	},
++};
++
++static int msm8974_paddr_to_memtype(phys_addr_t paddr)
++{
++	return MEMTYPE_EBI1;
++}
++
++static struct reserve_info msm8974_reserve_info __initdata = {
++	.memtype_reserve_table = msm8974_reserve_table,
++	.paddr_to_memtype = msm8974_paddr_to_memtype,
++};
++
++void __init msm_8974_reserve(void)
++{
++	reserve_info = &msm8974_reserve_info;
++	of_scan_flat_dt(dt_scan_for_memory_reserve, msm8974_reserve_table);
++#ifdef CONFIG_MACH_LGE
++	of_scan_flat_dt(lge_init_dt_scan_chosen, NULL);
++#endif
++	msm_reserve();
++	lge_reserve();
++}
++
++static void __init msm8974_early_memory(void)
++{
++	reserve_info = &msm8974_reserve_info;
++	of_scan_flat_dt(dt_scan_for_memory_hole, msm8974_reserve_table);
++}
++
++/*
++ * Used to satisfy dependencies for devices that need to be
++ * run early or in a particular order. Most likely your device doesn't fall
++ * into this category, and thus the driver should not be added here. The
++ * EPROBE_DEFER can satisfy most dependency problems.
++ */
++/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
++extern void init_bcm_wifi(void);
++#endif
++/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++
++void __init msm8974_add_drivers(void)
++{
++	msm_smem_init();
++	msm_init_modem_notifier_list();
++	msm_smd_init();
++	msm_rpm_driver_init();
++	msm_pm_sleep_status_init();
++	rpm_regulator_smd_driver_init();
++	msm_spm_device_init();
++	krait_power_init();
++	if (of_board_is_rumi())
++		msm_clock_init(&msm8974_rumi_clock_init_data);
++	else
++		msm_clock_init(&msm8974_clock_init_data);
++	tsens_tm_init_driver();
++	msm_thermal_device_init();
++	lge_add_persistent_device();
++#ifdef CONFIG_LGE_QFPROM_INTERFACE
++	lge_add_qfprom_devices();
++#endif
++/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
++	init_bcm_wifi();
++#endif
++/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++#if defined(CONFIG_LGE_PM_BATTERY_ID_CHECKER)
++	lge_battery_id_devices();
++#endif
++#ifdef CONFIG_USB_G_LGE_ANDROID
++	lge_add_android_usb_devices();
++#endif
++
++}
++
++static struct of_dev_auxdata msm_hsic_host_adata[] = {
++	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, "msm_hsic_host", NULL),
++	{}
++};
++
++static struct of_dev_auxdata msm8974_auxdata_lookup[] __initdata = {
++	OF_DEV_AUXDATA("qcom,hsusb-otg", 0xF9A55000, \
++			"msm_otg", NULL),
++	OF_DEV_AUXDATA("qcom,ehci-host", 0xF9A55000, \
++			"msm_ehci_host", NULL),
++	OF_DEV_AUXDATA("qcom,dwc-usb3-msm", 0xF9200000, \
++			"msm_dwc3", NULL),
++	OF_DEV_AUXDATA("qcom,usb-bam-msm", 0xF9304000, \
++			"usb_bam", NULL),
++	OF_DEV_AUXDATA("qcom,spi-qup-v2", 0xF9924000, \
++			"spi_qsd.1", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9824000, \
++			"msm_sdcc.1", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98A4000, \
++			"msm_sdcc.2", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9864000, \
++			"msm_sdcc.3", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98E4000, \
++			"msm_sdcc.4", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9824900, \
++			"msm_sdcc.1", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98A4900, \
++			"msm_sdcc.2", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9864900, \
++			"msm_sdcc.3", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98E4900, \
++			"msm_sdcc.4", NULL),
++	OF_DEV_AUXDATA("qcom,msm-rng", 0xF9BFF000, \
++			"msm_rng", NULL),
++	OF_DEV_AUXDATA("qcom,qseecom", 0xFE806000, \
++			"qseecom", NULL),
++	OF_DEV_AUXDATA("qcom,mdss_mdp", 0xFD900000, "mdp.0", NULL),
++	OF_DEV_AUXDATA("qcom,msm-tsens", 0xFC4A8000, \
++			"msm-tsens", NULL),
++	OF_DEV_AUXDATA("qcom,qcedev", 0xFD440000, \
++			"qcedev.0", NULL),
++	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, \
++			"msm_hsic_host", NULL),
++	OF_DEV_AUXDATA("qcom,hsic-smsc-hub", 0, "msm_smsc_hub",
++			msm_hsic_host_adata),
++	{}
++};
++
++/* LGE_CHANGE, yeri.lee@lge.com, 2013-10-31, wm5110 Bring up*/
++#ifdef CONFIG_MFD_WM5110
++static struct slim_device wm5110_slim_audio = {
++	.name = "wm5110-slim-audio",
++	.e_addr = {0x00, 0x00, 0x10, 0x51, 0x2f, 0x01 },
++};
++
++static struct slim_boardinfo msm_slim_devices[] = {
++	{
++		.bus_num = 1,
++		.slim_slave = &wm5110_slim_audio,
++	},
++};
++#endif
++
++static void __init msm8974_map_io(void)
++{
++	msm_map_8974_io();
++}
++
++void __init msm8974_init(void)
++{
++	struct of_dev_auxdata *adata = msm8974_auxdata_lookup;
++
++	if (socinfo_init() < 0)
++		pr_err("%s: socinfo_init() failed\n", __func__);
++
++	msm_8974_init_gpiomux();
++	regulator_has_full_constraints();
++	board_dt_populate(adata);
++	msm8974_add_drivers();
++#ifdef CONFIG_MFD_WM5110
++	/* Register the Wolfson WM5119 slimbus codec */
++	slim_register_board_info(msm_slim_devices, 1);
++#endif
++}
++
++void __init msm8974_init_very_early(void)
++{
++	msm8974_early_memory();
++}
++
++static const char *msm8974_dt_match[] __initconst = {
++	"qcom,msm8974",
++	"qcom,apq8074",
++	NULL
++};
++
++DT_MACHINE_START(MSM8974_DT, "Qualcomm MSM 8974 (Flattened Device Tree)")
++	.map_io = msm8974_map_io,
++	.init_irq = msm_dt_init_irq,
++	.init_machine = msm8974_init,
++	.handle_irq = gic_handle_irq,
++	.timer = &msm_dt_timer,
++	.dt_compat = msm8974_dt_match,
++	.reserve = msm_8974_reserve,
++	.init_very_early = msm8974_init_very_early,
++	.restart = msm_restart,
++	.smp = &msm8974_smp_ops,
++MACHINE_END
+diff --git a/arch/arm/mach-msm/lge/board-8974-g3-kddi.c b/arch/arm/mach-msm/lge/board-8974-g3-kddi.c
+new file mode 100644
+index 0000000..be8eb70
+--- /dev/null
++++ b/arch/arm/mach-msm/lge/board-8974-g3-kddi.c
+@@ -0,0 +1,238 @@
++/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
++ *
++ * This program is free software; you can redistribute it and/or modify
++ * it under the terms of the GNU General Public License version 2 and
++ * only version 2 as published by the Free Software Foundation.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ */
++
++#include <linux/err.h>
++#include <linux/kernel.h>
++#include <linux/platform_device.h>
++#include <linux/io.h>
++#include <linux/irq.h>
++#include <linux/irqdomain.h>
++#include <linux/of.h>
++#include <linux/of_address.h>
++#include <linux/of_platform.h>
++#include <linux/memory.h>
++#include <linux/regulator/machine.h>
++#include <linux/regulator/krait-regulator.h>
++#include <linux/msm_tsens.h>
++#include <linux/msm_thermal.h>
++#include <asm/mach/map.h>
++#include <asm/hardware/gic.h>
++#include <asm/mach/map.h>
++#include <asm/mach/arch.h>
++#include <mach/board.h>
++#include <mach/gpiomux.h>
++#include <mach/msm_iomap.h>
++#ifdef CONFIG_ION_MSM
++#include <mach/ion.h>
++#endif
++#include <mach/msm_memtypes.h>
++#include <mach/msm_smd.h>
++#include <mach/restart.h>
++#include <mach/rpm-smd.h>
++#include <mach/rpm-regulator-smd.h>
++#include <mach/socinfo.h>
++#include <mach/msm_smem.h>
++#include "../board-dt.h"
++#include "../clock.h"
++#include "../devices.h"
++#include "../spm.h"
++#include "../pm.h"
++#include "../modem_notifier.h"
++#include "../platsmp.h"
++#include <mach/board_lge.h>
++
++#ifdef CONFIG_MFD_WM5110
++#include <linux/slimbus/slimbus.h>
++#endif
++
++static struct memtype_reserve msm8974_reserve_table[] __initdata = {
++	[MEMTYPE_SMI] = {
++	},
++	[MEMTYPE_EBI0] = {
++		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
++	},
++	[MEMTYPE_EBI1] = {
++		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
++	},
++};
++
++static int msm8974_paddr_to_memtype(phys_addr_t paddr)
++{
++	return MEMTYPE_EBI1;
++}
++
++static struct reserve_info msm8974_reserve_info __initdata = {
++	.memtype_reserve_table = msm8974_reserve_table,
++	.paddr_to_memtype = msm8974_paddr_to_memtype,
++};
++
++void __init msm_8974_reserve(void)
++{
++	reserve_info = &msm8974_reserve_info;
++	of_scan_flat_dt(dt_scan_for_memory_reserve, msm8974_reserve_table);
++#ifdef CONFIG_MACH_LGE
++	of_scan_flat_dt(lge_init_dt_scan_chosen, NULL);
++#endif
++	msm_reserve();
++	lge_reserve();
++}
++
++static void __init msm8974_early_memory(void)
++{
++	reserve_info = &msm8974_reserve_info;
++	of_scan_flat_dt(dt_scan_for_memory_hole, msm8974_reserve_table);
++}
++
++/*
++ * Used to satisfy dependencies for devices that need to be
++ * run early or in a particular order. Most likely your device doesn't fall
++ * into this category, and thus the driver should not be added here. The
++ * EPROBE_DEFER can satisfy most dependency problems.
++ */
++/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
++extern void init_bcm_wifi(void);
++#endif
++/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++
++void __init msm8974_add_drivers(void)
++{
++	msm_smem_init();
++	msm_init_modem_notifier_list();
++	msm_smd_init();
++	msm_rpm_driver_init();
++	msm_pm_sleep_status_init();
++	rpm_regulator_smd_driver_init();
++	msm_spm_device_init();
++	krait_power_init();
++	if (of_board_is_rumi())
++		msm_clock_init(&msm8974_rumi_clock_init_data);
++	else
++		msm_clock_init(&msm8974_clock_init_data);
++	tsens_tm_init_driver();
++	msm_thermal_device_init();
++	lge_add_persistent_device();
++#ifdef CONFIG_LGE_QFPROM_INTERFACE
++	lge_add_qfprom_devices();
++#endif
++/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
++	init_bcm_wifi();
++#endif
++/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++#ifdef CONFIG_USB_G_LGE_ANDROID
++	lge_add_android_usb_devices();
++#endif
++
++}
++
++static struct of_dev_auxdata msm8974_auxdata_lookup[] __initdata = {
++	OF_DEV_AUXDATA("qcom,hsusb-otg", 0xF9A55000, \
++			"msm_otg", NULL),
++	OF_DEV_AUXDATA("qcom,ehci-host", 0xF9A55000, \
++			"msm_ehci_host", NULL),
++	OF_DEV_AUXDATA("qcom,dwc-usb3-msm", 0xF9200000, \
++			"msm_dwc3", NULL),
++	OF_DEV_AUXDATA("qcom,usb-bam-msm", 0xF9304000, \
++			"usb_bam", NULL),
++	OF_DEV_AUXDATA("qcom,spi-qup-v2", 0xF9924000, \
++			"spi_qsd.1", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9824000, \
++			"msm_sdcc.1", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98A4000, \
++			"msm_sdcc.2", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9864000, \
++			"msm_sdcc.3", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98E4000, \
++			"msm_sdcc.4", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9824900, \
++			"msm_sdcc.1", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98A4900, \
++			"msm_sdcc.2", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9864900, \
++			"msm_sdcc.3", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98E4900, \
++			"msm_sdcc.4", NULL),
++	OF_DEV_AUXDATA("qcom,msm-rng", 0xF9BFF000, \
++			"msm_rng", NULL),
++	OF_DEV_AUXDATA("qcom,qseecom", 0xFE806000, \
++			"qseecom", NULL),
++	OF_DEV_AUXDATA("qcom,mdss_mdp", 0xFD900000, "mdp.0", NULL),
++	OF_DEV_AUXDATA("qcom,msm-tsens", 0xFC4A8000, \
++			"msm-tsens", NULL),
++	OF_DEV_AUXDATA("qcom,qcedev", 0xFD440000, \
++			"qcedev.0", NULL),
++	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, \
++			"msm_hsic_host", NULL),
++	{}
++};
++
++/* LGE_CHANGE, yeri.lee@lge.com, 2013-10-31, wm5110 Bring up*/
++#ifdef CONFIG_MFD_WM5110
++static struct slim_device wm5110_slim_audio = {
++	.name = "wm5110-slim-audio",
++	.e_addr = {0x00, 0x00, 0x10, 0x51, 0x2f, 0x01 },
++};
++
++static struct slim_boardinfo msm_slim_devices[] = {
++	{
++		.bus_num = 1,
++		.slim_slave = &wm5110_slim_audio,
++	},
++};
++#endif
++
++static void __init msm8974_map_io(void)
++{
++	msm_map_8974_io();
++}
++
++void __init msm8974_init(void)
++{
++	struct of_dev_auxdata *adata = msm8974_auxdata_lookup;
++
++	if (socinfo_init() < 0)
++		pr_err("%s: socinfo_init() failed\n", __func__);
++
++	msm_8974_init_gpiomux();
++	regulator_has_full_constraints();
++	board_dt_populate(adata);
++	msm8974_add_drivers();
++#ifdef CONFIG_MFD_WM5110
++	/* Register the Wolfson WM5119 slimbus codec */
++	slim_register_board_info(msm_slim_devices, 1);
++#endif
++}
++
++void __init msm8974_init_very_early(void)
++{
++	msm8974_early_memory();
++}
++
++static const char *msm8974_dt_match[] __initconst = {
++	"qcom,msm8974",
++	"qcom,apq8074",
++	NULL
++};
++
++DT_MACHINE_START(MSM8974_DT, "Qualcomm MSM 8974 (Flattened Device Tree)")
++	.map_io = msm8974_map_io,
++	.init_irq = msm_dt_init_irq,
++	.init_machine = msm8974_init,
++	.handle_irq = gic_handle_irq,
++	.timer = &msm_dt_timer,
++	.dt_compat = msm8974_dt_match,
++	.reserve = msm_8974_reserve,
++	.init_very_early = msm8974_init_very_early,
++	.restart = msm_restart,
++	.smp = &msm8974_smp_ops,
++MACHINE_END
+diff --git a/arch/arm/mach-msm/lge/board-8974-g3-kr.c b/arch/arm/mach-msm/lge/board-8974-g3-kr.c
+new file mode 100644
+index 0000000..334e1af
+--- /dev/null
++++ b/arch/arm/mach-msm/lge/board-8974-g3-kr.c
+@@ -0,0 +1,263 @@
++/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
++ *
++ * This program is free software; you can redistribute it and/or modify
++ * it under the terms of the GNU General Public License version 2 and
++ * only version 2 as published by the Free Software Foundation.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ */
++
++#include <linux/err.h>
++#include <linux/kernel.h>
++#include <linux/platform_device.h>
++#include <linux/io.h>
++#include <linux/irq.h>
++#include <linux/irqdomain.h>
++#include <linux/of.h>
++#include <linux/of_address.h>
++#include <linux/of_platform.h>
++#include <linux/memory.h>
++#include <linux/regulator/machine.h>
++#include <linux/regulator/krait-regulator.h>
++#include <linux/msm_tsens.h>
++#include <linux/msm_thermal.h>
++#include <asm/mach/map.h>
++#include <asm/hardware/gic.h>
++#include <asm/mach/map.h>
++#include <asm/mach/arch.h>
++#include <mach/board.h>
++#include <mach/gpiomux.h>
++#include <mach/msm_iomap.h>
++#ifdef CONFIG_ION_MSM
++#include <mach/ion.h>
++#endif
++#include <mach/msm_memtypes.h>
++#include <mach/msm_smd.h>
++#include <mach/restart.h>
++#include <mach/rpm-smd.h>
++#include <mach/rpm-regulator-smd.h>
++#include <mach/socinfo.h>
++#include <mach/msm_smem.h>
++#include "../board-dt.h"
++#include "../clock.h"
++#include "../devices.h"
++#include "../spm.h"
++#include "../pm.h"
++#include "../modem_notifier.h"
++#include "../platsmp.h"
++#include <mach/board_lge.h>
++
++#ifdef CONFIG_MFD_WM5110
++#include <linux/slimbus/slimbus.h>
++#endif
++
++static struct memtype_reserve msm8974_reserve_table[] __initdata = {
++	[MEMTYPE_SMI] = {
++	},
++	[MEMTYPE_EBI0] = {
++		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
++	},
++	[MEMTYPE_EBI1] = {
++		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
++	},
++};
++
++static int msm8974_paddr_to_memtype(phys_addr_t paddr)
++{
++	return MEMTYPE_EBI1;
++}
++
++static struct reserve_info msm8974_reserve_info __initdata = {
++	.memtype_reserve_table = msm8974_reserve_table,
++	.paddr_to_memtype = msm8974_paddr_to_memtype,
++};
++
++void __init msm_8974_reserve(void)
++{
++	reserve_info = &msm8974_reserve_info;
++	of_scan_flat_dt(dt_scan_for_memory_reserve, msm8974_reserve_table);
++#ifdef CONFIG_MACH_LGE
++	of_scan_flat_dt(lge_init_dt_scan_chosen, NULL);
++#endif
++	msm_reserve();
++	lge_reserve();
++}
++
++static void __init msm8974_early_memory(void)
++{
++	reserve_info = &msm8974_reserve_info;
++	of_scan_flat_dt(dt_scan_for_memory_hole, msm8974_reserve_table);
++}
++
++#ifdef CONFIG_LGE_LCD_TUNING
++static struct platform_device lcd_misc_device = {
++	.name = "lcd_misc_msm",
++	.id = 0,
++};
++
++void __init lge_add_lcd_misc_devices(void)
++{
++	platform_device_register(&lcd_misc_device);
++}
++#endif
++
++/*
++ * Used to satisfy dependencies for devices that need to be
++ * run early or in a particular order. Most likely your device doesn't fall
++ * into this category, and thus the driver should not be added here. The
++ * EPROBE_DEFER can satisfy most dependency problems.
++ */
++/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
++extern void init_bcm_wifi(void);
++#endif
++/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++
++void __init msm8974_add_drivers(void)
++{
++	msm_smem_init();
++	msm_init_modem_notifier_list();
++	msm_smd_init();
++	msm_rpm_driver_init();
++	msm_pm_sleep_status_init();
++	rpm_regulator_smd_driver_init();
++	msm_spm_device_init();
++	krait_power_init();
++	if (of_board_is_rumi())
++		msm_clock_init(&msm8974_rumi_clock_init_data);
++	else
++		msm_clock_init(&msm8974_clock_init_data);
++	tsens_tm_init_driver();
++	msm_thermal_device_init();
++#ifdef CONFIG_LGE_QFPROM_INTERFACE
++	lge_add_qfprom_devices();
++#endif
++#ifdef CONFIG_LGE_LCD_TUNING
++	lge_add_lcd_misc_devices();
++#endif
++	lge_add_persistent_device();
++/* LGE_CHANGE_S, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++#if defined (CONFIG_BCMDHD) || defined (CONFIG_BCMDHD_MODULE)
++	init_bcm_wifi();
++#endif
++/* LGE_CHANGE_E, [WiFi][jaewoo.hwang@lge.com], 2013-01-28, Wifi Bring Up */
++#if defined(CONFIG_LGE_PM_BATTERY_ID_CHECKER)
++	lge_battery_id_devices();
++#endif
++#ifdef CONFIG_USB_G_LGE_ANDROID
++	lge_add_android_usb_devices();
++#endif
++
++}
++
++static struct of_dev_auxdata msm_hsic_host_adata[] = {
++	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, "msm_hsic_host", NULL),
++	{}
++};
++
++static struct of_dev_auxdata msm8974_auxdata_lookup[] __initdata = {
++	OF_DEV_AUXDATA("qcom,hsusb-otg", 0xF9A55000, \
++			"msm_otg", NULL),
++	OF_DEV_AUXDATA("qcom,ehci-host", 0xF9A55000, \
++			"msm_ehci_host", NULL),
++	OF_DEV_AUXDATA("qcom,dwc-usb3-msm", 0xF9200000, \
++			"msm_dwc3", NULL),
++	OF_DEV_AUXDATA("qcom,usb-bam-msm", 0xF9304000, \
++			"usb_bam", NULL),
++	OF_DEV_AUXDATA("qcom,spi-qup-v2", 0xF9924000, \
++			"spi_qsd.1", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9824000, \
++			"msm_sdcc.1", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98A4000, \
++			"msm_sdcc.2", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9864000, \
++			"msm_sdcc.3", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98E4000, \
++			"msm_sdcc.4", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9824900, \
++			"msm_sdcc.1", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98A4900, \
++			"msm_sdcc.2", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9864900, \
++			"msm_sdcc.3", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98E4900, \
++			"msm_sdcc.4", NULL),
++	OF_DEV_AUXDATA("qcom,msm-rng", 0xF9BFF000, \
++			"msm_rng", NULL),
++	OF_DEV_AUXDATA("qcom,qseecom", 0xFE806000, \
++			"qseecom", NULL),
++	OF_DEV_AUXDATA("qcom,mdss_mdp", 0xFD900000, "mdp.0", NULL),
++	OF_DEV_AUXDATA("qcom,msm-tsens", 0xFC4A8000, \
++			"msm-tsens", NULL),
++	OF_DEV_AUXDATA("qcom,qcedev", 0xFD440000, \
++			"qcedev.0", NULL),
++	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, \
++			"msm_hsic_host", NULL),
++	OF_DEV_AUXDATA("qcom,hsic-smsc-hub", 0, "msm_smsc_hub",
++			msm_hsic_host_adata),
++	{}
++};
++
++/* LGE_CHANGE, yeri.lee@lge.com, 2013-10-31, wm5110 Bring up*/
++#ifdef CONFIG_MFD_WM5110
++static struct slim_device wm5110_slim_audio = {
++	.name = "wm5110-slim-audio",
++	.e_addr = {0x00, 0x00, 0x10, 0x51, 0x2f, 0x01 },
++};
++
++static struct slim_boardinfo msm_slim_devices[] = {
++	{
++		.bus_num = 1,
++		.slim_slave = &wm5110_slim_audio,
++	},
++};
++#endif
++
++static void __init msm8974_map_io(void)
++{
++	msm_map_8974_io();
++}
++
++void __init msm8974_init(void)
++{
++	struct of_dev_auxdata *adata = msm8974_auxdata_lookup;
++
++	if (socinfo_init() < 0)
++		pr_err("%s: socinfo_init() failed\n", __func__);
++
++	msm_8974_init_gpiomux();
++	regulator_has_full_constraints();
++	board_dt_populate(adata);
++	msm8974_add_drivers();
++#ifdef CONFIG_MFD_WM5110
++	/* Register the Wolfson WM5119 slimbus codec */
++	slim_register_board_info(msm_slim_devices, 1);
++#endif
++}
++
++void __init msm8974_init_very_early(void)
++{
++	msm8974_early_memory();
++}
++
++static const char *msm8974_dt_match[] __initconst = {
++	"qcom,msm8974",
++	"qcom,apq8074",
++	NULL
++};
++
++DT_MACHINE_START(MSM8974_DT, "Qualcomm MSM 8974 (Flattened Device Tree)")
++	.map_io = msm8974_map_io,
++	.init_irq = msm_dt_init_irq,
++	.init_machine = msm8974_init,
++	.handle_irq = gic_handle_irq,
++	.timer = &msm_dt_timer,
++	.dt_compat = msm8974_dt_match,
++	.reserve = msm_8974_reserve,
++	.init_very_early = msm8974_init_very_early,
++	.restart = msm_restart,
++	.smp = &msm8974_smp_ops,
++MACHINE_END
+diff --git a/arch/arm/mach-msm/lge/board-8974-g3-us.c b/arch/arm/mach-msm/lge/board-8974-g3-us.c
+new file mode 100644
+index 0000000..cca2ff9
+--- /dev/null
++++ b/arch/arm/mach-msm/lge/board-8974-g3-us.c
+@@ -0,0 +1,245 @@
++/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
++ *
++ * This program is free software; you can redistribute it and/or modify
++ * it under the terms of the GNU General Public License version 2 and
++ * only version 2 as published by the Free Software Foundation.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ */
++
++#include <linux/err.h>
++#include <linux/kernel.h>
++#include <linux/platform_device.h>
++#include <linux/io.h>
++#include <linux/irq.h>
++#include <linux/irqdomain.h>
++#include <linux/of.h>
++#include <linux/of_address.h>
++#include <linux/of_platform.h>
++#include <linux/memory.h>
++#include <linux/regulator/machine.h>
++#include <linux/regulator/krait-regulator.h>
++#include <linux/msm_tsens.h>
++#include <linux/msm_thermal.h>
++#include <asm/mach/map.h>
++#include <asm/hardware/gic.h>
++#include <asm/mach/map.h>
++#include <asm/mach/arch.h>
++#include <mach/board.h>
++#include <mach/gpiomux.h>
++#include <mach/msm_iomap.h>
++#ifdef CONFIG_ION_MSM
++#include <mach/ion.h>
++#endif
++#include <mach/msm_memtypes.h>
++#include <mach/msm_smd.h>
++#include <mach/restart.h>
++#include <mach/rpm-smd.h>
++#include <mach/rpm-regulator-smd.h>
++#include <mach/socinfo.h>
++#include <mach/msm_smem.h>
++#include "../board-dt.h"
++#include "../clock.h"
++#include "../devices.h"
++#include "../spm.h"
++#include "../pm.h"
++#include "../modem_notifier.h"
++#include "../platsmp.h"
++#include <mach/board_lge.h>
++
++static struct memtype_reserve msm8974_reserve_table[] __initdata = {
++	[MEMTYPE_SMI] = {
++	},
++	[MEMTYPE_EBI0] = {
++		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
++	},
++	[MEMTYPE_EBI1] = {
++		.flags	=	MEMTYPE_FLAGS_1M_ALIGN,
++	},
++};
++
++static int msm8974_paddr_to_memtype(phys_addr_t paddr)
++{
++	return MEMTYPE_EBI1;
++}
++
++static struct reserve_info msm8974_reserve_info __initdata = {
++	.memtype_reserve_table = msm8974_reserve_table,
++	.paddr_to_memtype = msm8974_paddr_to_memtype,
++};
++
++void __init msm_8974_reserve(void)
++{
++	reserve_info = &msm8974_reserve_info;
++	of_scan_flat_dt(dt_scan_for_memory_reserve, msm8974_reserve_table);
++#ifdef CONFIG_MACH_LGE
++	of_scan_flat_dt(lge_init_dt_scan_chosen, NULL);
++#endif
++	msm_reserve();
++	lge_reserve();
++}
++
++static void __init msm8974_early_memory(void)
++{
++	reserve_info = &msm8974_reserve_info;
++	of_scan_flat_dt(dt_scan_for_memory_hole, msm8974_reserve_table);
++}
++
++#ifdef CONFIG_LGE_LCD_TUNING
++static struct platform_device lcd_misc_device = {
++	.name = "lcd_misc_msm",
++	.id = 0,
++};
++
++void __init lge_add_lcd_misc_devices(void)
++{
++	platform_device_register(&lcd_misc_device);
++}
++#endif
++
++/*
++ * Used to satisfy dependencies for devices that need to be
++ * run early or in a particular order. Most likely your device doesn't fall
++ * into this category, and thus the driver should not be added here. The
++ * EPROBE_DEFER can satisfy most dependency problems.
++ */
++/* LGE_CHANGE_S, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
++#if defined(CONFIG_BCMDHD) || defined(CONFIG_BCMDHD_MODULE)
++extern void init_bcm_wifi(void);
++#endif
++/* LGE_CHANGE_E, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
++
++void __init msm8974_add_drivers(void)
++{
++	msm_smem_init();
++	msm_init_modem_notifier_list();
++	msm_smd_init();
++	msm_rpm_driver_init();
++	msm_pm_sleep_status_init();
++	rpm_regulator_smd_driver_init();
++	msm_spm_device_init();
++	krait_power_init();
++	if (of_board_is_rumi())
++		msm_clock_init(&msm8974_rumi_clock_init_data);
++	else
++		msm_clock_init(&msm8974_clock_init_data);
++	tsens_tm_init_driver();
++	msm_thermal_device_init();
++	lge_add_persistent_device();
++#ifdef CONFIG_LGE_QFPROM_INTERFACE
++	lge_add_qfprom_devices();
++#endif
++#ifdef CONFIG_LGE_DIAG_ENABLE_SYSFS
++	lge_add_diag_devices();
++#endif
++#ifdef CONFIG_LGE_LCD_TUNING
++	lge_add_lcd_misc_devices();
++#endif
++/* LGE_CHANGE_S, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
++#if defined(CONFIG_BCMDHD) || defined(CONFIG_BCMDHD_MODULE)
++	init_bcm_wifi();
++#endif
++/* LGE_CHANGE_E, [WiFi][hayun.kim@lge.com], 2013-01-22, Wifi Bring Up */
++#if defined(CONFIG_LGE_PM_BATTERY_ID_CHECKER)
++	lge_battery_id_devices();
++#endif
++#ifdef CONFIG_LGE_QSDL_SUPPORT
++	lge_add_qsdl_device();
++#endif
++#ifdef CONFIG_USB_G_LGE_ANDROID
++	lge_add_android_usb_devices();
++#endif
++}
++
++static struct of_dev_auxdata msm_hsic_host_adata[] = {
++	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, "msm_hsic_host", NULL),
++	{}
++};
++
++static struct of_dev_auxdata msm8974_auxdata_lookup[] __initdata = {
++	OF_DEV_AUXDATA("qcom,hsusb-otg", 0xF9A55000, \
++			"msm_otg", NULL),
++	OF_DEV_AUXDATA("qcom,ehci-host", 0xF9A55000, \
++			"msm_ehci_host", NULL),
++	OF_DEV_AUXDATA("qcom,dwc-usb3-msm", 0xF9200000, \
++			"msm_dwc3", NULL),
++	OF_DEV_AUXDATA("qcom,usb-bam-msm", 0xF9304000, \
++			"usb_bam", NULL),
++	OF_DEV_AUXDATA("qcom,spi-qup-v2", 0xF9924000, \
++			"spi_qsd.1", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9824000, \
++			"msm_sdcc.1", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98A4000, \
++			"msm_sdcc.2", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF9864000, \
++			"msm_sdcc.3", NULL),
++	OF_DEV_AUXDATA("qcom,msm-sdcc", 0xF98E4000, \
++			"msm_sdcc.4", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9824900, \
++			"msm_sdcc.1", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98A4900, \
++			"msm_sdcc.2", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF9864900, \
++			"msm_sdcc.3", NULL),
++	OF_DEV_AUXDATA("qcom,sdhci-msm", 0xF98E4900, \
++			"msm_sdcc.4", NULL),
++	OF_DEV_AUXDATA("qcom,msm-rng", 0xF9BFF000, \
++			"msm_rng", NULL),
++	OF_DEV_AUXDATA("qcom,qseecom", 0xFE806000, \
++			"qseecom", NULL),
++	OF_DEV_AUXDATA("qcom,mdss_mdp", 0xFD900000, "mdp.0", NULL),
++	OF_DEV_AUXDATA("qcom,msm-tsens", 0xFC4A8000, \
++			"msm-tsens", NULL),
++	OF_DEV_AUXDATA("qcom,qcedev", 0xFD440000, \
++			"qcedev.0", NULL),
++	OF_DEV_AUXDATA("qcom,hsic-host", 0xF9A00000, \
++			"msm_hsic_host", NULL),
++	OF_DEV_AUXDATA("qcom,hsic-smsc-hub", 0, "msm_smsc_hub",
++			msm_hsic_host_adata),
++	{}
++};
++
++static void __init msm8974_map_io(void)
++{
++	msm_map_8974_io();
++}
++
++void __init msm8974_init(void)
++{
++	struct of_dev_auxdata *adata = msm8974_auxdata_lookup;
++
++	if (socinfo_init() < 0)
++		pr_err("%s: socinfo_init() failed\n", __func__);
++
++	msm_8974_init_gpiomux();
++	regulator_has_full_constraints();
++	board_dt_populate(adata);
++	msm8974_add_drivers();
++}
++
++void __init msm8974_init_very_early(void)
++{
++	msm8974_early_memory();
++}
++
++static const char *msm8974_dt_match[] __initconst = {
++	"qcom,msm8974",
++	"qcom,apq8074",
++	NULL
++};
++
++DT_MACHINE_START(MSM8974_DT, "Qualcomm MSM 8974 (Flattened Device Tree)")
++	.map_io = msm8974_map_io,
++	.init_irq = msm_dt_init_irq,
++	.init_machine = msm8974_init,
++	.handle_irq = gic_handle_irq,
++	.timer = &msm_dt_timer,
++	.dt_compat = msm8974_dt_match,
++	.reserve = msm_8974_reserve,
++	.init_very_early = msm8974_init_very_early,
++	.restart = msm_restart,
++	.smp = &msm8974_smp_ops,
++MACHINE_END
+diff --git a/arch/arm/mach-msm/lge/devices_lge.c b/arch/arm/mach-msm/lge/devices_lge.c
+index b559f4b..5e20dc5 100644
+--- a/arch/arm/mach-msm/lge/devices_lge.c
++++ b/arch/arm/mach-msm/lge/devices_lge.c
+@@ -46,16 +46,6 @@
+ /* in drivers/staging/android */
+ #include "ram_console.h"
+ 
+-#if defined(CONFIG_LCD_KCAL)
+-/*             
+-                             
+-                                   
+-   */
+-#include <linux/module.h>
+-#include "../../../../drivers/video/msm/mdss/mdss_fb.h"
+-extern int update_preset_lcdc_lut(void);
+-#endif /* CONFIG_LCD_KCAL */
+-
+ static int cn_arr_len = 3;
+ 
+ struct cn_prop {
+@@ -102,15 +92,15 @@ int __init lge_init_dt_scan_chosen(unsigned long node, const char *uname,
+ 			continue;
+ 		if (type == CELL_U32) {
+ 			u32 = of_get_flat_dt_prop(node, cn_array[i].name, &len);
+-			if (u32 != NULL)
++			if(u32 != NULL)
+ 				cn_array[i].cell_u32 = of_read_ulong(u32, 1);
+ 		} else if (type == CELL_U64) {
+ 			u32 = of_get_flat_dt_prop(node, cn_array[i].name, &len);
+-			if (u32 != NULL)
++			if(u32 != NULL)
+ 				cn_array[i].cell_u64 = of_read_number(u32, 2);
+ 		} else {
+ 			p = of_get_flat_dt_prop(node, cn_array[i].name, &len);
+-			if (p != NULL)
++			if(p != NULL)
+ 				strlcpy(cn_array[i].str, p, len);
+ 		}
+ 		cn_array[i].is_valid = 1;
+@@ -254,7 +244,7 @@ void __init lge_add_persistent_device(void)
+ 
+ 
+ 
+-/*                                                              */
++/* BEGIN : janghyun.baek@lge.com 2012-12-26 For cable detection */
+ #ifdef CONFIG_LGE_PM
+ struct chg_cable_info_table {
+ 	int threshhold;
+@@ -286,7 +276,7 @@ void __init lge_add_qfprom_devices(void)
+ static bool cable_type_defined;
+ static struct chg_cable_info_table pm8941_acc_cable_type_data[MAX_CABLE_NUM];
+ #endif
+-/*                                        */
++/* END : janghyun.baek@lge.com 2012-12-26 */
+ #ifdef CONFIG_LGE_DIAG_ENABLE_SYSFS
+ static struct platform_device lg_diag_cmd_device = {
+ 	.name = "lg_diag_cmd",
+@@ -302,7 +292,7 @@ void __init lge_add_diag_devices(void)
+ }
+ #endif
+ 
+-/*                                                              */
++/* BEGIN : janghyun.baek@lge.com 2012-12-26 For cable detection */
+ #ifdef CONFIG_LGE_PM
+ void get_cable_data_from_dt(void *of_node)
+ {
+@@ -479,7 +469,7 @@ void lge_pm_read_cable_info(struct qpnp_vadc_chip *vadc)
+ 	lge_pm_get_cable_info(vadc, &lge_cable_info);
+ }
+ #endif
+-/*                                                            */
++/* END : janghyun.baek@lge.com 2012-12-26 For cable detection */
+ 
+ #if defined(CONFIG_LGE_KSWITCH)
+ static int kswitch_status;
+@@ -527,13 +517,13 @@ __setup("uart_console=", lge_uart_mode);
+ 	return value : 1 --> right after laf complete & reset
+ */
+ 
+-int android_dlcomplete;
++int android_dlcomplete = 0;
+ 
+ int __init lge_android_dlcomplete(char *s)
+ {
+-	if (strncmp(s, "1", 1) == 0)   /* if same string */
++	if(strncmp(s,"1",1) == 0)   // if same string
+ 		android_dlcomplete = 1;
+-	else	/* not same string */
++	else	// not same string
+ 		android_dlcomplete = 0;
+ 	printk("androidboot.dlcomplete = %d\n", android_dlcomplete);
+ 
+@@ -569,7 +559,7 @@ int __init lge_boot_mode_init(char *s)
+ 	else if (!strcmp(s, "pif_910k"))
+ 		lge_boot_mode = LGE_BOOT_MODE_PIFBOOT3;
+ 	printk("ANDROID BOOT MODE : %d %s\n", lge_boot_mode, s);
+-	/*                            */
++	/* LGE_UPDATE_E for MINIOS2.0 */
+ 
+ 	return 1;
+ }
+@@ -588,17 +578,17 @@ int lge_get_factory_boot(void)
+ 	 *   cable must be factory cable.
+ 	 */
+ 	switch (lge_boot_mode) {
+-	case LGE_BOOT_MODE_FACTORY:
+-	case LGE_BOOT_MODE_FACTORY2:
+-	case LGE_BOOT_MODE_FACTORY3:
+-	case LGE_BOOT_MODE_PIFBOOT:
+-	case LGE_BOOT_MODE_PIFBOOT2:
+-	case LGE_BOOT_MODE_PIFBOOT3:
+-		res = 1;
+-		break;
+-	default:
+-		res = 0;
+-		break;
++		case LGE_BOOT_MODE_FACTORY:
++		case LGE_BOOT_MODE_FACTORY2:
++		case LGE_BOOT_MODE_FACTORY3:
++		case LGE_BOOT_MODE_PIFBOOT:
++		case LGE_BOOT_MODE_PIFBOOT2:
++		case LGE_BOOT_MODE_PIFBOOT3:
++			res = 1;
++			break;
++		default:
++			res = 0;
++			break;
+ 	}
+ 	return res;
+ }
+@@ -621,17 +611,17 @@ int lge_get_factory_cable(void)
+ }
+ 
+ /* for board revision */
+-static hw_rev_type lge_bd_rev = HW_REV_1_0; /* HW_REV_B; */
++static hw_rev_type lge_bd_rev = HW_REV_C; //HW_REV_B;
+ 
+ /* CAUTION: These strings are come from LK. */
+-#if defined (CONFIG_MACH_MSM8974_G3_GLOBAL_COM) || defined (CONFIG_MACH_MSM8974_G3_KDDI)
++#if defined (CONFIG_MACH_MSM8974_G3_GLOBAL_COM) ||defined (CONFIG_MACH_MSM8974_G3_KDDI)
+ char *rev_str[] = {"evb1", "evb2", "rev_a", "rev_a1", "rev_b", "rev_c", "rev_d",
+-	"rev_e", "rev_g", "rev_h", "rev_10", "rev_11", "rev_12",
+-	"reserved"};
++	"rev_e","rev_g", "rev_h", "rev_10", "rev_11", "rev_12",
++	"revserved"};
+ #else
+ char *rev_str[] = {"evb1", "evb2", "rev_a", "rev_b", "rev_c", "rev_d",
+ 	"rev_e", "rev_f", "rev_g", "rev_h", "rev_10", "rev_11", "rev_12",
+-	"reserved"};
++	"revserved"};
+ #endif
+ 
+ static int __init board_revno_setup(char *rev_info)
+@@ -657,105 +647,6 @@ hw_rev_type lge_get_board_revno(void)
+     return lge_bd_rev;
+ }
+ 
+-#ifdef CONFIG_LGE_LCD_TUNING
+-static struct platform_device lcd_misc_device = {
+-	.name = "lcd_misc_msm",
+-	.id = 0,
+-};
+-
+-void __init lge_add_lcd_misc_devices(void)
+-{
+-	platform_device_register(&lcd_misc_device);
+-}
+-#endif
+-
+-#ifdef CONFIG_LCD_KCAL
+-/*             
+-                          
+-                                
+-*/
+-int g_kcal_r = 255;
+-int g_kcal_g = 255;
+-int g_kcal_b = 255;
+-
+-int kcal_set_values(int kcal_r, int kcal_g, int kcal_b)
+-{
+-#if 0
+-	int is_update = 0;
+-
+-	int kcal_r_limit = 250;
+-	int kcal_g_limit = 250;
+-	int kcal_b_limit = 253;
+-
+-	g_kcal_r = kcal_r < kcal_r_limit ? kcal_r_limit : kcal_r;
+-	g_kcal_g = kcal_g < kcal_g_limit ? kcal_g_limit : kcal_g;
+-	g_kcal_b = kcal_b < kcal_b_limit ? kcal_b_limit : kcal_b;
+-
+-	if (kcal_r < kcal_r_limit || kcal_g < kcal_g_limit || kcal_b < kcal_b_limit)
+-		is_update = 1;
+-	if (is_update)
+-		update_preset_lcdc_lut();
+-#else
+-	g_kcal_r = kcal_r;
+-	g_kcal_g = kcal_g;
+-	g_kcal_b = kcal_b;
+-#endif
+-	return 0;
+-}
+-
+-static int kcal_get_values(int *kcal_r, int *kcal_g, int *kcal_b)
+-{
+-	*kcal_r = g_kcal_r;
+-	*kcal_g = g_kcal_g;
+-	*kcal_b = g_kcal_b;
+-	return 0;
+-}
+-
+-static int kcal_refresh_values(void)
+-{
+-	return update_preset_lcdc_lut();
+-}
+-
+-static struct kcal_platform_data kcal_pdata = {
+-	.set_values = kcal_set_values,
+-	.get_values = kcal_get_values,
+-	.refresh_display = kcal_refresh_values
+-};
+-
+-static struct platform_device kcal_platrom_device = {
+-	.name   = "kcal_ctrl",
+-	.dev = {
+-		.platform_data = &kcal_pdata,
+-	}
+-};
+-
+-static int __init display_kcal_setup(char *kcal)
+-{
+-	char vaild_k = 0;
+-	int kcal_r = 255;
+-	int kcal_g = 255;
+-	int kcal_b = 255;
+-
+-	sscanf(kcal, "%d|%d|%d|%c", &kcal_r, &kcal_g, &kcal_b, &vaild_k);
+-	pr_info("kcal is %d|%d|%d|%c\n", kcal_r, kcal_g, kcal_b, vaild_k);
+-
+-	if (vaild_k != 'K') {
+-		pr_info("kcal not calibrated yet : %d\n", vaild_k);
+-		kcal_r = kcal_g = kcal_b = 255;
+-	}
+-
+-	kcal_set_values(kcal_r, kcal_g, kcal_b);
+-	return 1;
+-}
+-__setup("lge.kcal=", display_kcal_setup);
+-
+-void __init lge_add_lcd_kcal_devices(void)
+-{
+-	pr_info(" KCAL_DEBUG : %s\n", __func__);
+-	platform_device_register(&kcal_platrom_device);
+-}
+-#endif
+-
+ #if defined(CONFIG_LGE_PM_BATTERY_ID_CHECKER)
+ struct lge_battery_id_platform_data lge_battery_id_plat = {
+ 	.id = 13,
+@@ -780,8 +671,8 @@ static enum lge_laf_mode_type lge_laf_mode = LGE_LAF_MODE_NORMAL;
+ 
+ int __init lge_laf_mode_init(char *s)
+ {
+-    if (strcmp(s, "") && strcmp(s, "MID"))
+-        lge_laf_mode = LGE_LAF_MODE_LAF;
++	if (strcmp(s, ""))
++		lge_laf_mode = LGE_LAF_MODE_LAF;
+ 
+ 	return 1;
+ }
+@@ -824,7 +715,6 @@ int lge_get_kswitch_status(void)
+ {
+     return kswitch_status;
+ }
+-#endif
+ 
+ static int lge_boot_reason = -1; /* undefined for error checking */
+ static int __init lge_check_bootreason(char *reason)
+@@ -871,29 +761,29 @@ void __init lge_add_qsdl_device(void)
+ {
+ 	platform_device_register(&lge_qsdl_device);
+ }
+-#endif /*                         */
++#endif /* CONFIG_LGE_QSDL_SUPPORT */
+ 
+ #ifdef CONFIG_USB_G_LGE_ANDROID
+ static int get_factory_cable(void)
+ {
+ 	int res;
+ 
+ 	switch (lge_boot_mode) {
+-	case LGE_BOOT_MODE_FACTORY:
+-	case LGE_BOOT_MODE_PIFBOOT:
+-		res = LGEUSB_FACTORY_130K;
+-		break;
+-	case LGE_BOOT_MODE_FACTORY2:
+-	case LGE_BOOT_MODE_PIFBOOT2:
+-		res = LGEUSB_FACTORY_56K;
+-		break;
+-	case LGE_BOOT_MODE_FACTORY3:
+-	case LGE_BOOT_MODE_PIFBOOT3:
+-		res = LGEUSB_FACTORY_910K;
+-		break;
+-	default:
+-		res = 0;
+-		break;
++		case LGE_BOOT_MODE_FACTORY:
++		case LGE_BOOT_MODE_PIFBOOT:
++			res = LGEUSB_FACTORY_130K;
++			break;
++		case LGE_BOOT_MODE_FACTORY2:
++		case LGE_BOOT_MODE_PIFBOOT2:
++			res = LGEUSB_FACTORY_56K;
++			break;
++		case LGE_BOOT_MODE_FACTORY3:
++		case LGE_BOOT_MODE_PIFBOOT3:
++			res = LGEUSB_FACTORY_910K;
++			break;
++		default:
++			res = 0;
++			break;
+ 	}
+ 	return res;
+ }
+@@ -920,3 +810,4 @@ void __init lge_add_android_usb_devices(void)
+ 	platform_device_register(&lge_android_usb_device);
+ }
+ #endif
++#endif
+diff --git a/drivers/video/msm/mdss/mdss_mdp_pp.c b/drivers/video/msm/mdss/mdss_mdp_pp.c
+index 989b14d..8ef60e1 100644
+--- a/drivers/video/msm/mdss/mdss_mdp_pp.c
++++ b/drivers/video/msm/mdss/mdss_mdp_pp.c
+@@ -22,17 +22,8 @@
+ #include <mach/msm_bus.h>
+ #include <mach/msm_bus_board.h>
+ 
+-#if defined(CONFIG_LCD_KCAL)
+-/*             
+-                          
+-                                
+-*/
+-#include <mach/board_lge.h>
+-extern int g_kcal_r;
+-extern int g_kcal_g;
+-extern int g_kcal_b;
+-extern struct kcal_data kcal_value;
+-#endif /* CONFIG_LCD_KCAL */
++#include "mdss_mdp_kcal_ctrl.h"
++
+ struct mdp_csc_cfg mdp_csc_convert[MDSS_MDP_MAX_CSC] = {
+ 	[MDSS_MDP_CSC_RGB2RGB] = {
+ 		0,
+@@ -83,30 +74,20 @@ struct mdp_csc_cfg mdp_csc_convert[MDSS_MDP_MAX_CSC] = {
+ 		{ 0x0, 0xff, 0x0, 0xff, 0x0, 0xff,},
+ 	},
+ };
+-#if defined(CONFIG_LGE_BROADCAST_TDMB) || defined(CONFIG_LGE_BROADCAST_JFULLSEG)
++
++#if defined(CONFIG_LGE_BROADCAST_TDMB)
+ struct mdp_csc_cfg dmb_csc_convert = {
+ #if defined(CONFIG_MACH_MSM8974_G3_KR)
+ 	0,
+ 	{
+-		0x023e, 0x0000, 0x0331,  /* 287 */
+-		0x0244, 0xff37, 0xfe60,  /* 290 */
+-		0x026c, 0x0409, 0x0000,  /* 310 */
++		0x023e, 0x0000, 0x0331,  //287
++		0x0244, 0xff37, 0xfe60,  //290
++		0x026c, 0x0409, 0x0000,  //310
+ 	},
+ 	{ 0xfff0, 0xff80, 0xff80,},
+ 	{ 0x0, 0x0, 0x0,},
+ 	{ 0x0, 0xff, 0x0, 0xff, 0x0, 0xff,},
+ 	{ 0x0, 0xff, 0x0, 0xff, 0x0, 0xff,},
+-#elif defined(CONFIG_MACH_MSM8974_G3_KDDI)
+-    0,
+-    {
+-		0x023e, 0x0000, 0x0331,  /* 287 */
+-		0x0244, 0xff38, 0xfe61,  /* 290 */
+-		0x026c, 0x0409, 0x0000,  /* 310 */
+-    },
+-    { 0xfff0, 0xff80, 0xff80,},
+-    { 0x0, 0x0, 0x0,},
+-    { 0x0, 0xff, 0x0, 0xff, 0x0, 0xff,},
+-    { 0x0, 0xff, 0x0, 0xff, 0x0, 0xff,},
+ #else
+ 	0,
+ 	{
+@@ -120,18 +101,16 @@ struct mdp_csc_cfg dmb_csc_convert = {
+ 	{ 0x0, 0xff, 0x0, 0xff, 0x0, 0xff,},
+ #endif
+ };
+-#endif /*               */
++#endif /* LGE_BROADCAST */
+ 
+ #define CSC_MV_OFF	0x0
+ #define CSC_BV_OFF	0x2C
+ #define CSC_LV_OFF	0x14
+ #define CSC_POST_OFF	0xC
+ 
+ #define MDSS_BLOCK_DISP_NUM	(MDP_BLOCK_MAX - MDP_LOGICAL_BLOCK_DISP_0)
+ 
+ #define HIST_WAIT_TIMEOUT(frame) ((75 * HZ * (frame)) / 1000)
+-#define HIST_KICKOFF_WAIT_FRACTION 4
+-
+ /* hist collect state */
+ enum {
+ 	HIST_UNKNOWN,
+@@ -232,7 +211,6 @@ static u32 igc_limited[IGC_LUT_ENTRIES] = {
+ #define MDSS_MDP_GAMUT_SIZE		0x5C
+ #define MDSS_MDP_IGC_DSPP_SIZE		0x28
+ #define MDSS_MDP_IGC_SSPP_SIZE		0x88
+-#define MDSS_MDP_VIG_QSEED2_SHARP_SIZE	0x0C
+ #define TOTAL_BLEND_STAGES		0x4
+ 
+ #define PP_FLAGS_DIRTY_PA	0x1
+@@ -364,45 +342,44 @@ struct mdss_pp_res_type {
+ 	struct pp_hist_col_info dspp_hist[MDSS_MDP_MAX_DSPP];
+ };
+ 
+-#ifdef CONFIG_MACH_LGE
+ uint32_t igc_Table_RGB[256] = {
+-		4080	,		4064	,		4048	,		4032	,		4016	,		4000	,		3984	,		3968	,		3952	,		3936	,		3920	,		3904	,
+-		3888	,		3872	,		3856	,		3840	,		3824	,		3808	,		3792	,		3776	,		3760	,		3744	,		3728	,		3712	,
+-		3696	,		3680	,		3664	,		3648	,		3632	,		3616	,		3600	,		3584	,		3568	,		3552	,		3536	,		3520	,
+-		3504	,		3488	,		3472	,		3456	,		3440	,		3424	,		3408	,		3392	,		3376	,		3360	,		3344	,		3328	,
+-		3312	,		3296	,		3280	,		3264	,		3248	,		3232	,		3216	,		3200	,		3184	,		3168	,		3152	,		3136	,
+-		3120	,		3104	,		3088	,		3072	,		3056	,		3040	,		3024	,		3008	,		2992	,		2976	,		2960	,		2944	,
+-		2928	,		2912	,		2896	,		2880	,		2864	,		2848	,		2832	,		2816	,		2800	,		2784	,		2768	,		2752	,
+-		2736	,		2720	,		2704	,		2688	,		2672	,		2656	,		2640	,		2624	,		2608	,		2592	,		2576	,		2560	,
+-		2544	,		2528	,		2512	,		2496	,		2480	,		2464	,		2448	,		2432	,		2416	,		2400	,		2384	,		2368	,
+-		2352	,		2336	,		2320	,		2304	,		2288	,		2272	,		2256	,		2240	,		2224	,		2208	,		2192	,		2176	,
+-		2160	,		2144	,		2128	,		2112	,		2096	,		2080	,		2064	,		2048	,		2032	,		2016	,		2000	,		1984	,
+-		1968	,		1952	,		1936	,		1920	,		1904	,		1888	,		1872	,		1856	,		1840	,		1824	,		1808	,		1792	,
+-		1776	,		1760	,		1744	,		1728	,		1712	,		1696	,		1680	,		1664	,		1648	,		1632	,		1616	,		1600	,
+-		1584	,		1568	,		1552	,		1536	,		1520	,		1504	,		1488	,		1472	,		1456	,		1440	,		1424	,		1408	,
+-		1392	,		1376	,		1360	,		1344	,		1328	,		1312	,		1296	,		1280	,		1264	,		1248	,		1232	,		1216	,
+-		1200	,		1184	,		1168	,		1152	,		1136	,		1120	,		1104	,		1088	,		1072	,		1056	,		1040	,		1024	,
+-		1008	,		992	,		976	,		960	,		944	,		928	,		912	,		896	,		880	,		864	,		848	,		832	,
+-		816	,		800	,		784	,		768	,		752	,		736	,		720	,		704	,		688	,		672	,		656	,		640	,
+-		624	,		608	,		592	,		576	,		560	,		544	,		528	,		512	,		496	,		480	,		464	,		448	,
+-		432	,		416	,		400	,		384	,		368	,		352	,		336	,		320	,		304	,		288	,		272	,		256	,
+-		240	,		224	,		208	,		192	,		176	,		160	,		144	,		128	,		112	,		96	,		80	,		64	,
+-		48	,		32	,		16	,		0
++	4080, 4064, 4048, 4032, 4016, 4000, 3984, 3968, 3952, 3936, 3920, 3904,
++	3888, 3872, 3856, 3840, 3824, 3808, 3792, 3776, 3760, 3744, 3728, 3712,
++	3696, 3680, 3664, 3648, 3632, 3616, 3600, 3584, 3568, 3552, 3536, 3520,
++	3504, 3488, 3472, 3456, 3440, 3424, 3408, 3392, 3376, 3360, 3344, 3328,
++	3312, 3296, 3280, 3264, 3248, 3232, 3216, 3200, 3184, 3168, 3152, 3136,
++	3120, 3104, 3088, 3072, 3056, 3040, 3024, 3008, 2992, 2976, 2960, 2944,
++	2928, 2912, 2896, 2880, 2864, 2848, 2832, 2816, 2800, 2784, 2768, 2752,
++	2736, 2720, 2704, 2688, 2672, 2656, 2640, 2624, 2608, 2592, 2576, 2560,
++	2544, 2528, 2512, 2496, 2480, 2464, 2448, 2432, 2416, 2400, 2384, 2368,
++	2352, 2336, 2320, 2304, 2288, 2272, 2256, 2240, 2224, 2208, 2192, 2176,
++	2160, 2144, 2128, 2112, 2096, 2080, 2064, 2048, 2032, 2016, 2000, 1984,
++	1968, 1952, 1936, 1920, 1904, 1888, 1872, 1856, 1840, 1824, 1808, 1792,
++	1776, 1760, 1744, 1728, 1712, 1696, 1680, 1664, 1648, 1632, 1616, 1600,
++	1584, 1568, 1552, 1536, 1520, 1504, 1488, 1472, 1456, 1440, 1424, 1408,
++	1392, 1376, 1360, 1344, 1328, 1312, 1296, 1280, 1264, 1248, 1232, 1216,
++	1200, 1184, 1168, 1152, 1136, 1120, 1104, 1088, 1072, 1056, 1040, 1024,
++	1008, 992, 976, 960, 944, 928, 912, 896, 880, 864, 848, 832,
++	816, 800, 784, 768, 752, 736, 720, 704, 688, 672, 656, 640,
++	624, 608, 592, 576, 560, 544, 528, 512, 496, 480, 464, 448,
++	432, 416, 400, 384, 368, 352, 336, 320, 304, 288, 272, 256,
++	240, 224, 208, 192, 176, 160, 144, 128, 112, 96, 80, 64,
++	48, 32, 16, 0
+ };
+ int igc_c0_c1[256] = {0,};
+ int igc_c2[256] = {0,};
+ 
+-#endif
+ static DEFINE_MUTEX(mdss_pp_mutex);
+ static struct mdss_pp_res_type *mdss_pp_res;
+-#if defined(CONFIG_LGE_BROADCAST_TDMB) || defined(CONFIG_LGE_BROADCAST_JFULLSEG)
+-static int dmb_status; /* on - 1, off - 0 */
++
++#if defined(CONFIG_LGE_BROADCAST_TDMB)
++static int dmb_status = 0; /* on - 1, off - 0 */
+ int pp_set_dmb_status(int flag)
+ {
+ 	dmb_status = flag;
+ 	return 0;
+ }
+-#endif /*               */
++#endif /* LGE_BROADCAST */
+ 
+ static u32 pp_hist_read(char __iomem *v_addr,
+ 				struct pp_hist_col_info *hist_info);
+@@ -485,27 +462,13 @@ static void pp_ad_bypass_config(struct mdss_ad_info *ad,
+ 				struct mdss_mdp_ctl *ctl, u32 num, u32 *opmode);
+ static int mdss_mdp_ad_setup(struct msm_fb_data_type *mfd);
+ static void pp_ad_cfg_lut(char __iomem *addr, u32 *data);
+-static int pp_ad_attenuate_bl(u32 bl, u32 *bl_out,
+-		struct msm_fb_data_type *mfd);
++static struct msm_fb_data_type *mdss_get_mfd_from_index(int index);
+ static int pp_num_to_side(struct mdss_mdp_ctl *ctl, u32 num);
+ static inline bool pp_sts_is_enabled(u32 sts, int side);
+ static inline void pp_sts_set_split_bits(u32 *sts, u32 bits);
+ 
+ static u32 last_sts, last_state;
+ 
+-inline int linear_map(int in, int *out, int in_max, int out_max)
+-{
+-	if (in < 0 || !out || in_max <= 0 || out_max <= 0)
+-		return -EINVAL;
+-	*out = ((in * out_max) / in_max);
+-	pr_debug("in = %d, out = %d, in_max = %d, out_max = %d\n",
+-		in, *out, in_max, out_max);
+-	if ((in > 0) && (*out == 0))
+-		*out = 1;
+-	return 0;
+-
+-}
+-
+ int mdss_mdp_csc_setup_data(u32 block, u32 blk_idx, u32 tbl_idx,
+ 				   struct mdp_csc_cfg *data)
+ {
+@@ -892,15 +855,9 @@ static int pp_vig_pipe_setup(struct mdss_mdp_pipe *pipe, u32 *op)
+ 	unsigned long flags = 0;
+ 	char __iomem *offset;
+ 	struct mdss_data_type *mdata;
+-	u32 current_opmode;
+-	u32 csc_reset;
+-	u32 dcm_state = DCM_UNINIT;
+ 
+ 	pr_debug("pnum=%x\n", pipe->num);
+ 
+-	if (pipe->mixer && pipe->mixer->ctl && pipe->mixer->ctl->mfd)
+-		dcm_state = pipe->mixer->ctl->mfd->dcm_state;
+-
+ 	mdata = mdss_mdp_get_mdata();
+ 	if ((pipe->flags & MDP_OVERLAY_PP_CFG_EN) &&
+ 		(pipe->pp_cfg.config_ops & MDP_OVERLAY_PP_CSC_CFG)) {
+@@ -914,43 +871,34 @@ static int pp_vig_pipe_setup(struct mdss_mdp_pipe *pipe, u32 *op)
+ 			 * TODO: Allow pipe to be programmed whenever new CSC is
+ 			 * applied (i.e. dirty bit)
+ 			 */
+-			mdss_mdp_csc_setup_data(MDSS_MDP_BLOCK_SSPP, pipe->num,
+-					1, &pipe->pp_cfg.csc_cfg);
++			if (pipe->play_cnt == 0)
++				mdss_mdp_csc_setup_data(MDSS_MDP_BLOCK_SSPP,
++				  pipe->num, 1, &pipe->pp_cfg.csc_cfg);
+ 	} else {
+-		if (pipe->src_fmt->is_yuv) {
++		if (pipe->src_fmt->is_yuv)
+ 			opmode |= (0 << 19) |	/* DST_DATA=RGB */
+ 				  (1 << 18) |	/* SRC_DATA=YCBCR */
+ 				  (1 << 17);	/* CSC_1_EN */
+-			/*
+-			 * TODO: Needs to be part of dirty bit logic: if there
+-			 * is a previously configured pipe need to re-configure
+-			 * CSC matrix
+-			 */
+-#if !defined(CONFIG_LGE_BROADCAST_TDMB) && !defined(CONFIG_LGE_BROADCAST_JFULLSEG)
++		/*
++		 * TODO: Needs to be part of dirty bit logic: if there is a
++		 * previously configured pipe need to re-configure CSC matrix
++		 */
++		if (pipe->play_cnt == 0) {
++#if !defined(CONFIG_LGE_BROADCAST_TDMB)
+ 			mdss_mdp_csc_setup(MDSS_MDP_BLOCK_SSPP, pipe->num, 1,
+ 					   MDSS_MDP_CSC_YUV2RGB);
+ #else
+ 			if (dmb_status == 1) {
+ 				mdss_mdp_csc_setup_data(MDSS_MDP_BLOCK_SSPP, pipe->num, 1, &dmb_csc_convert);
+ 			} else {
+ 				mdss_mdp_csc_setup(MDSS_MDP_BLOCK_SSPP, pipe->num, 1, MDSS_MDP_CSC_YUV2RGB);
+ 			}
+-#endif /*               */
++#endif /* LGE_BROADCAST */
+ 		}
+ 	}
+ 
+ 	pp_histogram_setup(&opmode, MDSS_PP_SSPP_CFG | pipe->num, pipe->mixer);
+ 
+-	/* Update CSC state only if tuning mode is enable */
+-	if (dcm_state == DTM_ENTER) {
+-		/* Reset bit 16 to 19 for CSC_STATE in VIG_OP_MODE */
+-		csc_reset = 0xFFF0FFFF;
+-		current_opmode = readl_relaxed(pipe->base +
+-						MDSS_MDP_REG_VIG_OP_MODE);
+-		*op |= ((current_opmode & csc_reset) | opmode);
+-		return 0;
+-	}
+-
+ 	if (pipe->flags & MDP_OVERLAY_PP_CFG_EN) {
+ 		if ((pipe->pp_cfg.config_ops & MDP_OVERLAY_PP_PA_CFG) &&
+ 				(mdata->mdp_rev < MDSS_MDP_HW_REV_103)) {
+@@ -1036,16 +984,10 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
+ 	u32 filter_mode;
+ 	struct mdss_data_type *mdata;
+ 	u32 src_w, src_h;
+-	u32 dcm_state = DCM_UNINIT;
+-	u32 chroma_shift_x = 0, chroma_shift_y = 0;
+ 
+ 	pr_debug("pipe=%d, change pxl ext=%d\n", pipe->num,
+ 			pipe->scale.enable_pxl_ext);
+ 	mdata = mdss_mdp_get_mdata();
+-
+-	if (pipe->mixer && pipe->mixer->ctl && pipe->mixer->ctl->mfd)
+-		dcm_state = pipe->mixer->ctl->mfd->dcm_state;
+-
+ 	if (mdata->mdp_rev >= MDSS_MDP_HW_REV_102 && pipe->src_fmt->is_yuv)
+ 		filter_mode = MDSS_MDP_SCALE_FILTER_CA;
+ 	else
+@@ -1080,20 +1022,19 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
+ 		pipe->pp_cfg.sharp_cfg.noise_thr = SHARP_NOISE_THR_DEFAULT;
+ 	}
+ 
+-	if (dcm_state != DTM_ENTER &&
+-		((pipe->src_fmt->is_yuv) &&
+-		!((pipe->dst.w < src_w) || (pipe->dst.h < src_h)))) {
+-			pp_sharp_config(pipe->base +
+-			   MDSS_MDP_REG_VIG_QSEED2_SHARP,
+-			   &pipe->pp_res.pp_sts,
+-			   &pipe->pp_cfg.sharp_cfg);
++	if ((pipe->src_fmt->is_yuv) &&
++		!((pipe->dst.w < src_w) || (pipe->dst.h < src_h))) {
++		pp_sharp_config(pipe->base +
++		   MDSS_MDP_REG_VIG_QSEED2_SHARP,
++		   &pipe->pp_res.pp_sts,
++		   &pipe->pp_cfg.sharp_cfg);
+ 	}
+ 
+ 	if ((src_h != pipe->dst.h) ||
+ 	    (pipe->pp_res.pp_sts.sharp_sts & PP_STS_ENABLE) ||
+ 	    (chroma_sample == MDSS_MDP_CHROMA_420) ||
+ 	    (chroma_sample == MDSS_MDP_CHROMA_H1V2) ||
+-	    (pipe->scale.enable_pxl_ext && (src_h != pipe->dst.h))) {
++	    pipe->scale.enable_pxl_ext) {
+ 		pr_debug("scale y - src_h=%d dst_h=%d\n", src_h, pipe->dst.h);
+ 
+ 		if ((src_h / MAX_DOWNSCALE_RATIO) > pipe->dst.h) {
+@@ -1107,10 +1048,11 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
+ 		init_phasey = pipe->scale.init_phase_y[0];
+ 
+ 		if (pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
++			u32 chroma_shift = 0;
+ 			if (!pipe->vert_deci &&
+ 			    ((chroma_sample == MDSS_MDP_CHROMA_420) ||
+ 			    (chroma_sample == MDSS_MDP_CHROMA_H1V2)))
+-				chroma_shift_y = 1; /* 2x upsample chroma */
++				chroma_shift = 1; /* 2x upsample chroma */
+ 
+ 			if (src_h <= pipe->dst.h)
+ 				scale_config |= /* G/Y, A */
+@@ -1121,17 +1063,16 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
+ 					(MDSS_MDP_SCALE_FILTER_PCMN << 10) |
+ 					(MDSS_MDP_SCALE_FILTER_PCMN << 18);
+ 
+-			if ((src_h >> chroma_shift_y) <= pipe->dst.h)
++			if ((src_h >> chroma_shift) <= pipe->dst.h)
+ 				scale_config |= /* CrCb */
+ 					(MDSS_MDP_SCALE_FILTER_BIL << 14);
+ 			else
+ 				scale_config |= /* CrCb */
+ 					(MDSS_MDP_SCALE_FILTER_PCMN << 14);
+ 
+ 			writel_relaxed(init_phasey, pipe->base +
+ 				MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEY);
+-			writel_relaxed(phasey_step >> chroma_shift_y,
+-				pipe->base +
++			writel_relaxed(phasey_step >> chroma_shift, pipe->base +
+ 				MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPY);
+ 		} else {
+ 			if (src_h <= pipe->dst.h)
+@@ -1149,7 +1090,7 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
+ 	    (pipe->pp_res.pp_sts.sharp_sts & PP_STS_ENABLE) ||
+ 	    (chroma_sample == MDSS_MDP_CHROMA_420) ||
+ 	    (chroma_sample == MDSS_MDP_CHROMA_H2V1) ||
+-	    (pipe->scale.enable_pxl_ext && (src_w != pipe->dst.w))) {
++	    pipe->scale.enable_pxl_ext) {
+ 		pr_debug("scale x - src_w=%d dst_w=%d\n", src_w, pipe->dst.w);
+ 
+ 		if ((src_w / MAX_DOWNSCALE_RATIO) > pipe->dst.w) {
+@@ -1163,10 +1104,12 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
+ 		phasex_step = pipe->scale.phase_step_x[0];
+ 
+ 		if (pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
++			u32 chroma_shift = 0;
++
+ 			if (!pipe->horz_deci &&
+ 			    ((chroma_sample == MDSS_MDP_CHROMA_420) ||
+ 			    (chroma_sample == MDSS_MDP_CHROMA_H2V1)))
+-				chroma_shift_x = 1; /* 2x upsample chroma */
++				chroma_shift = 1; /* 2x upsample chroma */
+ 
+ 			if (src_w <= pipe->dst.w)
+ 				scale_config |= /* G/Y, A */
+@@ -1177,17 +1120,16 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
+ 					(MDSS_MDP_SCALE_FILTER_PCMN << 8) |
+ 					(MDSS_MDP_SCALE_FILTER_PCMN << 16);
+ 
+-			if ((src_w >> chroma_shift_x) <= pipe->dst.w)
++			if ((src_w >> chroma_shift) <= pipe->dst.w)
+ 				scale_config |= /* CrCb */
+ 					(MDSS_MDP_SCALE_FILTER_BIL << 12);
+ 			else
+ 				scale_config |= /* CrCb */
+ 					(MDSS_MDP_SCALE_FILTER_PCMN << 12);
+ 
+ 			writel_relaxed(init_phasex, pipe->base +
+ 				MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEX);
+-			writel_relaxed(phasex_step >> chroma_shift_x,
+-				pipe->base +
++			writel_relaxed(phasex_step >> chroma_shift, pipe->base +
+ 				MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPX);
+ 		} else {
+ 			if (src_w <= pipe->dst.w)
+@@ -1201,94 +1143,44 @@ static int mdss_mdp_scale_setup(struct mdss_mdp_pipe *pipe)
+ 		}
+ 	}
+ 
+-	if (pipe->scale.enable_pxl_ext) {
+-		if (pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
+-			/*program x,y initial phase and phase step*/
+-			writel_relaxed(pipe->scale.init_phase_x[0],
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C03_INIT_PHASEX);
+-			writel_relaxed(pipe->scale.phase_step_x[0],
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C03_PHASESTEPX);
+-			writel_relaxed(pipe->scale.init_phase_x[1],
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEX);
+-			writel_relaxed(pipe->scale.phase_step_x[1],
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPX);
+-
+-			writel_relaxed(pipe->scale.init_phase_y[0],
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C03_INIT_PHASEY);
+-			writel_relaxed(pipe->scale.phase_step_y[0],
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C03_PHASESTEPY);
+-			writel_relaxed(pipe->scale.init_phase_y[1],
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEY);
+-			writel_relaxed(pipe->scale.phase_step_y[1],
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPY);
+-		} else {
++	if (pipe->scale.enable_pxl_ext &&
++		pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
++
++		/*program x,y initial phase and phase step*/
++		writel_relaxed(pipe->scale.init_phase_x[0],
++			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C03_INIT_PHASEX);
++		writel_relaxed(pipe->scale.phase_step_x[0],
++			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C03_PHASESTEPX);
++		writel_relaxed(pipe->scale.init_phase_x[1],
++			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEX);
++		writel_relaxed(pipe->scale.phase_step_x[1],
++			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPX);
++
++		writel_relaxed(pipe->scale.init_phase_y[0],
++			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C03_INIT_PHASEY);
++		writel_relaxed(pipe->scale.phase_step_y[0],
++			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C03_PHASESTEPY);
++		writel_relaxed(pipe->scale.init_phase_y[1],
++			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEY);
++		writel_relaxed(pipe->scale.phase_step_y[1],
++			pipe->base + MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPY);
+ 
+-			writel_relaxed(pipe->scale.phase_step_x[0],
+-				pipe->base +
+-				MDSS_MDP_REG_SCALE_PHASE_STEP_X);
+-			writel_relaxed(pipe->scale.phase_step_y[0],
+-				pipe->base +
+-				MDSS_MDP_REG_SCALE_PHASE_STEP_Y);
+-			writel_relaxed(pipe->scale.init_phase_x[0],
+-				pipe->base +
+-				MDSS_MDP_REG_SCALE_INIT_PHASE_X);
+-			writel_relaxed(pipe->scale.init_phase_y[0],
+-				pipe->base +
+-				MDSS_MDP_REG_SCALE_INIT_PHASE_Y);
+-		}
+ 		/*program pixel extn values for the SSPP*/
+ 		mdss_mdp_pipe_program_pixel_extn(pipe);
++	} else if (pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
++		writel_relaxed(phasex_step, pipe->base +
++		   MDSS_MDP_REG_SCALE_PHASE_STEP_X);
++		writel_relaxed(phasey_step, pipe->base +
++		   MDSS_MDP_REG_SCALE_PHASE_STEP_Y);
++		writel_relaxed(init_phasex, pipe->base +
++			MDSS_MDP_REG_SCALE_INIT_PHASE_X);
++		writel_relaxed(init_phasey, pipe->base +
++			MDSS_MDP_REG_SCALE_INIT_PHASE_Y);
+ 	} else {
+-		if (pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
+-			/*program x,y initial phase and phase step*/
+-			writel_relaxed(0,
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C03_INIT_PHASEX);
+-			writel_relaxed(init_phasex,
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEX);
+-			writel_relaxed(phasex_step,
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C03_PHASESTEPX);
+-			writel_relaxed(phasex_step >> chroma_shift_x,
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPX);
+-
+-			writel_relaxed(0,
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C03_INIT_PHASEY);
+-			writel_relaxed(init_phasey,
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C12_INIT_PHASEY);
+-			writel_relaxed(phasey_step,
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C03_PHASESTEPY);
+-			writel_relaxed(phasey_step >> chroma_shift_y,
+-				pipe->base +
+-				MDSS_MDP_REG_VIG_QSEED2_C12_PHASESTEPY);
+-		} else {
+-
+-			writel_relaxed(phasex_step,
+-				pipe->base +
+-				MDSS_MDP_REG_SCALE_PHASE_STEP_X);
+-			writel_relaxed(phasey_step,
+-				pipe->base +
+-				MDSS_MDP_REG_SCALE_PHASE_STEP_Y);
+-			writel_relaxed(0,
+-				pipe->base +
+-				MDSS_MDP_REG_SCALE_INIT_PHASE_X);
+-			writel_relaxed(0,
+-				pipe->base +
+-				MDSS_MDP_REG_SCALE_INIT_PHASE_Y);
+-		}
++		writel_relaxed(phasex_step, pipe->base +
++		   MDSS_MDP_REG_SCALE_PHASE_STEP_X);
++		writel_relaxed(phasey_step, pipe->base +
++		   MDSS_MDP_REG_SCALE_PHASE_STEP_Y);
+ 	}
+ 
+ 	writel_relaxed(scale_config, pipe->base +
+@@ -1319,43 +1211,28 @@ void mdss_mdp_pipe_sspp_term(struct mdss_mdp_pipe *pipe)
+ 	struct pp_hist_col_info *hist_info;
+ 	char __iomem *ctl_base;
+ 
+-	if (pipe) {
+-		if (pipe->pp_res.hist.col_en) {
+-			done_bit = 3 << (pipe->num * 4);
+-			hist_info = &pipe->pp_res.hist;
+-			ctl_base = pipe->base +
+-				MDSS_MDP_REG_VIG_HIST_CTL_BASE;
+-			pp_histogram_disable(hist_info, done_bit, ctl_base);
+-		}
+-		memset(&pipe->pp_cfg, 0, sizeof(struct mdp_overlay_pp_params));
+-		memset(&pipe->pp_res, 0, sizeof(struct mdss_pipe_pp_res));
++	if (!pipe && pipe->pp_res.hist.col_en) {
++		done_bit = 3 << (pipe->num * 4);
++		hist_info = &pipe->pp_res.hist;
++		ctl_base = pipe->base +
++			MDSS_MDP_REG_VIG_HIST_CTL_BASE;
++		pp_histogram_disable(hist_info, done_bit, ctl_base);
+ 	}
++	memset(&pipe->pp_cfg, 0, sizeof(struct mdp_overlay_pp_params));
++	memset(&pipe->pp_res, 0, sizeof(struct mdss_pipe_pp_res));
+ }
+ 
+ int mdss_mdp_pipe_sspp_setup(struct mdss_mdp_pipe *pipe, u32 *op)
+ {
+ 	int ret = 0;
+ 	unsigned long flags = 0;
+ 	char __iomem *pipe_base;
+ 	u32 pipe_num;
+ 	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
+-	u32 current_opmode;
+-	u32 dcm_state = DCM_UNINIT;
+ 
+ 	if (pipe == NULL)
+ 		return -EINVAL;
+ 
+-	if (pipe->mixer && pipe->mixer->ctl && pipe->mixer->ctl->mfd)
+-		dcm_state = pipe->mixer->ctl->mfd->dcm_state;
+-
+-	/* Read IGC state and update the same if tuning mode is enable */
+-	if (dcm_state == DTM_ENTER) {
+-		current_opmode = readl_relaxed(pipe->base +
+-						MDSS_MDP_REG_SSPP_SRC_OP_MODE);
+-		*op |= (current_opmode & BIT(16));
+-		return ret;
+-	}
+-
+ 	/*
+ 	 * TODO: should this function be responsible for masking multiple
+ 	 * pipes to be written in dual pipe case?
+@@ -1398,10 +1275,10 @@ static int pp_mixer_setup(u32 disp_num,
+ 	struct pp_sts_type *pp_sts;
+ 	struct mdss_mdp_ctl *ctl;
+ 	char __iomem *addr;
++	dspp_num = mixer->num;
+ 
+ 	if (!mixer || !mixer->ctl)
+ 		return -EINVAL;
+-	dspp_num = mixer->num;
+ 	ctl = mixer->ctl;
+ 
+ 	/* no corresponding dspp */
+@@ -1503,20 +1380,19 @@ static int pp_histogram_setup(u32 *op, u32 block, struct mdss_mdp_mixer *mix)
+ 		goto error;
+ 	}
+ 
+-	mutex_lock(&hist_info->hist_mutex);
+-	spin_lock_irqsave(&hist_info->hist_lock, flag);
+ 	if (hist_info->col_en) {
+ 		*op |= op_flags;
++		mutex_lock(&hist_info->hist_mutex);
++		spin_lock_irqsave(&hist_info->hist_lock, flag);
+ 		col_state = hist_info->col_state;
+ 		if (col_state == HIST_IDLE) {
+ 			/* Kick off collection */
+ 			writel_relaxed(1, base + kick_base);
+ 			hist_info->col_state = HIST_START;
+-			complete(&hist_info->first_kick);
+ 		}
++		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
++		mutex_unlock(&hist_info->hist_mutex);
+ 	}
+-	spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+-	mutex_unlock(&hist_info->hist_mutex);
+ 	ret = 0;
+ error:
+ 	return ret;
+@@ -1750,28 +1626,27 @@ int mdss_mdp_pp_setup(struct mdss_mdp_ctl *ctl)
+ 
+ 	/* TODO: have some sort of reader/writer lock to prevent unclocked
+ 	 * access while display power is toggled */
+-	mutex_lock(&ctl->lock);
+-	if (!ctl->power_on) {
++	if (!ctl->mfd->panel_power_on) {
+ 		ret = -EPERM;
+ 		goto error;
+ 	}
++	mutex_lock(&ctl->mfd->lock);
+ 	ret = mdss_mdp_pp_setup_locked(ctl);
++	mutex_unlock(&ctl->mfd->lock);
+ error:
+-	mutex_unlock(&ctl->lock);
+-
+ 	return ret;
+ }
+ 
++/* call only when holding and mfd->lock */
+ int mdss_mdp_pp_setup_locked(struct mdss_mdp_ctl *ctl)
+ {
+ 	struct mdss_data_type *mdata = ctl->mdata;
+ 	int ret = 0;
+ 	u32 mixer_cnt;
+ 	u32 mixer_id[MDSS_MDP_INTF_MAX_LAYERMIXER];
+ 	u32 disp_num;
+ 	int i;
+ 	bool valid_mixers = true;
+-	bool valid_ad_panel = true;
+ 	if ((!ctl->mfd) || (!mdss_pp_res))
+ 		return -EINVAL;
+ 
+@@ -1792,13 +1667,7 @@ int mdss_mdp_pp_setup_locked(struct mdss_mdp_ctl *ctl)
+ 		if (mixer_id[i] >= mdata->nad_cfgs)
+ 			valid_mixers = false;
+ 	}
+-	valid_ad_panel = (ctl->mfd->panel_info->type != DTV_PANEL) &&
+-		(((mdata->mdp_rev < MDSS_MDP_HW_REV_103) &&
+-			(ctl->mfd->panel_info->type == WRITEBACK_PANEL)) ||
+-		(ctl->mfd->panel_info->type != WRITEBACK_PANEL));
+-
+-	if (valid_mixers && (mixer_cnt <= mdata->nmax_concurrent_ad_hw) &&
+-		valid_ad_panel) {
++	if (valid_mixers && (mixer_cnt <= mdata->nmax_concurrent_ad_hw)) {
+ 		ret = mdss_mdp_ad_setup(ctl->mfd);
+ 		if (ret < 0)
+ 			pr_warn("ad_setup(disp%d) returns %d", disp_num, ret);
+@@ -1830,7 +1699,7 @@ exit:
+  */
+ int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
+ {
+-	u32 flags = 0, disp_num, bl, ret = 0;
++	u32 flags = 0, disp_num, bl;
+ 	struct pp_sts_type pp_sts;
+ 	struct mdss_ad_info *ad;
+ 	struct mdss_data_type *mdata = ctl->mdata;
+@@ -1841,9 +1710,7 @@ int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
+ 	disp_num = ctl->mfd->index;
+ 
+ 	if (dspp_num < mdata->nad_cfgs) {
+-		ret = mdss_mdp_get_ad(ctl->mfd, &ad);
+-		if (ret)
+-			return ret;
++		ad = &mdata->ad_cfgs[dspp_num];
+ 
+ 		if (PP_AD_STATE_CFG & ad->state)
+ 			pp_ad_cfg_write(&mdata->ad_off[dspp_num], ad);
+@@ -1856,13 +1723,8 @@ int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
+ 			if (ad->state & PP_AD_STATE_BL_LIN) {
+ 				bl = ad->bl_lin[bl >> ad->bl_bright_shift];
+ 				bl = bl << ad->bl_bright_shift;
+-				ret = pp_ad_attenuate_bl(bl, &bl, ad->mfd);
+-				if (ret)
+-					pr_err("Failed to attenuate BL\n");
+ 			}
+-			linear_map(bl, &ad->bl_data,
+-				ad->bl_mfd->panel_info->bl_max,
+-				MDSS_MDP_AD_BL_SCALE);
++			ad->bl_data = bl;
+ 			pp_ad_input_write(&mdata->ad_off[dspp_num], ad);
+ 		}
+ 		if ((PP_AD_STATE_VSYNC & ad->state) && ad->calc_itr)
+@@ -1927,10 +1789,6 @@ int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
+ 			mdss_pp_res->gamut_disp_cfg[disp_num].flags |=
+ 				MDP_PP_OPS_WRITE;
+ 	}
+-#if defined(CONFIG_LCD_KCAL)
+-	if (disp_num == 0)
+-		pp_sts.pgc_sts |= PP_STS_ENABLE;
+-#endif
+ 	if (pp_sts.pgc_sts & PP_STS_ENABLE) {
+ 		flags |= PP_FLAGS_DIRTY_PGC;
+ 		if (!(mdss_pp_res->pgc_disp_cfg[disp_num].flags
+@@ -1943,152 +1801,95 @@ int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 dspp_num)
+ 	return 0;
+ }
+ 
+-#if defined(CONFIG_LCD_KCAL)
+-static struct mdp_ar_gc_lut_data test_r[GC_LUT_SEGMENTS] = {
+-		{0x00000000, 0x00000100, 0x00000000},
+-		{0x00000FFF, 0x00000000, 0x00007F80},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000}
+-};
+-
+-static struct mdp_ar_gc_lut_data test_g[GC_LUT_SEGMENTS] = {
+-		{0x00000000, 0x00000100, 0x00000000},
+-		{0x00000FFF, 0x00000000, 0x00007F80},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000}
+-};
+-
+-static struct mdp_ar_gc_lut_data test_b[GC_LUT_SEGMENTS] = {
+-		{0x00000000, 0x00000100, 0x00000000},
+-		{0x00000FFF, 0x00000000, 0x00007F80},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000},
+-		{0x00000000, 0x00000000, 0x00000000}
+-};
+-
+-void mdss_mdp_pp_argc(void)
++void mdss_mdp_pp_kcal_update(struct kcal_lut_data *lut_data)
+ {
+-	int disp_num = 0;
+-	u32 tbl_size;
+-
+-	struct mdp_ar_gc_lut_data *r_data;
+-	struct mdp_ar_gc_lut_data *g_data;
+-	struct mdp_ar_gc_lut_data *b_data;
+-	struct mdp_pgc_lut_data *pgc_config;
++	u32 copyback = 0;
++	struct mdp_pcc_cfg_data pcc_config;
+ 
+-	r_data = &mdss_pp_res->gc_lut_r[disp_num][0];
+-	g_data = &mdss_pp_res->gc_lut_g[disp_num][0];
+-	b_data = &mdss_pp_res->gc_lut_b[disp_num][0];
++	memset(&pcc_config, 0, sizeof(struct mdp_pcc_cfg_data));
+ 
+-	tbl_size = GC_LUT_SEGMENTS * sizeof(struct mdp_ar_gc_lut_data);
+-	memcpy(r_data, test_r, tbl_size);
+-	memcpy(g_data, test_g, tbl_size);
+-	memcpy(b_data, test_b, tbl_size);
++	pcc_config.block = MDP_LOGICAL_BLOCK_DISP_0;
++	pcc_config.ops = lut_data->enable ? MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE :
++		MDP_PP_OPS_WRITE | MDP_PP_OPS_DISABLE;
++	pcc_config.r.r = lut_data->red * PCC_ADJ;
++	pcc_config.g.g = lut_data->green * PCC_ADJ;
++	pcc_config.b.b = lut_data->blue * PCC_ADJ;
+ 
++	mdss_mdp_pcc_config(&pcc_config, &copyback);
++}
+ 
+-	pgc_config = &mdss_pp_res->pgc_disp_cfg[disp_num];
++void mdss_mdp_pp_kcal_pa(struct kcal_lut_data *lut_data)
++{
++	u32 copyback = 0;
++	struct mdp_pa_cfg_data pa_config;
++	struct mdp_pa_v2_cfg_data pa_v2_config;
++	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
+ 
+-	pgc_config->r_data =
+-		&mdss_pp_res->gc_lut_r[disp_num][0];
+-	pgc_config->g_data =
+-		&mdss_pp_res->gc_lut_g[disp_num][0];
+-	pgc_config->b_data =
+-		&mdss_pp_res->gc_lut_b[disp_num][0];
++	if (mdata->mdp_rev < MDSS_MDP_HW_REV_103) {
++		memset(&pa_config, 0, sizeof(struct mdp_pa_cfg_data));
+ 
+-	pgc_config->flags |= MDP_PP_OPS_WRITE;
+-	pgc_config->flags |= MDP_PP_OPS_ENABLE;
++		pa_config.block = MDP_LOGICAL_BLOCK_DISP_0;
++		pa_config.pa_data.flags = MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE;
++		pa_config.pa_data.hue_adj = lut_data->hue;
++		pa_config.pa_data.sat_adj = lut_data->sat;
++		pa_config.pa_data.val_adj = lut_data->val;
++		pa_config.pa_data.cont_adj = lut_data->cont;
+ 
+-	pr_info(">>>>> %s \n", __func__);
++		mdss_mdp_pa_config(&pa_config, &copyback);
++	} else {
++		memset(&pa_v2_config, 0, sizeof(struct mdp_pa_v2_cfg_data));
++
++		pa_v2_config.block = MDP_LOGICAL_BLOCK_DISP_0;
++		pa_v2_config.pa_v2_data.flags = MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE;
++		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_HUE_ENABLE;
++		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_HUE_MASK;
++		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_SAT_ENABLE;
++		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_SAT_MASK;
++		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_VAL_ENABLE;
++		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_VAL_MASK;
++		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_CONT_ENABLE;
++		pa_v2_config.pa_v2_data.flags |= MDP_PP_PA_CONT_MASK;
++		pa_v2_config.pa_v2_data.global_hue_adj = lut_data->hue;
++		pa_v2_config.pa_v2_data.global_sat_adj = lut_data->sat;
++		pa_v2_config.pa_v2_data.global_val_adj = lut_data->val;
++		pa_v2_config.pa_v2_data.global_cont_adj = lut_data->cont;
++
++		mdss_mdp_pa_v2_config(&pa_v2_config, &copyback);
++	}
+ }
+ 
+-
+-#define NUM_QLUT 256
+-#define MAX_KCAL_V (NUM_QLUT-1)
+-
+-#define SCALED_BY_KCAL(rgb, kcal) \
+-	(((((unsigned int)(rgb) * (unsigned int)(kcal)) << 10) / \
+-						(unsigned int)MAX_KCAL_V) >> 10)
+-
+-void mdss_mdp_pp_argc_kcal(int kr, int kg, int kb)/*struct mdss_mdp_ctl *ctl, */
++void mdss_mdp_pp_kcal_invert(struct kcal_lut_data *lut_data)
+ {
+ 	int i;
+-	int disp_num = 0;
+-	struct mdp_pgc_lut_data *pgc_config;
++	u32 disp_num = 0, copyback = 0, copy_from_kernel = 1;
++	struct msm_fb_data_type *igc_mfd;
++	struct mdp_igc_lut_data *igc_config;
++
++	igc_mfd = mdss_get_mfd_from_index(0);
++
++	igc_config = &mdss_pp_res->igc_disp_cfg[disp_num];
++	igc_config->c0_c1_data = &mdss_pp_res->igc_lut_c0c1[disp_num][0];
++	igc_config->c2_data = &mdss_pp_res->igc_lut_c2[disp_num][0];
++	igc_config->block = MDP_LOGICAL_BLOCK_DISP_0;
++	igc_config->len = IGC_LUT_ENTRIES;
++
++	if (igc_mfd && lut_data->invert) {
++		igc_config->ops = MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE;
++		for (i = 0; i < IGC_LUT_ENTRIES; i++) {
++			igc_c0_c1[i] = (igc_Table_RGB[i] & 0xfff) |
++				((igc_Table_RGB[i] & 0xfff)) << 16;
++			igc_c2[i] = igc_Table_RGB[i];
++		}
++		igc_config->c0_c1_data = &igc_c0_c1[0];
++		igc_config->c2_data = &igc_c2[0];
++	} else if (igc_mfd && !lut_data->invert)
++		igc_config->ops = MDP_PP_OPS_WRITE | MDP_PP_OPS_DISABLE;
++	else
++		return;
+ 
+-	for (i = 0; i < GC_LUT_SEGMENTS; i++) {
+-		mdss_pp_res->gc_lut_r[disp_num][i].slope =
+-		SCALED_BY_KCAL(test_r[i].slope, kr);
+-		mdss_pp_res->gc_lut_r[disp_num][i].offset =
+-		SCALED_BY_KCAL(test_r[i].offset, kr);
+-
+-		mdss_pp_res->gc_lut_g[disp_num][i].slope =
+-		SCALED_BY_KCAL(test_g[i].slope, kg);
+-		mdss_pp_res->gc_lut_g[disp_num][i].offset =
+-		SCALED_BY_KCAL(test_g[i].offset, kg);
+-
+-		mdss_pp_res->gc_lut_b[disp_num][i].slope =
+-		SCALED_BY_KCAL(test_b[i].slope, kb);
+-		mdss_pp_res->gc_lut_b[disp_num][i].offset =
+-		SCALED_BY_KCAL(test_b[i].offset, kb);
+-	}
+-	pgc_config = &mdss_pp_res->pgc_disp_cfg[disp_num];
+-	pgc_config->flags |= MDP_PP_OPS_WRITE;
+-	pgc_config->flags |= MDP_PP_OPS_ENABLE;
+-	/* mdss_mdp_pp_setup(ctl); */
+-	mdss_pp_res->pp_disp_flags[disp_num] |= PP_FLAGS_DIRTY_PGC;
+-
+-	pr_info(">>>>> %s \n", __func__);
++	mdss_mdp_igc_lut_config(igc_config, &copyback, copy_from_kernel);
+ }
+ 
+-int update_preset_lcdc_lut(void)
+-{
+-	int ret = 0;
+-
+-	pr_info("update_preset_lcdc_lut red=[%d], green=[%d], blue=[%d]\n", g_kcal_r, g_kcal_g, g_kcal_b);
+-
+-	mdss_mdp_pp_argc_kcal(g_kcal_r, g_kcal_g, g_kcal_b);
+-
+-	if (ret)
+-		pr_err("%s: failed to set lut! %d\n", __func__, ret);
+-
+-	return ret;
+-}
+-#endif
+ int mdss_mdp_pp_init(struct device *dev)
+ {
+ 	int i, ret = 0;
+@@ -2109,20 +1910,14 @@ int mdss_mdp_pp_init(struct device *dev)
+ 					&mdss_pp_res->dspp_hist[i].hist_mutex);
+ 				spin_lock_init(
+ 					&mdss_pp_res->dspp_hist[i].hist_lock);
+-				init_completion(
+-					&mdss_pp_res->dspp_hist[i].comp);
+-				init_completion(
+-					&mdss_pp_res->dspp_hist[i].first_kick);
+ 			}
+ 		}
+ 	}
+-	if (mdata && mdata->vig_pipes) {
++	if (mdata) {
+ 		vig = mdata->vig_pipes;
+ 		for (i = 0; i < mdata->nvig_pipes; i++) {
+ 			mutex_init(&vig[i].pp_res.hist.hist_mutex);
+ 			spin_lock_init(&vig[i].pp_res.hist.hist_lock);
+-			init_completion(&vig[i].pp_res.hist.comp);
+-			init_completion(&vig[i].pp_res.hist.first_kick);
+ 		}
+ 		if (!mdata->pp_bus_hdl) {
+ 			pp_bus_pdata = &mdp_pp_bus_scale_table;
+@@ -2142,20 +1937,9 @@ int mdss_mdp_pp_init(struct device *dev)
+ 		}
+ 
+ 	}
+-#if defined(CONFIG_LCD_KCAL)
+-/*             
+-                          
+-                                
+-*/
+-	if (!ret) {
+-		mdss_mdp_pp_argc();
+-		update_preset_lcdc_lut();
+-	}
+-#endif
+ 	mutex_unlock(&mdss_pp_mutex);
+ 	return ret;
+ }
+-
+ void mdss_mdp_pp_term(struct device *dev)
+ {
+ 	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
+@@ -2584,16 +2368,17 @@ pcc_config_exit:
+ static void pp_read_igc_lut_cached(struct mdp_igc_lut_data *cfg)
+ {
+ 	int i;
+-	u32 disp_num;
++	int disp_num;
+ 
+ 	disp_num = cfg->block - MDP_LOGICAL_BLOCK_DISP_0;
+ 	for (i = 0; i < IGC_LUT_ENTRIES; i++) {
+ 		cfg->c0_c1_data[i] =
+ 			mdss_pp_res->igc_disp_cfg[disp_num].c0_c1_data[i];
+ 		cfg->c2_data[i] =
+ 			mdss_pp_res->igc_disp_cfg[disp_num].c2_data[i];
+ 	}
+ }
++
+ #ifdef CONFIG_MACH_LGE
+ int mdss_dsi_panel_invert(u32 enable)
+ {
+@@ -3373,24 +3158,22 @@ static int pp_histogram_enable(struct pp_hist_col_info *hist_info,
+ 
+ 	mutex_lock(&hist_info->hist_mutex);
+ 	/* check if it is idle */
+-	spin_lock_irqsave(&hist_info->hist_lock, flag);
+ 	if (hist_info->col_en) {
+-		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+ 		pr_info("%s Hist collection has already been enabled %d",
+ 			__func__, (u32) ctl_base);
+ 		ret = -EINVAL;
+ 		goto exit;
+ 	}
+-	hist_info->read_request = 0;
+-	hist_info->col_state = HIST_RESET;
+-	hist_info->col_en = true;
+-	spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+ 	hist_info->frame_cnt = req->frame_cnt;
+-	INIT_COMPLETION(hist_info->comp);
+-	INIT_COMPLETION(hist_info->first_kick);
++	init_completion(&hist_info->comp);
+ 	hist_info->hist_cnt_read = 0;
+ 	hist_info->hist_cnt_sent = 0;
+ 	hist_info->hist_cnt_time = 0;
++	spin_lock_irqsave(&hist_info->hist_lock, flag);
++	hist_info->read_request = 0;
++	hist_info->col_state = HIST_RESET;
++	hist_info->col_en = true;
++	spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+ 	mdss_mdp_hist_intr_req(&mdata->hist_intr, 3 << shift_bit, true);
+ 	writel_relaxed(req->frame_cnt, ctl_base + 8);
+ 	/* Kick out reset start */
+@@ -3501,19 +3284,17 @@ static int pp_histogram_disable(struct pp_hist_col_info *hist_info,
+ 	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
+ 
+ 	mutex_lock(&hist_info->hist_mutex);
+-	spin_lock_irqsave(&hist_info->hist_lock, flag);
+ 	if (hist_info->col_en == false) {
+-		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+ 		pr_debug("Histogram already disabled (%d)", (u32) ctl_base);
+ 		ret = -EINVAL;
+ 		goto exit;
+ 	}
++	complete_all(&hist_info->comp);
++	spin_lock_irqsave(&hist_info->hist_lock, flag);
+ 	hist_info->col_en = false;
+ 	hist_info->col_state = HIST_UNKNOWN;
+ 	spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+ 	mdss_mdp_hist_intr_req(&mdata->hist_intr, done_bit, false);
+-	complete_all(&hist_info->comp);
+-	complete_all(&hist_info->first_kick);
+ 	writel_relaxed(BIT(1), ctl_base);/* cancel */
+ 	ret = 0;
+ exit:
+@@ -3746,21 +3527,20 @@ static int pp_hist_collect(struct mdp_histogram_data *hist,
+ 				struct pp_hist_col_info *hist_info,
+ 				char __iomem *ctl_base, u32 expect_sum)
+ {
+-	int kick_ret, wait_ret, ret = 0;
++	int wait_ret, ret = 0;
+ 	u32 timeout, sum;
+ 	char __iomem *v_base;
+ 	unsigned long flag;
+ 	struct mdss_pipe_pp_res *res;
+ 	struct mdss_mdp_pipe *pipe;
+ 
+ 	mutex_lock(&hist_info->hist_mutex);
+-	spin_lock_irqsave(&hist_info->hist_lock, flag);
+ 	if ((hist_info->col_en == 0) ||
+ 			(hist_info->col_state == HIST_UNKNOWN)) {
+-		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+ 		ret = -EINVAL;
+ 		goto hist_collect_exit;
+ 	}
++	spin_lock_irqsave(&hist_info->hist_lock, flag);
+ 	/* wait for hist done if cache has no data */
+ 	if (hist_info->col_state != HIST_READY) {
+ 		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+@@ -3772,27 +3552,13 @@ static int pp_hist_collect(struct mdp_histogram_data *hist,
+ 			pipe = container_of(res, struct mdss_mdp_pipe, pp_res);
+ 			pipe->params_changed++;
+ 		}
+-		kick_ret = wait_for_completion_killable_timeout(
+-				&(hist_info->first_kick), timeout /
+-					HIST_KICKOFF_WAIT_FRACTION);
+-		if (kick_ret != 0)
+-			wait_ret = wait_for_completion_killable_timeout(
++		wait_ret = wait_for_completion_killable_timeout(
+ 				&(hist_info->comp), timeout);
+ 
+ 		mutex_lock(&hist_info->hist_mutex);
+-		spin_lock_irqsave(&hist_info->hist_lock, flag);
+-		if (kick_ret == 0) {
+-			ret = -ENODATA;
+-			pr_debug("histogram kickoff not done yet");
+-			spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+-			goto hist_collect_exit;
+-		} else if (kick_ret < 0) {
+-			ret = -EINTR;
+-			pr_debug("histogram first kickoff interrupted");
+-			spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+-			goto hist_collect_exit;
+-		} else if (wait_ret == 0) {
++		if (wait_ret == 0) {
+ 			ret = -ETIMEDOUT;
++			spin_lock_irqsave(&hist_info->hist_lock, flag);
+ 			pr_debug("bin collection timedout, state %d",
+ 					hist_info->col_state);
+ 			/*
+@@ -3807,36 +3573,37 @@ static int pp_hist_collect(struct mdp_histogram_data *hist,
+ 			 */
+ 			hist_info->hist_cnt_time++;
+ 			hist_info->col_state = HIST_READY;
+-		} else if (wait_ret < 0) {
+ 			spin_unlock_irqrestore(&hist_info->hist_lock, flag);
++		} else if (wait_ret < 0) {
+ 			ret = -EINTR;
+ 			pr_debug("%s: bin collection interrupted",
+ 					__func__);
+ 			goto hist_collect_exit;
+ 		}
+-		if (hist_info->col_state != HIST_READY &&
+-				hist_info->col_state != HIST_UNKNOWN) {
++		if (hist_info->col_state != HIST_READY) {
+ 			ret = -ENODATA;
++			spin_lock_irqsave(&hist_info->hist_lock, flag);
+ 			hist_info->col_state = HIST_READY;
++			spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+ 			pr_debug("%s: state is not ready: %d",
+ 					__func__, hist_info->col_state);
+ 		}
++	} else {
++		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+ 	}
++	spin_lock_irqsave(&hist_info->hist_lock, flag);
+ 	if (hist_info->col_state == HIST_READY) {
+-		hist_info->col_state = HIST_IDLE;
+ 		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+ 		v_base = ctl_base + 0x1C;
+ 		mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON, false);
+ 		sum = pp_hist_read(v_base, hist_info);
+ 		mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
+-		if (expect_sum && sum != expect_sum) {
+-			pr_debug("hist error: bin sum incorrect! (%d/%d)\n",
+-				sum, expect_sum);
++		spin_lock_irqsave(&hist_info->hist_lock, flag);
++		if (expect_sum && sum != expect_sum)
+ 			ret = -ENODATA;
+-		}
+-	} else {
+-		spin_unlock_irqrestore(&hist_info->hist_lock, flag);
++		hist_info->col_state = HIST_IDLE;
+ 	}
++	spin_unlock_irqrestore(&hist_info->hist_lock, flag);
+ hist_collect_exit:
+ 	mutex_unlock(&hist_info->hist_mutex);
+ 	return ret;
+@@ -3900,9 +3667,6 @@ int mdss_mdp_hist_collect(struct mdp_histogram_data *hist)
+ 				temp_ret = ret;
+ 			ret = pp_hist_collect(hist, hists[i], ctl_base,
+ 								exp_sum);
+-			if (ret)
+-				pr_debug("hist error: dspp[%d] collect %d\n",
+-					dspp_num, ret);
+ 		}
+ 		for (i = 0; i < hist_cnt; i++) {
+ 			/* reset read requests and re-intialize completions */
+@@ -4000,10 +3764,6 @@ int mdss_mdp_hist_collect(struct mdp_histogram_data *hist)
+ 				temp_ret = ret;
+ 			ret = pp_hist_collect(hist, hist_info, ctl_base,
+ 								exp_sum);
+-			if (ret)
+-				pr_debug("hist error: pipe[%d] collect: %d\n",
+-					pipe->num, ret);
+-
+ 			mdss_mdp_pipe_unmap(pipe);
+ 		}
+ 		for (i = pipe_num; i < MDSS_PP_ARG_NUM; i++) {
+@@ -4119,17 +3879,19 @@ void mdss_mdp_hist_intr_done(u32 isr)
+ 			hist_info = &pipe->pp_res.hist;
+ 		}
+ 		/* Histogram Done Interrupt */
+-		if (hist_info && (isr_blk & 0x1) && (hist_info->col_en)) {
++		if (hist_info && (isr_blk & 0x1) &&
++			(hist_info->col_en)) {
+ 			spin_lock(&hist_info->hist_lock);
+ 			hist_info->col_state = HIST_READY;
+ 			spin_unlock(&hist_info->hist_lock);
+ 			if (hist_info->read_request == 1) {
+ 				complete(&hist_info->comp);
+ 				hist_info->read_request++;
+ 			}
+ 		}
+ 		/* Histogram Reset Done Interrupt */
+-		if (hist_info && (isr_blk & 0x2) && (hist_info->col_en)) {
++		if ((isr_blk & 0x2) &&
++			(hist_info->col_en)) {
+ 				spin_lock(&hist_info->hist_lock);
+ 				hist_info->col_state = HIST_IDLE;
+ 				spin_unlock(&hist_info->hist_lock);
+@@ -4220,11 +3982,6 @@ static int mdss_ad_init_checks(struct msm_fb_data_type *mfd)
+ 		return -ENODEV;
+ 	}
+ 
+-	if (ad_mfd->panel_info->type == DTV_PANEL) {
+-		pr_debug("AD not supported on external display\n");
+-		return ret;
+-	}
+-
+ 	mixer_num = mdss_mdp_get_ctl_mixers(ad_mfd->index, mixer_id);
+ 	if (!mixer_num) {
+ 		pr_debug("no mixers connected, %d", mixer_num);
+@@ -4299,7 +4056,7 @@ int mdss_mdp_ad_config(struct msm_fb_data_type *mfd,
+ {
+ 	struct mdss_ad_info *ad;
+ 	struct msm_fb_data_type *bl_mfd;
+-	int lin_ret = -1, inv_ret = -1, att_ret = -1, ret = 0;
++	int lin_ret = -1, inv_ret = -1, ret = 0;
+ 	u32 ratio_temp, shift = 0, last_ops;
+ 
+ 	ret = mdss_mdp_get_ad(mfd, &ad);
+@@ -4348,28 +4105,15 @@ int mdss_mdp_ad_config(struct msm_fb_data_type *mfd,
+ 		} else
+ 			ad->state |= PP_AD_STATE_BL_LIN;
+ 
+-		if ((init_cfg->params.init.bl_att_len == AD_BL_ATT_LUT_LEN) &&
+-			(init_cfg->params.init.bl_att_lut)) {
+-			att_ret = copy_from_user(&ad->bl_att_lut,
+-				init_cfg->params.init.bl_att_lut,
+-				init_cfg->params.init.bl_att_len *
+-				sizeof(uint32_t));
+-			if (att_ret)
+-				ret = -ENOMEM;
+-		} else {
+-			ret = -EINVAL;
+-		}
+-		if (ret) {
+-			ad->state &= ~PP_AD_STATE_BL_LIN;
+-			goto ad_config_exit;
+-		} else
+-			ad->state |= PP_AD_STATE_BL_LIN;
+-
+ 		ad->sts |= PP_AD_STS_DIRTY_INIT;
+ 	} else if (init_cfg->ops & MDP_PP_AD_CFG) {
+ 		memcpy(&ad->cfg, &init_cfg->params.cfg,
+ 				sizeof(struct mdss_ad_cfg));
+-		ad->cfg.backlight_scale = MDSS_MDP_AD_BL_SCALE;
++		/*
++		 * TODO: specify panel independent range of input from cfg,
++		 * scale input backlight_scale to panel bl_max's range
++		 */
++		ad->cfg.backlight_scale = bl_mfd->panel_info->bl_max;
+ 		ad->sts |= PP_AD_STS_DIRTY_CFG;
+ 	}
+ 
+@@ -4492,7 +4236,7 @@ error:
+ 	if (!ret) {
+ 		if (wait) {
+ 			mutex_lock(&ad->lock);
+-			INIT_COMPLETION(ad->comp);
++			init_completion(&ad->comp);
+ 			mutex_unlock(&ad->lock);
+ 		}
+ 		if (wait) {
+@@ -4631,7 +4375,10 @@ static void pp_ad_init_write(struct mdss_mdp_ad *ad_hw, struct mdss_ad_info *ad,
+ 			frame_end = 0xFFFF;
+ 			procs_start = 0x0;
+ 			procs_end = 0xFFFF;
+-			tile_ctrl = 0x0;
++			if (split_mode)
++				tile_ctrl = 0x0;
++			else
++				tile_ctrl = 0x1;
+ 		}
+ 
+ 
+@@ -4784,13 +4531,8 @@ static int mdss_mdp_ad_setup(struct msm_fb_data_type *mfd)
+ 			if (ad->state & PP_AD_STATE_BL_LIN) {
+ 				bl = ad->bl_lin[bl >> ad->bl_bright_shift];
+ 				bl = bl << ad->bl_bright_shift;
+-				ret = pp_ad_attenuate_bl(bl, &bl, ad->mfd);
+-				if (ret)
+-					pr_err("Failed to attenuate BL\n");
+ 			}
+-			linear_map(bl, &ad->bl_data,
+-				ad->bl_mfd->panel_info->bl_max,
+-				MDSS_MDP_AD_BL_SCALE);
++			ad->bl_data = bl;
+ 		}
+ 		mutex_unlock(&bl_mfd->bl_lock);
+ 		ad->reg_sts |= PP_AD_STS_DIRTY_DATA;
+@@ -4840,7 +4582,6 @@ static int mdss_mdp_ad_setup(struct msm_fb_data_type *mfd)
+ 		if (bl_mfd != mfd)
+ 			bl_mfd->ext_ad_ctrl = mfd->index;
+ 		bl_mfd->mdp.update_ad_input = pp_update_ad_input;
+-		bl_mfd->mdp.ad_attenuate_bl = pp_ad_attenuate_bl;
+ 		bl_mfd->ext_bl_ctrl = ad->cfg.bl_ctrl_mode;
+ 		mutex_unlock(&bl_mfd->bl_lock);
+ 
+@@ -4864,13 +4605,10 @@ static int mdss_mdp_ad_setup(struct msm_fb_data_type *mfd)
+ 								AD_BL_LIN_LEN);
+ 			memset(&ad->bl_lin_inv, 0, sizeof(uint32_t) *
+ 								AD_BL_LIN_LEN);
+-			memset(&ad->bl_att_lut, 0, sizeof(uint32_t) *
+-				AD_BL_ATT_LUT_LEN);
+ 			memset(&ad->init, 0, sizeof(struct mdss_ad_init));
+ 			memset(&ad->cfg, 0, sizeof(struct mdss_ad_cfg));
+ 			mutex_lock(&bl_mfd->bl_lock);
+ 			bl_mfd->mdp.update_ad_input = NULL;
+-			bl_mfd->mdp.ad_attenuate_bl = NULL;
+ 			bl_mfd->ext_bl_ctrl = 0;
+ 			bl_mfd->ext_ad_ctrl = -1;
+ 			mutex_unlock(&bl_mfd->bl_lock);
+@@ -4988,9 +4726,9 @@ static void pp_ad_calc_worker(struct work_struct *work)
+ 		ctl->remove_vsync_handler(ctl, &ad->handle);
+ 	}
+ 	mutex_unlock(&ad->lock);
+-	mutex_lock(&ctl->lock);
++	mutex_lock(&mfd->lock);
+ 	ctl->flush_bits |= BIT(13 + ad->num);
+-	mutex_unlock(&ctl->lock);
++	mutex_unlock(&mfd->lock);
+ 
+ 	/* Trigger update notify to wake up those waiting for display updates */
+ 	mdss_fb_update_notify_update(bl_mfd);
+@@ -5011,62 +4749,6 @@ static void pp_ad_cfg_lut(char __iomem *addr, u32 *data)
+ 			addr + ((PP_AD_LUT_LEN - 1) * 2));
+ }
+ 
+-static int  pp_ad_attenuate_bl(u32 bl, u32 *bl_out,
+-	struct msm_fb_data_type *mfd)
+-{
+-	u32 shift = 0, ratio_temp = 0;
+-	u32 n, lut_interval, bl_att;
+-	int ret = -1;
+-	struct mdss_ad_info *ad;
+-
+-	if (bl < 0) {
+-		pr_err("Invalid backlight input\n");
+-		return ret;
+-	}
+-
+-	ret = mdss_mdp_get_ad(mfd, &ad);
+-	if (ret || !ad || !ad->bl_mfd || !ad->bl_mfd->panel_info ||
+-		!ad->bl_mfd->panel_info->bl_max || !ad->bl_att_lut) {
+-		pr_err("Failed to get the ad.\n");
+-		return ret;
+-	}
+-	pr_debug("bl_in = %d\n", bl);
+-	/* map panel backlight range to AD backlight range */
+-	linear_map(bl, &bl, ad->bl_mfd->panel_info->bl_max,
+-		MDSS_MDP_AD_BL_SCALE);
+-
+-	pr_debug("Before attenuation = %d\n", bl);
+-	ratio_temp = MDSS_MDP_AD_BL_SCALE / (AD_BL_ATT_LUT_LEN - 1);
+-	while (ratio_temp > 0) {
+-		ratio_temp = ratio_temp >> 1;
+-		shift++;
+-	}
+-	n = bl >> shift;
+-	if (n >= (AD_BL_ATT_LUT_LEN - 1)) {
+-		pr_err("Invalid index for BL attenuation: %d.\n", n);
+-		return ret;
+-	}
+-	lut_interval = (MDSS_MDP_AD_BL_SCALE + 1) / (AD_BL_ATT_LUT_LEN - 1);
+-	bl_att = ad->bl_att_lut[n] + (bl - lut_interval * n) *
+-			(ad->bl_att_lut[n + 1] - ad->bl_att_lut[n]) /
+-			lut_interval;
+-	pr_debug("n = %d, bl_att = %d\n", n, bl_att);
+-	if (ad->init.alpha_base)
+-		*bl_out = (ad->init.alpha * bl_att +
+-			(ad->init.alpha_base - ad->init.alpha) * bl) /
+-			ad->init.alpha_base;
+-	else
+-		*bl_out = bl;
+-
+-	pr_debug("After attenuation = %d\n", *bl_out);
+-	/* map AD backlight range back to panel backlight range */
+-	linear_map(*bl_out, bl_out, MDSS_MDP_AD_BL_SCALE,
+-		ad->bl_mfd->panel_info->bl_max);
+-
+-	pr_debug("bl_out = %d\n", *bl_out);
+-	return 0;
+-}
+-
+ int mdss_mdp_ad_addr_setup(struct mdss_data_type *mdata, u32 *ad_offsets)
+ {
+ 	u32 i;
+@@ -5102,7 +4784,6 @@ int mdss_mdp_ad_addr_setup(struct mdss_data_type *mdata, u32 *ad_offsets)
+ 		mdata->ad_cfgs[i].last_str = 0xFFFFFFFF;
+ 		mdata->ad_cfgs[i].last_bl = 0;
+ 		mutex_init(&mdata->ad_cfgs[i].lock);
+-		init_completion(&mdata->ad_cfgs[i].comp);
+ 		mdata->ad_cfgs[i].handle.vsync_handler = pp_ad_vsync_handler;
+ 		mdata->ad_cfgs[i].handle.cmd_post_flush = true;
+ 		INIT_WORK(&mdata->ad_cfgs[i].calc_work, pp_ad_calc_worker);
+@@ -5130,8 +4811,7 @@ static int is_valid_calib_ctrl_addr(char __iomem *ptr)
+ 			break;
+ 		}
+ 
+-		for (stage = 0; stage < (mdss_res->nmixers_intf +
+-					 mdss_res->nmixers_wb); stage++)
++		for (stage = 0; stage < mdss_res->nmixers_intf; stage++)
+ 			if (ptr == base + MDSS_MDP_REG_CTL_LAYER(stage)) {
+ 				ret = MDP_PP_OPS_READ | MDP_PP_OPS_WRITE;
+ 				goto End;
+@@ -5222,10 +4902,7 @@ static int is_valid_calib_vig_addr(char __iomem *ptr)
+ 		} else if (ptr == base + MDSS_MDP_REG_SSPP_SRC_OP_MODE) {
+ 			ret = MDP_PP_OPS_READ | MDP_PP_OPS_WRITE;
+ 			break;
+-		/* QSEED2 range */
+-		} else if ((ptr >= base + MDSS_MDP_REG_VIG_QSEED2_SHARP) &&
+-				(ptr <= base + MDSS_MDP_REG_VIG_QSEED2_SHARP +
+-					MDSS_MDP_VIG_QSEED2_SHARP_SIZE)) {
++		} else if ((ptr == base + MDSS_MDP_REG_VIG_QSEED2_SHARP)) {
+ 			ret = MDP_PP_OPS_READ | MDP_PP_OPS_WRITE;
+ 			break;
+ 		/* PA range */
+@@ -5310,8 +4987,7 @@ static int is_valid_calib_mixer_addr(char __iomem *ptr)
+ 	int stage = 0;
+ 	struct mdss_mdp_mixer *mixer;
+ 
+-	for (counter = 0; counter < (mdss_res->nmixers_intf +
+-					mdss_res->nmixers_wb); counter++) {
++	for (counter = 0; counter < mdss_res->nmixers_intf; counter++) {
+ 		mixer = mdss_res->mixer_intf + counter;
+ 		base = mixer->base;
+ 
+@@ -5362,7 +5038,6 @@ static int is_valid_calib_addr(void *addr, u32 operation)
+ 	if ((unsigned int)addr % 4) {
+ 		ret = 0;
+ 	} else if (ptr == (mdss_res->mdp_base + MDSS_MDP_REG_HW_VERSION) ||
+-	    ptr == (mdss_res->mdp_base + MDSS_REG_HW_VERSION) ||
+ 	    ptr == (mdss_res->mdp_base + MDSS_MDP_REG_DISP_INTF_SEL)) {
+ 		ret = MDP_PP_OPS_READ;
+ 	/* IGC DSPP range */
+--
+libgit2 0.22.0
+
--
libgit2 0.22.0

